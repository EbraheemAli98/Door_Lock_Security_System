/*-----------------------------------------------------------------------------------------------------
 [FILE NAME]: CONTROL_software_support.h

 [AUTHOR]: Ebraheem Ali

 [VERSION]: V1.0

 [DATA CREATED]: June 19, 2022

 [DESCRIPTION]: This file contains the definitions and functions' declarations of the control_ECU application.
 ------------------------------------------------------------------------------------------------------*/
#ifndef CONTROL_SOFTWARE_SUPPORT_LAYER_CONTROL_SOFTWARE_SUPPORT_H_
#define CONTROL_SOFTWARE_SUPPORT_LAYER_CONTROL_SOFTWARE_SUPPORT_H_
/***********************************************************************************
 * 								INCLUDES
 ***********************************************************************************/
#define __OPTIMIZE__
#undef F_CPU
#define F_CPU 8000000UL

#include "../HELPERS/Std_types.h"
#include "../MCAL/UART/uart.h"

/***********************************************************************************
 * 								Definitions
 ***********************************************************************************/
#define NUMBER_OF_DIGITS_IN_PASSWORD (5)
#define MISMATCHED	(0)
#define MATCHED	(1)

#define READY	(0x01)

#define TIME_OF_ALARM	(60) /* 1 min */
#define TIME_OF_DOOR_STOP	(3)   /* 3 sec */
#define TIME_OF_DOOR_OPEN	(15)  /* 15 sec */
#define TIME_OF_DOOR_CLOSE  (15)  /* 15 sec */
#define TIME_OF_DOOR_ACTION (33)  /* 33 sec */

#define OPEN_DOOR_OPTION ('+')
#define CHANGE_PASSWORD_OPTION ('-')

#define DOOR_OPEN (88)
#define CHANGE_PASSWORD (44)
#define PASSWORD_START_ADDRESS_IN_MEMORY	(0x0311)
#define MAX_NUMBER_OF_WRONG_PASS_ENTERED  (3)

/* the address that store the flag variable which check if the user is using this program for the first time or not. */
#define CODE_STATE_ADDRESS (0x0310)

/***********************************************************************************
 * 							Extern Global Variables
 ***********************************************************************************/
/* array to store the password enterred by user the value of this array always stored in memory. */
extern uint8 g_currentPassword_array[NUMBER_OF_DIGITS_IN_PASSWORD];
/* array to store the password enterred to compare with the old password if both are equal the program will continue */
extern uint8 g_confirmPassword_array[NUMBER_OF_DIGITS_IN_PASSWORD];
/* variable to count the number of seconds */
extern volatile uint32 g_seconds;


/***********************************************************************************
 * 							 Functions' Prototype
 ***********************************************************************************/

/*----------------------------------------------------------------------------
 [Function Name]:CTRL_init
 [Arguments]: None
 [Description]: Function to init EEPROM,DC-Motor,UART,TIMER and Buzzer.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_init(void);
/*----------------------------------------------------------------------------
 [Function Name]:CTRL_receiveACK
 [Arguments]: None
 [Description]:Function force the CTRL to wait until HMI is ready
 	 	 	  once it receives ready, it respond by ready.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_receiveACK(void);

/*----------------------------------------------------------------------------
 [Function Name]: CTRL_sendACK
 [Arguments]: None
 [Description]: Function to send ready to HMI to let it know that CTRL ECU is
 	 	 	 	finish its task and now is ready to communicate.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_sendACK(void);
/*----------------------------------------------------------------------------
 [Function Name]: CTRL_receivePassword
 [Arguments]: uint8 a_password:
 	 	 	 	 - An array that store the comming password.
 [Description]: Function to receive the comming password in array.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_receivePassword(uint8 *a_password);
/*----------------------------------------------------------------------------
 [Function Name]:CTRL_sendPassword
 [Arguments]:  uint8 a_password:
 	 	 	 	 - An array to store the password send to HMI ECU.
 [Description]: Function used to send a password to HMI ECU.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_sendPassword(uint8 *a_password);
/*----------------------------------------------------------------------------
 [Function Name]:CTRL_compareTwoPasswords
 [Arguments]: None
 [Description]: Function to compare betweem the two input passwords and check
 	 	 	 	if they matched or mismatched.
 [Return]: return matched/mismatched.
 -----------------------------------------------------------------------------*/
uint8 CTRL_compareTwoPasswords(void);
/*----------------------------------------------------------------------------
 [Function Name]:CTRL_savePassword
 [Arguments]:None
 [Description]: Function to save the User's password in memory.
 [Return]:None
 -----------------------------------------------------------------------------*/
void CTRL_savePassword(void);
/*----------------------------------------------------------------------------
 [Function Name]:CTRL_readPassword
 [Arguments]: None
 [Description]: Function to return the value of the stored password from memory
 	 	 	 	to its global array again.
 [Return]:None
 -----------------------------------------------------------------------------*/
void CTRL_readPassword(void);

/*----------------------------------------------------------------------------
 [Function Name]: CTRL_passwordInputOperation
 [Arguments]: None
 [Description]: Functon to take the password from user after confirm it and
 	 	 	 	store it in memory.
 [Return]:None
 -----------------------------------------------------------------------------*/
void CTRL_passwordInputOperation(void);

/*----------------------------------------------------------------------------
 [Function Name]:CTRL_doorAction
 [Arguments]: None
 [Description]: Function to open the door for 15 sec and close it after 15 sec.
 [Return]:None
 -----------------------------------------------------------------------------*/
void CTRL_doorAction(void);

/*----------------------------------------------------------------------------
 [Function Name]:CTRL_callBack
 [Arguments]:
 [Description]: Function called back each interrupt, this function increment
 	 	 	 	the number of seconds by one each interrupt.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_callBack(void);
/*----------------------------------------------------------------------------
 [Function Name]:CTRL_alarmAction
 [Arguments]: None
 [Description]: Functoin to turn on the alarm for 1 min if the user has enterred
 	 	 	 	wrong password more than 3 times.
 [Return]: None
 -----------------------------------------------------------------------------*/
void CTRL_alarmAction(void);

/*----------------------------------------------------------------------------
 [Function Name]:CTRL_openDoorWrongPassword
 [Arguments]:
 [in]		  uint8 a_NumberOfWrongPasswords:
 	 	 	 	 - this variable is used to count how many times the user has
 	 	 	 	   enterred a wrong password.
 [Description]:Function handles the task of openning the door.
 	 	 	   - it check the correctness of the user password.
 	 	 	   - if it is true door action will take place.
 	 	 	   - if it is fale the more than three times alarm will turned on.
 [Return]:None
 -----------------------------------------------------------------------------*/
void CTRL_openDoorWrongPassword(uint8 *a_NumberOfWrongPasswords);

/*----------------------------------------------------------------------------
 [Function Name]:CTRL_changePassword
 [Arguments]:
 [in]		uint8 a_NumberOfWrongPasswords:
 	 	 	 	 - this variable is used to count how many times the user has
 	 	 	 	   enterred a wrong password.
 [Description]: Function handle the change password option.
 [Return]:None
 -----------------------------------------------------------------------------*/
void CTRL_changePassword(uint8 *a_NumberOfWrongPasswords);

#endif /* CONTROL_SOFTWARE_SUPPORT_LAYER_CONTROL_SOFTWARE_SUPPORT_H_ */
