
Door_Locker_Security_Systems_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002bd8  00002c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800096  00800096  00002ca2  2**0
                  ALLOC
  3 .stab         00003840  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025f2  00000000  00000000  000064e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c668  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ca55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_6>
      1c:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_7>
      20:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 14 	call	0x2960	; 0x2960 <main>
      8a:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
#include "uart.h"
#include "../../LIBRARIES/comman_macros.h"


void UART_Init(UART_ConfigType* uart_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_Init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01
	/****************** UCSRA Description ******************************
	 * set U2X=1 for double transmission speed.
	 *******************************************************************/
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ******************************************************************/
	UCSRB = (1<<TXEN)|(1<<RXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (uart_config->N_StopBits<<USBS)|(uart_config->frame_type<<1)|(uart_config->parity_type<<4)|(1<<URSEL);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	86 81       	ldd	r24, Z+6	; 0x06
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	28 2f       	mov	r18, r24
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	28 2b       	or	r18, r24
     b96:	eb 81       	ldd	r30, Y+3	; 0x03
     b98:	fc 81       	ldd	r31, Y+4	; 0x04
     b9a:	85 81       	ldd	r24, Z+5	; 0x05
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	82 95       	swap	r24
     ba2:	92 95       	swap	r25
     ba4:	90 7f       	andi	r25, 0xF0	; 240
     ba6:	98 27       	eor	r25, r24
     ba8:	80 7f       	andi	r24, 0xF0	; 240
     baa:	98 27       	eor	r25, r24
     bac:	82 2b       	or	r24, r18
     bae:	80 68       	ori	r24, 0x80	; 128
     bb0:	8c 93       	st	X, r24

	/* *************************************
	 * Calculate the UBRR register value
	 * *************************************/
	ubrr_value = (uint16)(((F_CPU)/(uart_config->baud_rate*8UL))-1);
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	a2 81       	ldd	r26, Z+2	; 0x02
     bbc:	b3 81       	ldd	r27, Z+3	; 0x03
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	aa 1f       	adc	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	aa 1f       	adc	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	9c 01       	movw	r18, r24
     bd8:	ad 01       	movw	r20, r26
     bda:	80 e4       	ldi	r24, 0x40	; 64
     bdc:	92 e4       	ldi	r25, 0x42	; 66
     bde:	af e0       	ldi	r26, 0x0F	; 15
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <__udivmodsi4>
     bea:	da 01       	movw	r26, r20
     bec:	c9 01       	movw	r24, r18
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01

	/****************************************************************************
	 * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 ****************************************************************************/
	UBRRH = (ubrr_value >> 8);
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	89 2f       	mov	r24, r25
     bfe:	99 27       	eor	r25, r25
     c00:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c02:	e9 e2       	ldi	r30, 0x29	; 41
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	80 83       	st	Z, r24
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Poll until the USART data register empty flag is, to make sure the UDR has empty now and ready to transmit
	 *  a new data.
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     c24:	eb e2       	ldi	r30, 0x2B	; 43
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	80 72       	andi	r24, 0x20	; 32
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	b9 f3       	breq	.-18     	; 0xc24 <UART_sendByte+0xc>
	/*
	 * Put the required data in UDR register
	 * It also clear the UDRE flag as the UDR register is not empty now.
	 */
	UDR = data;
     c36:	ec e2       	ldi	r30, 0x2C	; 44
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	80 83       	st	Z, r24
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <UART_receiveByte>:


uint8 UART_receiveByte(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Poll until the receive complete flag is set, to make sure the UDR has an correctly unread data
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 23       	and	r24, r24
     c56:	dc f7       	brge	.-10     	; 0xc4e <UART_receiveByte+0x8>
	/* Read the unread data in the receive buffer register */
	return UDR;
     c58:	ec e2       	ldi	r30, 0x2C	; 44
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <TWI_init>:
#include <avr/io.h>
#include "twi.h"
#include "../../LIBRARIES/comman_macros.h"

void TWI_init(TWI_configType *a_Ptr)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <TWI_init+0x6>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = a_Ptr->bitRate;
     c72:	a0 e2       	ldi	r26, 0x20	; 32
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e9 81       	ldd	r30, Y+1	; 0x01
     c78:	fa 81       	ldd	r31, Y+2	; 0x02
     c7a:	80 81       	ld	r24, Z
     c7c:	8c 93       	st	X, r24
	TWSR = 0x00;
     c7e:	e1 e2       	ldi	r30, 0x21	; 33
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = a_Ptr->deviceAddress; // my address = 0x01 :)
     c84:	a2 e2       	ldi	r26, 0x22	; 34
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	81 81       	ldd	r24, Z+1	; 0x01
     c8e:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     c90:	e6 e5       	ldi	r30, 0x56	; 86
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	80 83       	st	Z, r24
}
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <TWI_start>:

void TWI_start(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     caa:	e6 e5       	ldi	r30, 0x56	; 86
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	84 ea       	ldi	r24, 0xA4	; 164
     cb0:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     cb2:	e6 e5       	ldi	r30, 0x56	; 86
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	dc f7       	brge	.-10     	; 0xcb2 <TWI_start+0x10>
}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <TWI_stop>:

void TWI_stop(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     cca:	e6 e5       	ldi	r30, 0x56	; 86
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	84 e9       	ldi	r24, 0x94	; 148
     cd0:	80 83       	st	Z, r24
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     ce4:	e3 e2       	ldi	r30, 0x23	; 35
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     cec:	e6 e5       	ldi	r30, 0x56	; 86
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	84 e8       	ldi	r24, 0x84	; 132
     cf2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     cf4:	e6 e5       	ldi	r30, 0x56	; 86
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 23       	and	r24, r24
     cfc:	dc f7       	brge	.-10     	; 0xcf4 <TWI_writeByte+0x1c>
}
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d0e:	e6 e5       	ldi	r30, 0x56	; 86
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	84 ec       	ldi	r24, 0xC4	; 196
     d14:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d16:	e6 e5       	ldi	r30, 0x56	; 86
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	88 23       	and	r24, r24
     d1e:	dc f7       	brge	.-10     	; 0xd16 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     d20:	e3 e2       	ldi	r30, 0x23	; 35
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     d34:	e6 e5       	ldi	r30, 0x56	; 86
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	84 e8       	ldi	r24, 0x84	; 132
     d3a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d3c:	e6 e5       	ldi	r30, 0x56	; 86
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	88 23       	and	r24, r24
     d44:	dc f7       	brge	.-10     	; 0xd3c <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     d46:	e3 e2       	ldi	r30, 0x23	; 35
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
}
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     d5c:	e1 e2       	ldi	r30, 0x21	; 33
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	88 7f       	andi	r24, 0xF8	; 248
     d64:	89 83       	std	Y+1, r24	; 0x01
    return status;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <GPT_startTimer>:
/*******************************************************************************
 * 						GPT Functions' Definition
 *******************************************************************************/

void GPT_startTimer(TimerType Tx)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	if(Tx>=0 && Tx<=2)
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	83 30       	cpi	r24, 0x03	; 3
     d80:	70 f4       	brcc	.+28     	; 0xd9e <GPT_startTimer+0x2e>
	{
		(*GPT_Init[Tx])(&GPT_ConfigStructObj);
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	fc 01       	movw	r30, r24
     d8e:	e8 59       	subi	r30, 0x98	; 152
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	01 90       	ld	r0, Z+
     d94:	f0 81       	ld	r31, Z
     d96:	e0 2d       	mov	r30, r0
     d98:	8e e6       	ldi	r24, 0x6E	; 110
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	09 95       	icall
	}
	else
	{
		/* Do Nothing... */
	}
}
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <GPT_setPrescaler>:
#ifdef GPT_SET_PRESCALER_API
/*--------------------------------------- GPT_setPrescaler ----------------------------------------------------------*/
void GPT_setPrescaler(TimerType Tx,GPT_PrescalerType value)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	00 d0       	rcall	.+0      	; 0xdac <GPT_setPrescaler+0x6>
     dac:	00 d0       	rcall	.+0      	; 0xdae <GPT_setPrescaler+0x8>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	6a 83       	std	Y+2, r22	; 0x02
	if(Tx >= T0 && Tx <= T2)
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	83 30       	cpi	r24, 0x03	; 3
     dba:	98 f5       	brcc	.+102    	; 0xe22 <GPT_setPrescaler+0x7c>
	{
		switch(Tx)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	3c 83       	std	Y+4, r19	; 0x04
     dc4:	2b 83       	std	Y+3, r18	; 0x03
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	a1 f0       	breq	.+40     	; 0xdf8 <GPT_setPrescaler+0x52>
     dd0:	2b 81       	ldd	r18, Y+3	; 0x03
     dd2:	3c 81       	ldd	r19, Y+4	; 0x04
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	31 05       	cpc	r19, r1
     dd8:	d1 f0       	breq	.+52     	; 0xe0e <GPT_setPrescaler+0x68>
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	01 f5       	brne	.+64     	; 0xe22 <GPT_setPrescaler+0x7c>
		{
		case T0:
			TCCR0 = (TCCR0 & 0xF8)|(value);
     de2:	a3 e5       	ldi	r26, 0x53	; 83
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e3 e5       	ldi	r30, 0x53	; 83
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	98 2f       	mov	r25, r24
     dee:	98 7f       	andi	r25, 0xF8	; 248
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	89 2b       	or	r24, r25
     df4:	8c 93       	st	X, r24
     df6:	15 c0       	rjmp	.+42     	; 0xe22 <GPT_setPrescaler+0x7c>
			break;
		case T1:
			TCCR1B = (TCCR1B & 0xF8) | (value);
     df8:	ae e4       	ldi	r26, 0x4E	; 78
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ee e4       	ldi	r30, 0x4E	; 78
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	98 2f       	mov	r25, r24
     e04:	98 7f       	andi	r25, 0xF8	; 248
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	89 2b       	or	r24, r25
     e0a:	8c 93       	st	X, r24
     e0c:	0a c0       	rjmp	.+20     	; 0xe22 <GPT_setPrescaler+0x7c>
			break;
		case T2:
			TCCR2 = (TCCR2 & 0xF8)|(value);
     e0e:	a5 e4       	ldi	r26, 0x45	; 69
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e4       	ldi	r30, 0x45	; 69
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	98 2f       	mov	r25, r24
     e1a:	98 7f       	andi	r25, 0xF8	; 248
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	89 2b       	or	r24, r25
     e20:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <GPT_setInitValue>:
#endif
/*--------------------------------------- GPT_setInitValue ----------------------------------------------------------*/
#ifdef GPT_SET_INIT_VALUE_API
void GPT_setInitValue(TimerType Tx,TimerValueType value)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	00 d0       	rcall	.+0      	; 0xe36 <GPT_setInitValue+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <GPT_setInitValue+0x8>
     e38:	0f 92       	push	r0
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	7b 83       	std	Y+3, r23	; 0x03
     e42:	6a 83       	std	Y+2, r22	; 0x02
	if(Tx>=T0 && Tx<=T2)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	83 30       	cpi	r24, 0x03	; 3
     e48:	18 f5       	brcc	.+70     	; 0xe90 <GPT_setInitValue+0x60>
	{
		switch(Tx)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3d 83       	std	Y+5, r19	; 0x05
     e52:	2c 83       	std	Y+4, r18	; 0x04
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	71 f0       	breq	.+28     	; 0xe7a <GPT_setInitValue+0x4a>
     e5e:	2c 81       	ldd	r18, Y+4	; 0x04
     e60:	3d 81       	ldd	r19, Y+5	; 0x05
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	81 f0       	breq	.+32     	; 0xe88 <GPT_setInitValue+0x58>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	81 f4       	brne	.+32     	; 0xe90 <GPT_setInitValue+0x60>
		{
		case T0:
			TCNT0 = value;
     e70:	e2 e5       	ldi	r30, 0x52	; 82
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	80 83       	st	Z, r24
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <GPT_setInitValue+0x60>
			break;
		case T1:
			TCNT1 = value;
     e7a:	ec e4       	ldi	r30, 0x4C	; 76
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <GPT_setInitValue+0x60>
			break;
		case T2:
			TCNT2 = value;
     e88:	e4 e4       	ldi	r30, 0x44	; 68
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <GPT_setCompValue>:
#endif
/*--------------------------------------- GPT_setCompValue ----------------------------------------------------------*/
#ifdef GPT_SET_COMP_VALUE_API
void GPT_setCompValue(TimerType Tx,TimerValueType value)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <GPT_setCompValue+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <GPT_setCompValue+0x8>
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	7b 83       	std	Y+3, r23	; 0x03
     eb2:	6a 83       	std	Y+2, r22	; 0x02
	if(Tx>=T0 && Tx<=T2)
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	18 f5       	brcc	.+70     	; 0xf00 <GPT_setCompValue+0x60>
	{
		switch(Tx)
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3d 83       	std	Y+5, r19	; 0x05
     ec2:	2c 83       	std	Y+4, r18	; 0x04
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	91 05       	cpc	r25, r1
     ecc:	71 f0       	breq	.+28     	; 0xeea <GPT_setCompValue+0x4a>
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	81 f0       	breq	.+32     	; 0xef8 <GPT_setCompValue+0x58>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	81 f4       	brne	.+32     	; 0xf00 <GPT_setCompValue+0x60>
		{
		case T0:
			OCR0 = value;
     ee0:	ec e5       	ldi	r30, 0x5C	; 92
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	80 83       	st	Z, r24
     ee8:	0b c0       	rjmp	.+22     	; 0xf00 <GPT_setCompValue+0x60>
			break;
		case T1:
			OCR1A = value;
     eea:	ea e4       	ldi	r30, 0x4A	; 74
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	9b 81       	ldd	r25, Y+3	; 0x03
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <GPT_setCompValue+0x60>
			break;
		case T2:
			OCR2 = value;
     ef8:	e3 e4       	ldi	r30, 0x43	; 67
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <GPT_setMode>:
#endif
/*--------------------------------------- GPT_setMode ----------------------------------------------------------*/
#ifdef GPT_SET_MODE_API
void GPT_setMode(TimerType Tx,GPT_ModeType mode)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	2a 97       	sbiw	r28, 0x0a	; 10
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	cd bf       	out	0x3d, r28	; 61
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	83 30       	cpi	r24, 0x03	; 3
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <GPT_setMode+0x20>
     f2e:	59 c0       	rjmp	.+178    	; 0xfe2 <GPT_setMode+0xd2>
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	88 23       	and	r24, r24
     f34:	21 f0       	breq	.+8      	; 0xf3e <GPT_setMode+0x2e>
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	09 f0       	breq	.+2      	; 0xf3e <GPT_setMode+0x2e>
     f3c:	52 c0       	rjmp	.+164    	; 0xfe2 <GPT_setMode+0xd2>
	{
		switch(Tx)
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3a 87       	std	Y+10, r19	; 0x0a
     f46:	29 87       	std	Y+9, r18	; 0x09
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	91 05       	cpc	r25, r1
     f50:	f9 f0       	breq	.+62     	; 0xf90 <GPT_setMode+0x80>
     f52:	29 85       	ldd	r18, Y+9	; 0x09
     f54:	3a 85       	ldd	r19, Y+10	; 0x0a
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	79 f1       	breq	.+94     	; 0xfba <GPT_setMode+0xaa>
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	09 f0       	breq	.+2      	; 0xf66 <GPT_setMode+0x56>
     f64:	3e c0       	rjmp	.+124    	; 0xfe2 <GPT_setMode+0xd2>
		{
		case T0:
			(mode == NORMAL)? (TCCR0 &=~ (1<<WGM01)):(TCCR0 |= (1<<WGM01));
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	88 23       	and	r24, r24
     f6a:	49 f4       	brne	.+18     	; 0xf7e <GPT_setMode+0x6e>
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	87 7f       	andi	r24, 0xF7	; 247
     f78:	8c 93       	st	X, r24
     f7a:	9c 91       	ld	r25, X
     f7c:	32 c0       	rjmp	.+100    	; 0xfe2 <GPT_setMode+0xd2>
     f7e:	a3 e5       	ldi	r26, 0x53	; 83
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e3 e5       	ldi	r30, 0x53	; 83
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 60       	ori	r24, 0x08	; 8
     f8a:	8c 93       	st	X, r24
     f8c:	2c 91       	ld	r18, X
     f8e:	29 c0       	rjmp	.+82     	; 0xfe2 <GPT_setMode+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? (TCCR1B &= ~(1<<WGM12) & ~(1<<WGM13)):(TCCR1B |= (1<<WGM12)| (1<<WGM13));

#else
			(mode == NORMAL)? (TCCR1B &=~ (1<<WGM12)):(TCCR1B |= (1<<WGM12));
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 23       	and	r24, r24
     f94:	49 f4       	brne	.+18     	; 0xfa8 <GPT_setMode+0x98>
     f96:	ae e4       	ldi	r26, 0x4E	; 78
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ee e4       	ldi	r30, 0x4E	; 78
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	87 7f       	andi	r24, 0xF7	; 247
     fa2:	8c 93       	st	X, r24
     fa4:	3c 91       	ld	r19, X
     fa6:	1d c0       	rjmp	.+58     	; 0xfe2 <GPT_setMode+0xd2>
     fa8:	ae e4       	ldi	r26, 0x4E	; 78
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ee e4       	ldi	r30, 0x4E	; 78
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	88 60       	ori	r24, 0x08	; 8
     fb4:	8c 93       	st	X, r24
     fb6:	8c 91       	ld	r24, X
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <GPT_setMode+0xd2>

#endif
			break;
		case T2:
			(mode == NORMAL)? (TCCR0 &=~ (1<<WGM21)):(TCCR0 |= (1<<WGM21));
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	88 23       	and	r24, r24
     fbe:	49 f4       	brne	.+18     	; 0xfd2 <GPT_setMode+0xc2>
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	87 7f       	andi	r24, 0xF7	; 247
     fcc:	8c 93       	st	X, r24
     fce:	9c 91       	ld	r25, X
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <GPT_setMode+0xd2>
     fd2:	a3 e5       	ldi	r26, 0x53	; 83
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e3 e5       	ldi	r30, 0x53	; 83
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
     fe0:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
     fe2:	2a 96       	adiw	r28, 0x0a	; 10
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPT_stopTimer>:
#endif
/*--------------------------------------- GPT_stopTimer ----------------------------------------------------------*/
void GPT_stopTimer(TimerType Tx)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPT_stopTimer+0x6>
     ffa:	0f 92       	push	r0
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	89 83       	std	Y+1, r24	; 0x01
	switch(Tx)
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	3b 83       	std	Y+3, r19	; 0x03
    100a:	2a 83       	std	Y+2, r18	; 0x02
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	91 05       	cpc	r25, r1
    1014:	69 f0       	breq	.+26     	; 0x1030 <GPT_stopTimer+0x3c>
    1016:	2a 81       	ldd	r18, Y+2	; 0x02
    1018:	3b 81       	ldd	r19, Y+3	; 0x03
    101a:	22 30       	cpi	r18, 0x02	; 2
    101c:	31 05       	cpc	r19, r1
    101e:	61 f0       	breq	.+24     	; 0x1038 <GPT_stopTimer+0x44>
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	59 f4       	brne	.+22     	; 0x103e <GPT_stopTimer+0x4a>
	{
	case T0:
		TCCR0 = 0;
    1028:	e3 e5       	ldi	r30, 0x53	; 83
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	10 82       	st	Z, r1
    102e:	07 c0       	rjmp	.+14     	; 0x103e <GPT_stopTimer+0x4a>
		break;
	case T1:
		TCCR1B = 0;
    1030:	ee e4       	ldi	r30, 0x4E	; 78
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	10 82       	st	Z, r1
    1036:	03 c0       	rjmp	.+6      	; 0x103e <GPT_stopTimer+0x4a>
		break;
	case T2:
		TCCR2 = 0;
    1038:	e5 e4       	ldi	r30, 0x45	; 69
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	10 82       	st	Z, r1
		break;
	default:
		/* Do Nothing...*/
		break;
	}
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <GPT_InitTimer0>:

/*------------------------------------------ GPT_InitTimer0 ------------------------------------------------------*/
static void GPT_InitTimer0(const GPT_ConfigType* Config_Ptr)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <GPT_InitTimer0+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPT_InitTimer0+0x8>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	09 f4       	brne	.+2      	; 0x1064 <GPT_InitTimer0+0x1a>
    1062:	48 c0       	rjmp	.+144    	; 0x10f4 <GPT_InitTimer0+0xaa>
	{
		/* Set an Initial Value for Timer0 */
		TCNT0 = Config_Ptr->GPT_Config[T0].TimerInitValue;
    1064:	a2 e5       	ldi	r26, 0x52	; 82
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e9 81       	ldd	r30, Y+1	; 0x01
    106a:	fa 81       	ldd	r31, Y+2	; 0x02
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	8c 93       	st	X, r24
		switch(Config_Ptr->GPT_Config[T0].mode)
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	81 81       	ldd	r24, Z+1	; 0x01
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3c 83       	std	Y+4, r19	; 0x04
    107e:	2b 83       	std	Y+3, r18	; 0x03
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	31 f0       	breq	.+12     	; 0x1094 <GPT_InitTimer0+0x4a>
    1088:	2b 81       	ldd	r18, Y+3	; 0x03
    108a:	3c 81       	ldd	r19, Y+4	; 0x04
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	79 f0       	breq	.+30     	; 0x10b0 <GPT_InitTimer0+0x66>
    1092:	30 c0       	rjmp	.+96     	; 0x10f4 <GPT_InitTimer0+0xaa>
			 * |FOC0 | WGM00 | COM01 | COM00 | WGM01 | CS02 | CS01 | CS00|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   0   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR0 = (1<<FOC0)|((TCCR0 & 0xF8)|(Config_Ptr->GPT_Config[T0].prescaler));
    1094:	a3 e5       	ldi	r26, 0x53	; 83
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e3 e5       	ldi	r30, 0x53	; 83
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	98 2f       	mov	r25, r24
    10a0:	98 7f       	andi	r25, 0xF8	; 248
    10a2:	e9 81       	ldd	r30, Y+1	; 0x01
    10a4:	fa 81       	ldd	r31, Y+2	; 0x02
    10a6:	82 81       	ldd	r24, Z+2	; 0x02
    10a8:	89 2b       	or	r24, r25
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	8c 93       	st	X, r24
    10ae:	22 c0       	rjmp	.+68     	; 0x10f4 <GPT_InitTimer0+0xaa>
			break;
		/*=========================================== CTC Mode ========================================================*/
		case OUTPUT_COMPARE:
			/* Initialize OCR0 = TOP ,for CTC Mode */
			OCR0 = Config_Ptr->GPT_Config[T0].TimerCompValue;
    10b0:	ac e5       	ldi	r26, 0x5C	; 92
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e9 81       	ldd	r30, Y+1	; 0x01
    10b6:	fa 81       	ldd	r31, Y+2	; 0x02
    10b8:	86 81       	ldd	r24, Z+6	; 0x06
    10ba:	97 81       	ldd	r25, Z+7	; 0x07
    10bc:	8c 93       	st	X, r24
			 * |FOC0 | WGM00 | COM01 | COM00 | WGM01 | CS02 | CS01 | CS00|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   1   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR0 = (1<<FOC0)|(1<<WGM01)|((TCCR0 & 0xF8)|(Config_Ptr->GPT_Config[T0].prescaler))| (0x30 & (Config_Ptr->GPT_Config[T0].CTC_waveForm<<4));
    10be:	a3 e5       	ldi	r26, 0x53	; 83
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e3 e5       	ldi	r30, 0x53	; 83
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	98 2f       	mov	r25, r24
    10ca:	98 7f       	andi	r25, 0xF8	; 248
    10cc:	e9 81       	ldd	r30, Y+1	; 0x01
    10ce:	fa 81       	ldd	r31, Y+2	; 0x02
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	89 2b       	or	r24, r25
    10d4:	28 2f       	mov	r18, r24
    10d6:	28 68       	ori	r18, 0x88	; 136
    10d8:	e9 81       	ldd	r30, Y+1	; 0x01
    10da:	fa 81       	ldd	r31, Y+2	; 0x02
    10dc:	83 81       	ldd	r24, Z+3	; 0x03
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	82 95       	swap	r24
    10e4:	92 95       	swap	r25
    10e6:	90 7f       	andi	r25, 0xF0	; 240
    10e8:	98 27       	eor	r25, r24
    10ea:	80 7f       	andi	r24, 0xF0	; 240
    10ec:	98 27       	eor	r25, r24
    10ee:	80 73       	andi	r24, 0x30	; 48
    10f0:	82 2b       	or	r24, r18
    10f2:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <GPT_InitTimer1>:

/*------------------------------------------ GPT_InitTimer1 ------------------------------------------------------*/

static void GPT_InitTimer1(const GPT_ConfigType* Config_Ptr)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <GPT_InitTimer1+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <GPT_InitTimer1+0x8>
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	09 f4       	brne	.+2      	; 0x111c <GPT_InitTimer1+0x1a>
    111a:	53 c0       	rjmp	.+166    	; 0x11c2 <GPT_InitTimer1+0xc0>
	{
		/* Set an Initial Value for Timer1 */
		TCNT1 = Config_Ptr->GPT_Config[T1].TimerInitValue;
    111c:	ac e4       	ldi	r26, 0x4C	; 76
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e9 81       	ldd	r30, Y+1	; 0x01
    1122:	fa 81       	ldd	r31, Y+2	; 0x02
    1124:	84 85       	ldd	r24, Z+12	; 0x0c
    1126:	95 85       	ldd	r25, Z+13	; 0x0d
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
		switch(Config_Ptr->GPT_Config[T1].mode)
    112e:	e9 81       	ldd	r30, Y+1	; 0x01
    1130:	fa 81       	ldd	r31, Y+2	; 0x02
    1132:	81 85       	ldd	r24, Z+9	; 0x09
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3c 83       	std	Y+4, r19	; 0x04
    113a:	2b 83       	std	Y+3, r18	; 0x03
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	31 f0       	breq	.+12     	; 0x1150 <GPT_InitTimer1+0x4e>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	91 f0       	breq	.+36     	; 0x1172 <GPT_InitTimer1+0x70>
    114e:	39 c0       	rjmp	.+114    	; 0x11c2 <GPT_InitTimer1+0xc0>
		{
		/*================================================= Normal Mode ===============================================*/
		case NORMAL:
			/* DISABLE PWM for Normal mode */
			TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    1150:	ef e4       	ldi	r30, 0x4F	; 79
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	8c e0       	ldi	r24, 0x0C	; 12
    1156:	80 83       	st	Z, r24
			/* Select the prescaler for Normal mode */
			TCCR1B = (TCCR1B & 0xF8)|(Config_Ptr->GPT_Config[T1].prescaler);
    1158:	ae e4       	ldi	r26, 0x4E	; 78
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ee e4       	ldi	r30, 0x4E	; 78
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	98 2f       	mov	r25, r24
    1164:	98 7f       	andi	r25, 0xF8	; 248
    1166:	e9 81       	ldd	r30, Y+1	; 0x01
    1168:	fa 81       	ldd	r31, Y+2	; 0x02
    116a:	82 85       	ldd	r24, Z+10	; 0x0a
    116c:	89 2b       	or	r24, r25
    116e:	8c 93       	st	X, r24
    1170:	28 c0       	rjmp	.+80     	; 0x11c2 <GPT_InitTimer1+0xc0>
			 */
			TCCR1B = (1<<WGM12)| (1<<WGM13)| ((TCCR1B & 0xF8) | (Config_Ptr->GPT_Config[T1].prescaler));

#elif(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_4)
			/* Initialize OCR1A = TOP ,for CTC Mode number (4)*/
			OCR1A = Config_Ptr->GPT_Config[T1].TimerCompValue;
    1172:	aa e4       	ldi	r26, 0x4A	; 74
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e9 81       	ldd	r30, Y+1	; 0x01
    1178:	fa 81       	ldd	r31, Y+2	; 0x02
    117a:	86 85       	ldd	r24, Z+14	; 0x0e
    117c:	97 85       	ldd	r25, Z+15	; 0x0f
    117e:	11 96       	adiw	r26, 0x01	; 1
    1180:	9c 93       	st	X, r25
    1182:	8e 93       	st	-X, r24
			 * |COM1A1|COM1A0|COM1B1|COM1B0|FOC1A|FOC1B|WGM11|WGM10|
			 * -----------------------------------------------------
			 * |CTC_waveForm |  0   |  0   |  1  |  1  |  0  |  0  |
			 * -----------------------------------------------------
			 */
			TCCR1A = (1<<FOC1A)|(1<<FOC1B)|(Config_Ptr->GPT_Config[T1].CTC_waveForm<<6);
    1184:	af e4       	ldi	r26, 0x4F	; 79
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e9 81       	ldd	r30, Y+1	; 0x01
    118a:	fa 81       	ldd	r31, Y+2	; 0x02
    118c:	83 85       	ldd	r24, Z+11	; 0x0b
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	00 24       	eor	r0, r0
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	07 94       	ror	r0
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	07 94       	ror	r0
    11a0:	98 2f       	mov	r25, r24
    11a2:	80 2d       	mov	r24, r0
    11a4:	8c 60       	ori	r24, 0x0C	; 12
    11a6:	8c 93       	st	X, r24
			 * |ICNC1 | ICES1 |  -  | WGM13 | WGM12 | CS12 | CS11 | CS10|
			 * ----------------------------------------------------------
			 * |  0   |   0   |  -  |   0   |   1   |  prescaler_value  |
			 * ----------------------------------------------------------
			 */
			TCCR1B = (1<<WGM12) | ((TCCR1B & 0xF8) | (Config_Ptr->GPT_Config[T1].prescaler));
    11a8:	ae e4       	ldi	r26, 0x4E	; 78
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ee e4       	ldi	r30, 0x4E	; 78
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	98 2f       	mov	r25, r24
    11b4:	98 7f       	andi	r25, 0xF8	; 248
    11b6:	e9 81       	ldd	r30, Y+1	; 0x01
    11b8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ba:	82 85       	ldd	r24, Z+10	; 0x0a
    11bc:	89 2b       	or	r24, r25
    11be:	88 60       	ori	r24, 0x08	; 8
    11c0:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <GPT_InitTimer2>:

/*------------------------------------------ GPT_InitTimer2 ------------------------------------------------------*/
static void GPT_InitTimer2(const GPT_ConfigType* Config_Ptr)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <GPT_InitTimer2+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <GPT_InitTimer2+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	09 f4       	brne	.+2      	; 0x11ea <GPT_InitTimer2+0x1a>
    11e8:	48 c0       	rjmp	.+144    	; 0x127a <GPT_InitTimer2+0xaa>
	{
		/* Set an Initial Value for Timer0 */
		TCNT2 = Config_Ptr->GPT_Config[T2].TimerInitValue;
    11ea:	a4 e4       	ldi	r26, 0x44	; 68
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e9 81       	ldd	r30, Y+1	; 0x01
    11f0:	fa 81       	ldd	r31, Y+2	; 0x02
    11f2:	84 89       	ldd	r24, Z+20	; 0x14
    11f4:	95 89       	ldd	r25, Z+21	; 0x15
    11f6:	8c 93       	st	X, r24
		switch(Config_Ptr->GPT_Config[T2].mode)
    11f8:	e9 81       	ldd	r30, Y+1	; 0x01
    11fa:	fa 81       	ldd	r31, Y+2	; 0x02
    11fc:	81 89       	ldd	r24, Z+17	; 0x11
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3c 83       	std	Y+4, r19	; 0x04
    1204:	2b 83       	std	Y+3, r18	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	31 f0       	breq	.+12     	; 0x121a <GPT_InitTimer2+0x4a>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	79 f0       	breq	.+30     	; 0x1236 <GPT_InitTimer2+0x66>
    1218:	30 c0       	rjmp	.+96     	; 0x127a <GPT_InitTimer2+0xaa>
			 * |FOC2 | WGM20 | COM21 | COM20 | WGM21 | CS22 | CS21 | CS20|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   0   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR2 = (1<<FOC2)|((TCCR2 & 0xF8)|(Config_Ptr->GPT_Config[T2].prescaler));
    121a:	a5 e4       	ldi	r26, 0x45	; 69
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e4       	ldi	r30, 0x45	; 69
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	98 2f       	mov	r25, r24
    1226:	98 7f       	andi	r25, 0xF8	; 248
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	82 89       	ldd	r24, Z+18	; 0x12
    122e:	89 2b       	or	r24, r25
    1230:	80 68       	ori	r24, 0x80	; 128
    1232:	8c 93       	st	X, r24
    1234:	22 c0       	rjmp	.+68     	; 0x127a <GPT_InitTimer2+0xaa>
			break;
		/*=========================================== CTC Mode ========================================================*/
		case OUTPUT_COMPARE:

			/* Initialize OCR0 = TOP ,for CTC Mode */
			OCR2 = Config_Ptr->GPT_Config[T2].TimerCompValue;
    1236:	a3 e4       	ldi	r26, 0x43	; 67
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e9 81       	ldd	r30, Y+1	; 0x01
    123c:	fa 81       	ldd	r31, Y+2	; 0x02
    123e:	86 89       	ldd	r24, Z+22	; 0x16
    1240:	97 89       	ldd	r25, Z+23	; 0x17
    1242:	8c 93       	st	X, r24
			 * |FOC2 | WGM20 | COM21 | COM20 | WGM21 | CS22 | CS21 | CS20|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   1   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR2 = (1<<FOC2)|(1<<WGM21)|((TCCR2 & 0xF8)|(Config_Ptr->GPT_Config[T2].prescaler))| (0x30 & (Config_Ptr->GPT_Config[T2].CTC_waveForm <<4));
    1244:	a5 e4       	ldi	r26, 0x45	; 69
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e4       	ldi	r30, 0x45	; 69
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	98 2f       	mov	r25, r24
    1250:	98 7f       	andi	r25, 0xF8	; 248
    1252:	e9 81       	ldd	r30, Y+1	; 0x01
    1254:	fa 81       	ldd	r31, Y+2	; 0x02
    1256:	82 89       	ldd	r24, Z+18	; 0x12
    1258:	89 2b       	or	r24, r25
    125a:	28 2f       	mov	r18, r24
    125c:	28 68       	ori	r18, 0x88	; 136
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	83 89       	ldd	r24, Z+19	; 0x13
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	82 95       	swap	r24
    126a:	92 95       	swap	r25
    126c:	90 7f       	andi	r25, 0xF0	; 240
    126e:	98 27       	eor	r25, r24
    1270:	80 7f       	andi	r24, 0xF0	; 240
    1272:	98 27       	eor	r25, r24
    1274:	80 73       	andi	r24, 0x30	; 48
    1276:	82 2b       	or	r24, r18
    1278:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing..*/
	}
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <GPT_enableNotification>:
/*******************************************************************************
 * 						GPT Enable/Disable Notification Functions
 *******************************************************************************/
void GPT_enableNotification(TimerType Tx,GPT_ModeType mode)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	2a 97       	sbiw	r28, 0x0a	; 10
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <GPT_enableNotification+0x20>
    12a6:	59 c0       	rjmp	.+178    	; 0x135a <GPT_enableNotification+0xd2>
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	88 23       	and	r24, r24
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <GPT_enableNotification+0x2e>
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <GPT_enableNotification+0x2e>
    12b4:	52 c0       	rjmp	.+164    	; 0x135a <GPT_enableNotification+0xd2>
	{
		switch(Tx)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	3a 87       	std	Y+10, r19	; 0x0a
    12be:	29 87       	std	Y+9, r18	; 0x09
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	91 05       	cpc	r25, r1
    12c8:	f9 f0       	breq	.+62     	; 0x1308 <GPT_enableNotification+0x80>
    12ca:	29 85       	ldd	r18, Y+9	; 0x09
    12cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	79 f1       	breq	.+94     	; 0x1332 <GPT_enableNotification+0xaa>
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	09 f0       	breq	.+2      	; 0x12de <GPT_enableNotification+0x56>
    12dc:	3e c0       	rjmp	.+124    	; 0x135a <GPT_enableNotification+0xd2>
		{
		case T0:
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE0):SET_BIT(TIMSK,OCIE0);
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	88 23       	and	r24, r24
    12e2:	49 f4       	brne	.+18     	; 0x12f6 <GPT_enableNotification+0x6e>
    12e4:	a9 e5       	ldi	r26, 0x59	; 89
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e9 e5       	ldi	r30, 0x59	; 89
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	81 60       	ori	r24, 0x01	; 1
    12f0:	8c 93       	st	X, r24
    12f2:	9c 91       	ld	r25, X
    12f4:	32 c0       	rjmp	.+100    	; 0x135a <GPT_enableNotification+0xd2>
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	82 60       	ori	r24, 0x02	; 2
    1302:	8c 93       	st	X, r24
    1304:	2c 91       	ld	r18, X
    1306:	29 c0       	rjmp	.+82     	; 0x135a <GPT_enableNotification+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE1):SET_BIT(TIMSK,TICIE1);

#else
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE1):SET_BIT(TIMSK,OCIE1A);
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	88 23       	and	r24, r24
    130c:	49 f4       	brne	.+18     	; 0x1320 <GPT_enableNotification+0x98>
    130e:	a9 e5       	ldi	r26, 0x59	; 89
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e9 e5       	ldi	r30, 0x59	; 89
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	84 60       	ori	r24, 0x04	; 4
    131a:	8c 93       	st	X, r24
    131c:	3c 91       	ld	r19, X
    131e:	1d c0       	rjmp	.+58     	; 0x135a <GPT_enableNotification+0xd2>
    1320:	a9 e5       	ldi	r26, 0x59	; 89
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e9 e5       	ldi	r30, 0x59	; 89
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	80 61       	ori	r24, 0x10	; 16
    132c:	8c 93       	st	X, r24
    132e:	8c 91       	ld	r24, X
    1330:	14 c0       	rjmp	.+40     	; 0x135a <GPT_enableNotification+0xd2>

#endif
			break;
		case T2:
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE2):SET_BIT(TIMSK,OCIE2);
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	88 23       	and	r24, r24
    1336:	49 f4       	brne	.+18     	; 0x134a <GPT_enableNotification+0xc2>
    1338:	a9 e5       	ldi	r26, 0x59	; 89
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e9 e5       	ldi	r30, 0x59	; 89
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	80 64       	ori	r24, 0x40	; 64
    1344:	8c 93       	st	X, r24
    1346:	9c 91       	ld	r25, X
    1348:	08 c0       	rjmp	.+16     	; 0x135a <GPT_enableNotification+0xd2>
    134a:	a9 e5       	ldi	r26, 0x59	; 89
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e9 e5       	ldi	r30, 0x59	; 89
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	8c 93       	st	X, r24
    1358:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
    135a:	2a 96       	adiw	r28, 0x0a	; 10
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <GPT_disableNotification>:
/*------------------------------------------ GPT_disableNotification -------------------------------------------*/
void GPT_disableNotification(TimerType Tx,GPT_ModeType mode)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	2a 97       	sbiw	r28, 0x0a	; 10
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	08 f0       	brcs	.+2      	; 0x138c <GPT_disableNotification+0x20>
    138a:	59 c0       	rjmp	.+178    	; 0x143e <GPT_disableNotification+0xd2>
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	88 23       	and	r24, r24
    1390:	21 f0       	breq	.+8      	; 0x139a <GPT_disableNotification+0x2e>
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	09 f0       	breq	.+2      	; 0x139a <GPT_disableNotification+0x2e>
    1398:	52 c0       	rjmp	.+164    	; 0x143e <GPT_disableNotification+0xd2>
	{
		switch(Tx)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3a 87       	std	Y+10, r19	; 0x0a
    13a2:	29 87       	std	Y+9, r18	; 0x09
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	f9 f0       	breq	.+62     	; 0x13ec <GPT_disableNotification+0x80>
    13ae:	29 85       	ldd	r18, Y+9	; 0x09
    13b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	79 f1       	breq	.+94     	; 0x1416 <GPT_disableNotification+0xaa>
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	09 f0       	breq	.+2      	; 0x13c2 <GPT_disableNotification+0x56>
    13c0:	3e c0       	rjmp	.+124    	; 0x143e <GPT_disableNotification+0xd2>
		{
		case T0:
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE0):CLEAR_BIT(TIMSK,OCIE0);
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	88 23       	and	r24, r24
    13c6:	49 f4       	brne	.+18     	; 0x13da <GPT_disableNotification+0x6e>
    13c8:	a9 e5       	ldi	r26, 0x59	; 89
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e9 e5       	ldi	r30, 0x59	; 89
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	8c 93       	st	X, r24
    13d6:	9c 91       	ld	r25, X
    13d8:	32 c0       	rjmp	.+100    	; 0x143e <GPT_disableNotification+0xd2>
    13da:	a9 e5       	ldi	r26, 0x59	; 89
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e9 e5       	ldi	r30, 0x59	; 89
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8d 7f       	andi	r24, 0xFD	; 253
    13e6:	8c 93       	st	X, r24
    13e8:	2c 91       	ld	r18, X
    13ea:	29 c0       	rjmp	.+82     	; 0x143e <GPT_disableNotification+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE1):CLEAR_BIT(TIMSK,TICIE1);
			break;
#else
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE1):CLEAR_BIT(TIMSK,OCIE1A);
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	88 23       	and	r24, r24
    13f0:	49 f4       	brne	.+18     	; 0x1404 <GPT_disableNotification+0x98>
    13f2:	a9 e5       	ldi	r26, 0x59	; 89
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e9 e5       	ldi	r30, 0x59	; 89
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24
    1400:	3c 91       	ld	r19, X
    1402:	1d c0       	rjmp	.+58     	; 0x143e <GPT_disableNotification+0xd2>
    1404:	a9 e5       	ldi	r26, 0x59	; 89
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e9 e5       	ldi	r30, 0x59	; 89
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	8f 7e       	andi	r24, 0xEF	; 239
    1410:	8c 93       	st	X, r24
    1412:	8c 91       	ld	r24, X
    1414:	14 c0       	rjmp	.+40     	; 0x143e <GPT_disableNotification+0xd2>
			break;
#endif
		case T2:
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE2):CLEAR_BIT(TIMSK,OCIE2);
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	88 23       	and	r24, r24
    141a:	49 f4       	brne	.+18     	; 0x142e <GPT_disableNotification+0xc2>
    141c:	a9 e5       	ldi	r26, 0x59	; 89
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e9 e5       	ldi	r30, 0x59	; 89
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	8c 93       	st	X, r24
    142a:	9c 91       	ld	r25, X
    142c:	08 c0       	rjmp	.+16     	; 0x143e <GPT_disableNotification+0xd2>
    142e:	a9 e5       	ldi	r26, 0x59	; 89
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e9 e5       	ldi	r30, 0x59	; 89
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 77       	andi	r24, 0x7F	; 127
    143a:	8c 93       	st	X, r24
    143c:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
    143e:	2a 96       	adiw	r28, 0x0a	; 10
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GPT_T1_setCallBack>:
}
#endif
/*--------------------------------------------------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
void GPT_T1_setCallBack(void (*a_Fun_Ptr)(void))
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPT_T1_setCallBack+0x6>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBack_Ptr = a_Fun_Ptr;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	90 93 97 00 	sts	0x0097, r25
    1466:	80 93 96 00 	sts	0x0096, r24
}
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <__vector_8>:
}
#endif
/*-------------------------- TIMER1 ISR -------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
ISR(TIMER1_OVF_vect)
{
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	0f 92       	push	r0
    147c:	11 24       	eor	r1, r1
    147e:	2f 93       	push	r18
    1480:	3f 93       	push	r19
    1482:	4f 93       	push	r20
    1484:	5f 93       	push	r21
    1486:	6f 93       	push	r22
    1488:	7f 93       	push	r23
    148a:	8f 93       	push	r24
    148c:	9f 93       	push	r25
    148e:	af 93       	push	r26
    1490:	bf 93       	push	r27
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    149e:	80 91 96 00 	lds	r24, 0x0096
    14a2:	90 91 97 00 	lds	r25, 0x0097
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <__vector_8+0x40>
		(*g_Timer1_callBack_Ptr)();
    14aa:	e0 91 96 00 	lds	r30, 0x0096
    14ae:	f0 91 97 00 	lds	r31, 0x0097
    14b2:	09 95       	icall
}
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	2f 93       	push	r18
    14e6:	3f 93       	push	r19
    14e8:	4f 93       	push	r20
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    1504:	80 91 96 00 	lds	r24, 0x0096
    1508:	90 91 97 00 	lds	r25, 0x0097
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	29 f0       	breq	.+10     	; 0x151a <__vector_6+0x40>
		(*g_Timer1_callBack_Ptr)();
    1510:	e0 91 96 00 	lds	r30, 0x0096
    1514:	f0 91 97 00 	lds	r31, 0x0097
    1518:	09 95       	icall
}
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	ff 91       	pop	r31
    1520:	ef 91       	pop	r30
    1522:	bf 91       	pop	r27
    1524:	af 91       	pop	r26
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	7f 91       	pop	r23
    152c:	6f 91       	pop	r22
    152e:	5f 91       	pop	r21
    1530:	4f 91       	pop	r20
    1532:	3f 91       	pop	r19
    1534:	2f 91       	pop	r18
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	0f 92       	push	r0
    1548:	11 24       	eor	r1, r1
    154a:	2f 93       	push	r18
    154c:	3f 93       	push	r19
    154e:	4f 93       	push	r20
    1550:	5f 93       	push	r21
    1552:	6f 93       	push	r22
    1554:	7f 93       	push	r23
    1556:	8f 93       	push	r24
    1558:	9f 93       	push	r25
    155a:	af 93       	push	r26
    155c:	bf 93       	push	r27
    155e:	ef 93       	push	r30
    1560:	ff 93       	push	r31
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    156a:	80 91 96 00 	lds	r24, 0x0096
    156e:	90 91 97 00 	lds	r25, 0x0097
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	29 f0       	breq	.+10     	; 0x1580 <__vector_7+0x40>
		(*g_Timer1_callBack_Ptr)();
    1576:	e0 91 96 00 	lds	r30, 0x0096
    157a:	f0 91 97 00 	lds	r31, 0x0097
    157e:	09 95       	icall
}
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	0f 90       	pop	r0
    15a2:	1f 90       	pop	r1
    15a4:	18 95       	reti

000015a6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 ----------------------------------------------------------------------------------------------*/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num, GPIO_PinDirectionType direction)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	00 d0       	rcall	.+0      	; 0x15ac <GPIO_setupPinDirection+0x6>
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <GPIO_setupPinDirection+0x8>
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	6a 83       	std	Y+2, r22	; 0x02
    15b8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <GPIO_setupPinDirection+0x1c>
    15c0:	d5 c0       	rjmp	.+426    	; 0x176c <GPIO_setupPinDirection+0x1c6>
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <GPIO_setupPinDirection+0x24>
    15c8:	d1 c0       	rjmp	.+418    	; 0x176c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	3d 83       	std	Y+5, r19	; 0x05
    15d2:	2c 83       	std	Y+4, r18	; 0x04
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <GPIO_setupPinDirection+0x3a>
    15de:	43 c0       	rjmp	.+134    	; 0x1666 <GPIO_setupPinDirection+0xc0>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <GPIO_setupPinDirection+0x4e>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	71 f0       	breq	.+28     	; 0x160e <GPIO_setupPinDirection+0x68>
    15f2:	bc c0       	rjmp	.+376    	; 0x176c <GPIO_setupPinDirection+0x1c6>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	09 f4       	brne	.+2      	; 0x1600 <GPIO_setupPinDirection+0x5a>
    15fe:	5f c0       	rjmp	.+190    	; 0x16be <GPIO_setupPinDirection+0x118>
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	91 05       	cpc	r25, r1
    1608:	09 f4       	brne	.+2      	; 0x160c <GPIO_setupPinDirection+0x66>
    160a:	85 c0       	rjmp	.+266    	; 0x1716 <GPIO_setupPinDirection+0x170>
    160c:	af c0       	rjmp	.+350    	; 0x176c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	a1 f4       	brne	.+40     	; 0x163c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1614:	aa e3       	ldi	r26, 0x3A	; 58
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	ea e3       	ldi	r30, 0x3A	; 58
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <GPIO_setupPinDirection+0x8c>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <GPIO_setupPinDirection+0x88>
    1636:	84 2b       	or	r24, r20
    1638:	8c 93       	st	X, r24
    163a:	98 c0       	rjmp	.+304    	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    163c:	aa e3       	ldi	r26, 0x3A	; 58
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ea e3       	ldi	r30, 0x3A	; 58
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	02 2e       	mov	r0, r18
    1654:	02 c0       	rjmp	.+4      	; 0x165a <GPIO_setupPinDirection+0xb4>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	0a 94       	dec	r0
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <GPIO_setupPinDirection+0xb0>
    165e:	80 95       	com	r24
    1660:	84 23       	and	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	83 c0       	rjmp	.+262    	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	a1 f4       	brne	.+40     	; 0x1694 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    166c:	a7 e3       	ldi	r26, 0x37	; 55
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e7 e3       	ldi	r30, 0x37	; 55
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	48 2f       	mov	r20, r24
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 2e       	mov	r0, r18
    1684:	02 c0       	rjmp	.+4      	; 0x168a <GPIO_setupPinDirection+0xe4>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	0a 94       	dec	r0
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <GPIO_setupPinDirection+0xe0>
    168e:	84 2b       	or	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	6c c0       	rjmp	.+216    	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1694:	a7 e3       	ldi	r26, 0x37	; 55
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e7 e3       	ldi	r30, 0x37	; 55
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <GPIO_setupPinDirection+0x10c>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <GPIO_setupPinDirection+0x108>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	57 c0       	rjmp	.+174    	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	a1 f4       	brne	.+40     	; 0x16ec <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16c4:	a4 e3       	ldi	r26, 0x34	; 52
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e4 e3       	ldi	r30, 0x34	; 52
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_setupPinDirection+0x13c>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_setupPinDirection+0x138>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	40 c0       	rjmp	.+128    	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16ec:	a4 e3       	ldi	r26, 0x34	; 52
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e4 e3       	ldi	r30, 0x34	; 52
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_setupPinDirection+0x164>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_setupPinDirection+0x160>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	2b c0       	rjmp	.+86     	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	a1 f4       	brne	.+40     	; 0x1744 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    171c:	a1 e3       	ldi	r26, 0x31	; 49
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e1 e3       	ldi	r30, 0x31	; 49
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_setupPinDirection+0x194>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_setupPinDirection+0x190>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	14 c0       	rjmp	.+40     	; 0x176c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1744:	a1 e3       	ldi	r26, 0x31	; 49
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e1 e3       	ldi	r30, 0x31	; 49
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_setupPinDirection+0x1bc>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_setupPinDirection+0x1b8>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 ----------------------------------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num,uint8 pin_num, uint8 value)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <GPIO_writePin+0x6>
    1782:	00 d0       	rcall	.+0      	; 0x1784 <GPIO_writePin+0x8>
    1784:	0f 92       	push	r0
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	6a 83       	std	Y+2, r22	; 0x02
    178e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num  >= NUM_OF_PORTS))
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	88 30       	cpi	r24, 0x08	; 8
    1794:	08 f0       	brcs	.+2      	; 0x1798 <GPIO_writePin+0x1c>
    1796:	d5 c0       	rjmp	.+426    	; 0x1942 <GPIO_writePin+0x1c6>
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <GPIO_writePin+0x24>
    179e:	d1 c0       	rjmp	.+418    	; 0x1942 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <GPIO_writePin+0x3a>
    17b4:	43 c0       	rjmp	.+134    	; 0x183c <GPIO_writePin+0xc0>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	2c f4       	brge	.+10     	; 0x17ca <GPIO_writePin+0x4e>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <GPIO_writePin+0x68>
    17c8:	bc c0       	rjmp	.+376    	; 0x1942 <GPIO_writePin+0x1c6>
    17ca:	2c 81       	ldd	r18, Y+4	; 0x04
    17cc:	3d 81       	ldd	r19, Y+5	; 0x05
    17ce:	22 30       	cpi	r18, 0x02	; 2
    17d0:	31 05       	cpc	r19, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <GPIO_writePin+0x5a>
    17d4:	5f c0       	rjmp	.+190    	; 0x1894 <GPIO_writePin+0x118>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <GPIO_writePin+0x66>
    17e0:	85 c0       	rjmp	.+266    	; 0x18ec <GPIO_writePin+0x170>
    17e2:	af c0       	rjmp	.+350    	; 0x1942 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	a1 f4       	brne	.+40     	; 0x1812 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17ea:	ab e3       	ldi	r26, 0x3B	; 59
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb e3       	ldi	r30, 0x3B	; 59
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <GPIO_writePin+0x8c>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <GPIO_writePin+0x88>
    180c:	84 2b       	or	r24, r20
    180e:	8c 93       	st	X, r24
    1810:	98 c0       	rjmp	.+304    	; 0x1942 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1812:	ab e3       	ldi	r26, 0x3B	; 59
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	eb e3       	ldi	r30, 0x3B	; 59
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <GPIO_writePin+0xb4>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <GPIO_writePin+0xb0>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
    183a:	83 c0       	rjmp	.+262    	; 0x1942 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	a1 f4       	brne	.+40     	; 0x186a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1842:	a8 e3       	ldi	r26, 0x38	; 56
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e8 e3       	ldi	r30, 0x38	; 56
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <GPIO_writePin+0xe4>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <GPIO_writePin+0xe0>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	6c c0       	rjmp	.+216    	; 0x1942 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    186a:	a8 e3       	ldi	r26, 0x38	; 56
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e8 e3       	ldi	r30, 0x38	; 56
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <GPIO_writePin+0x10c>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <GPIO_writePin+0x108>
    188c:	80 95       	com	r24
    188e:	84 23       	and	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	57 c0       	rjmp	.+174    	; 0x1942 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	a1 f4       	brne	.+40     	; 0x18c2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    189a:	a5 e3       	ldi	r26, 0x35	; 53
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e5 e3       	ldi	r30, 0x35	; 53
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <GPIO_writePin+0x13c>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <GPIO_writePin+0x138>
    18bc:	84 2b       	or	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	40 c0       	rjmp	.+128    	; 0x1942 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18c2:	a5 e3       	ldi	r26, 0x35	; 53
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e5 e3       	ldi	r30, 0x35	; 53
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <GPIO_writePin+0x164>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <GPIO_writePin+0x160>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	2b c0       	rjmp	.+86     	; 0x1942 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	a1 f4       	brne	.+40     	; 0x191a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18f2:	a2 e3       	ldi	r26, 0x32	; 50
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_writePin+0x194>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_writePin+0x190>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    191a:	a2 e3       	ldi	r26, 0x32	; 50
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e2 e3       	ldi	r30, 0x32	; 50
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <GPIO_writePin+0x1bc>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <GPIO_writePin+0x1b8>
    193c:	80 95       	com	r24
    193e:	84 23       	and	r24, r20
    1940:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 ----------------------------------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	00 d0       	rcall	.+0      	; 0x1958 <GPIO_readPin+0x6>
    1958:	00 d0       	rcall	.+0      	; 0x195a <GPIO_readPin+0x8>
    195a:	0f 92       	push	r0
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	8a 83       	std	Y+2, r24	; 0x02
    1962:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pin_value = LOGIC_LOW;
    1964:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	88 30       	cpi	r24, 0x08	; 8
    196a:	08 f0       	brcs	.+2      	; 0x196e <GPIO_readPin+0x1c>
    196c:	84 c0       	rjmp	.+264    	; 0x1a76 <GPIO_readPin+0x124>
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	84 30       	cpi	r24, 0x04	; 4
    1972:	08 f0       	brcs	.+2      	; 0x1976 <GPIO_readPin+0x24>
    1974:	80 c0       	rjmp	.+256    	; 0x1a76 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	3d 83       	std	Y+5, r19	; 0x05
    197e:	2c 83       	std	Y+4, r18	; 0x04
    1980:	4c 81       	ldd	r20, Y+4	; 0x04
    1982:	5d 81       	ldd	r21, Y+5	; 0x05
    1984:	41 30       	cpi	r20, 0x01	; 1
    1986:	51 05       	cpc	r21, r1
    1988:	79 f1       	breq	.+94     	; 0x19e8 <GPIO_readPin+0x96>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	91 05       	cpc	r25, r1
    1992:	34 f4       	brge	.+12     	; 0x19a0 <GPIO_readPin+0x4e>
    1994:	2c 81       	ldd	r18, Y+4	; 0x04
    1996:	3d 81       	ldd	r19, Y+5	; 0x05
    1998:	21 15       	cp	r18, r1
    199a:	31 05       	cpc	r19, r1
    199c:	69 f0       	breq	.+26     	; 0x19b8 <GPIO_readPin+0x66>
    199e:	6b c0       	rjmp	.+214    	; 0x1a76 <GPIO_readPin+0x124>
    19a0:	4c 81       	ldd	r20, Y+4	; 0x04
    19a2:	5d 81       	ldd	r21, Y+5	; 0x05
    19a4:	42 30       	cpi	r20, 0x02	; 2
    19a6:	51 05       	cpc	r21, r1
    19a8:	b9 f1       	breq	.+110    	; 0x1a18 <GPIO_readPin+0xc6>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	91 05       	cpc	r25, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <GPIO_readPin+0x64>
    19b4:	49 c0       	rjmp	.+146    	; 0x1a48 <GPIO_readPin+0xf6>
    19b6:	5f c0       	rjmp	.+190    	; 0x1a76 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19b8:	e9 e3       	ldi	r30, 0x39	; 57
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	88 2f       	mov	r24, r24
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a9 01       	movw	r20, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_readPin+0x7e>
    19cc:	55 95       	asr	r21
    19ce:	47 95       	ror	r20
    19d0:	8a 95       	dec	r24
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_readPin+0x7a>
    19d4:	ca 01       	movw	r24, r20
    19d6:	81 70       	andi	r24, 0x01	; 1
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	88 23       	and	r24, r24
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <GPIO_readPin+0x92>
			{
				a_pin_value = LOGIC_HIGH;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	49 c0       	rjmp	.+146    	; 0x1a76 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    19e4:	19 82       	std	Y+1, r1	; 0x01
    19e6:	47 c0       	rjmp	.+142    	; 0x1a76 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19e8:	e6 e3       	ldi	r30, 0x36	; 54
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	a9 01       	movw	r20, r18
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <GPIO_readPin+0xae>
    19fc:	55 95       	asr	r21
    19fe:	47 95       	ror	r20
    1a00:	8a 95       	dec	r24
    1a02:	e2 f7       	brpl	.-8      	; 0x19fc <GPIO_readPin+0xaa>
    1a04:	ca 01       	movw	r24, r20
    1a06:	81 70       	andi	r24, 0x01	; 1
    1a08:	90 70       	andi	r25, 0x00	; 0
    1a0a:	88 23       	and	r24, r24
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <GPIO_readPin+0xc2>
			{
				a_pin_value = LOGIC_HIGH;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	31 c0       	rjmp	.+98     	; 0x1a76 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	2f c0       	rjmp	.+94     	; 0x1a76 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a18:	e3 e3       	ldi	r30, 0x33	; 51
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_readPin+0xde>
    1a2c:	55 95       	asr	r21
    1a2e:	47 95       	ror	r20
    1a30:	8a 95       	dec	r24
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_readPin+0xda>
    1a34:	ca 01       	movw	r24, r20
    1a36:	81 70       	andi	r24, 0x01	; 1
    1a38:	90 70       	andi	r25, 0x00	; 0
    1a3a:	88 23       	and	r24, r24
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <GPIO_readPin+0xf2>
			{
				a_pin_value = LOGIC_HIGH;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	19 c0       	rjmp	.+50     	; 0x1a76 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1a44:	19 82       	std	Y+1, r1	; 0x01
    1a46:	17 c0       	rjmp	.+46     	; 0x1a76 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a48:	e0 e3       	ldi	r30, 0x30	; 48
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	a9 01       	movw	r20, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_readPin+0x10e>
    1a5c:	55 95       	asr	r21
    1a5e:	47 95       	ror	r20
    1a60:	8a 95       	dec	r24
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_readPin+0x10a>
    1a64:	ca 01       	movw	r24, r20
    1a66:	81 70       	andi	r24, 0x01	; 1
    1a68:	90 70       	andi	r25, 0x00	; 0
    1a6a:	88 23       	and	r24, r24
    1a6c:	19 f0       	breq	.+6      	; 0x1a74 <GPIO_readPin+0x122>
			{
				a_pin_value = LOGIC_HIGH;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1a74:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return a_pin_value;
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
------------------------------------------------------------------------------------------------ */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <GPIO_setupPortDirection+0x6>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <GPIO_setupPortDirection+0x8>
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	84 30       	cpi	r24, 0x04	; 4
    1a9c:	90 f5       	brcc	.+100    	; 0x1b02 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3c 83       	std	Y+4, r19	; 0x04
    1aa6:	2b 83       	std	Y+3, r18	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	91 05       	cpc	r25, r1
    1ab0:	d1 f0       	breq	.+52     	; 0x1ae6 <GPIO_setupPortDirection+0x5e>
    1ab2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab6:	22 30       	cpi	r18, 0x02	; 2
    1ab8:	31 05       	cpc	r19, r1
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <GPIO_setupPortDirection+0x3e>
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	61 f0       	breq	.+24     	; 0x1adc <GPIO_setupPortDirection+0x54>
    1ac4:	1e c0       	rjmp	.+60     	; 0x1b02 <GPIO_setupPortDirection+0x7a>
    1ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aca:	22 30       	cpi	r18, 0x02	; 2
    1acc:	31 05       	cpc	r19, r1
    1ace:	81 f0       	breq	.+32     	; 0x1af0 <GPIO_setupPortDirection+0x68>
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	83 30       	cpi	r24, 0x03	; 3
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	81 f0       	breq	.+32     	; 0x1afa <GPIO_setupPortDirection+0x72>
    1ada:	13 c0       	rjmp	.+38     	; 0x1b02 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1adc:	ea e3       	ldi	r30, 0x3A	; 58
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
    1ae4:	0e c0       	rjmp	.+28     	; 0x1b02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ae6:	e7 e3       	ldi	r30, 0x37	; 55
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	80 83       	st	Z, r24
    1aee:	09 c0       	rjmp	.+18     	; 0x1b02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1af0:	e4 e3       	ldi	r30, 0x34	; 52
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	80 83       	st	Z, r24
    1af8:	04 c0       	rjmp	.+8      	; 0x1b02 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1afa:	e1 e3       	ldi	r30, 0x31	; 49
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 --------------------------------------------------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <GPIO_writePort+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_writePort+0x8>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	84 30       	cpi	r24, 0x04	; 4
    1b24:	90 f5       	brcc	.+100    	; 0x1b8a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3c 83       	std	Y+4, r19	; 0x04
    1b2e:	2b 83       	std	Y+3, r18	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	91 05       	cpc	r25, r1
    1b38:	d1 f0       	breq	.+52     	; 0x1b6e <GPIO_writePort+0x5e>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <GPIO_writePort+0x3e>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	61 f0       	breq	.+24     	; 0x1b64 <GPIO_writePort+0x54>
    1b4c:	1e c0       	rjmp	.+60     	; 0x1b8a <GPIO_writePort+0x7a>
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	81 f0       	breq	.+32     	; 0x1b78 <GPIO_writePort+0x68>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	91 05       	cpc	r25, r1
    1b60:	81 f0       	breq	.+32     	; 0x1b82 <GPIO_writePort+0x72>
    1b62:	13 c0       	rjmp	.+38     	; 0x1b8a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b64:	eb e3       	ldi	r30, 0x3B	; 59
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	80 83       	st	Z, r24
    1b6c:	0e c0       	rjmp	.+28     	; 0x1b8a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b6e:	e8 e3       	ldi	r30, 0x38	; 56
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	80 83       	st	Z, r24
    1b76:	09 c0       	rjmp	.+18     	; 0x1b8a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b78:	e5 e3       	ldi	r30, 0x35	; 53
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	80 83       	st	Z, r24
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b82:	e2 e3       	ldi	r30, 0x32	; 50
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 --------------------------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <GPIO_readPort+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <GPIO_readPort+0x8>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_value = LOGIC_LOW;
    1ba6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	84 30       	cpi	r24, 0x04	; 4
    1bac:	90 f5       	brcc	.+100    	; 0x1c12 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port a_value as required */
		switch(port_num)
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3c 83       	std	Y+4, r19	; 0x04
    1bb6:	2b 83       	std	Y+3, r18	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	d1 f0       	breq	.+52     	; 0x1bf6 <GPIO_readPort+0x5e>
    1bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <GPIO_readPort+0x3e>
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <GPIO_readPort+0x54>
    1bd4:	1e c0       	rjmp	.+60     	; 0x1c12 <GPIO_readPort+0x7a>
    1bd6:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	81 f0       	breq	.+32     	; 0x1c00 <GPIO_readPort+0x68>
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	81 f0       	breq	.+32     	; 0x1c0a <GPIO_readPort+0x72>
    1bea:	13 c0       	rjmp	.+38     	; 0x1c12 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_value = PINA;
    1bec:	e9 e3       	ldi	r30, 0x39	; 57
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	0e c0       	rjmp	.+28     	; 0x1c12 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_value = PINB;
    1bf6:	e6 e3       	ldi	r30, 0x36	; 54
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	09 c0       	rjmp	.+18     	; 0x1c12 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_value = PINC;
    1c00:	e3 e3       	ldi	r30, 0x33	; 51
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_value = PIND;
    1c0a:	e0 e3       	ldi	r30, 0x30	; 48
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_value;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <EEPROM_Init>:
 ----------------------------------------------------------------------------------*/
#include "../../MCAL/TWI/twi.h"
#include "eeprom.h"

void EEPROM_Init(void)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <EEPROM_Init+0x6>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the TWI/I2C Driver */
	TWI_configType config_Ptr;
	config_Ptr.bitRate = _400KB_BIT_RATE;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	config_Ptr.deviceAddress = 0x01;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&config_Ptr);
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	0e 94 32 06 	call	0xc64	; 0xc64 <TWI_init>
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <EEPROM_writeByte+0x6>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <EEPROM_writeByte+0x8>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c58:	0e 94 51 06 	call	0xca2	; 0xca2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c5c:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1c60:	88 30       	cpi	r24, 0x08	; 8
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <EEPROM_writeByte+0x22>
        return ERROR;
    1c64:	1c 82       	std	Y+4, r1	; 0x04
    1c66:	28 c0       	rjmp	.+80     	; 0x1cb8 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	80 70       	andi	r24, 0x00	; 0
    1c6e:	97 70       	andi	r25, 0x07	; 7
    1c70:	88 0f       	add	r24, r24
    1c72:	89 2f       	mov	r24, r25
    1c74:	88 1f       	adc	r24, r24
    1c76:	99 0b       	sbc	r25, r25
    1c78:	91 95       	neg	r25
    1c7a:	80 6a       	ori	r24, 0xA0	; 160
    1c7c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c80:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1c84:	88 31       	cpi	r24, 0x18	; 24
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <EEPROM_writeByte+0x46>
        return ERROR;
    1c88:	1c 82       	std	Y+4, r1	; 0x04
    1c8a:	16 c0       	rjmp	.+44     	; 0x1cb8 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c92:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1c96:	88 32       	cpi	r24, 0x28	; 40
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <EEPROM_writeByte+0x58>
        return ERROR;
    1c9a:	1c 82       	std	Y+4, r1	; 0x04
    1c9c:	0d c0       	rjmp	.+26     	; 0x1cb8 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ca4:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1ca8:	88 32       	cpi	r24, 0x28	; 40
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <EEPROM_writeByte+0x6a>
        return ERROR;
    1cac:	1c 82       	std	Y+4, r1	; 0x04
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1cb0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TWI_stop>

    return SUCCESS;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	8c 83       	std	Y+4, r24	; 0x04
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <EEPROM_readByte+0x6>
    1cce:	00 d0       	rcall	.+0      	; 0x1cd0 <EEPROM_readByte+0x8>
    1cd0:	0f 92       	push	r0
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	7c 83       	std	Y+4, r23	; 0x04
    1cdc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1cde:	0e 94 51 06 	call	0xca2	; 0xca2 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ce2:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1ce6:	88 30       	cpi	r24, 0x08	; 8
    1ce8:	11 f0       	breq	.+4      	; 0x1cee <EEPROM_readByte+0x26>
        return ERROR;
    1cea:	1d 82       	std	Y+5, r1	; 0x05
    1cec:	44 c0       	rjmp	.+136    	; 0x1d76 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf2:	80 70       	andi	r24, 0x00	; 0
    1cf4:	97 70       	andi	r25, 0x07	; 7
    1cf6:	88 0f       	add	r24, r24
    1cf8:	89 2f       	mov	r24, r25
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	99 0b       	sbc	r25, r25
    1cfe:	91 95       	neg	r25
    1d00:	80 6a       	ori	r24, 0xA0	; 160
    1d02:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d06:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1d0a:	88 31       	cpi	r24, 0x18	; 24
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <EEPROM_readByte+0x4a>
        return ERROR;
    1d0e:	1d 82       	std	Y+5, r1	; 0x05
    1d10:	32 c0       	rjmp	.+100    	; 0x1d76 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d18:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1d1c:	88 32       	cpi	r24, 0x28	; 40
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <EEPROM_readByte+0x5c>
        return ERROR;
    1d20:	1d 82       	std	Y+5, r1	; 0x05
    1d22:	29 c0       	rjmp	.+82     	; 0x1d76 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1d24:	0e 94 51 06 	call	0xca2	; 0xca2 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1d28:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1d2c:	80 31       	cpi	r24, 0x10	; 16
    1d2e:	11 f0       	breq	.+4      	; 0x1d34 <EEPROM_readByte+0x6c>
        return ERROR;
    1d30:	1d 82       	std	Y+5, r1	; 0x05
    1d32:	21 c0       	rjmp	.+66     	; 0x1d76 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	80 70       	andi	r24, 0x00	; 0
    1d3a:	97 70       	andi	r25, 0x07	; 7
    1d3c:	88 0f       	add	r24, r24
    1d3e:	89 2f       	mov	r24, r25
    1d40:	88 1f       	adc	r24, r24
    1d42:	99 0b       	sbc	r25, r25
    1d44:	91 95       	neg	r25
    1d46:	81 6a       	ori	r24, 0xA1	; 161
    1d48:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1d4c:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1d50:	80 34       	cpi	r24, 0x40	; 64
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <EEPROM_readByte+0x90>
        return ERROR;
    1d54:	1d 82       	std	Y+5, r1	; 0x05
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1d58:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_readByteWithNACK>
    1d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d60:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1d62:	0e 94 a9 06 	call	0xd52	; 0xd52 <TWI_getStatus>
    1d66:	88 35       	cpi	r24, 0x58	; 88
    1d68:	11 f0       	breq	.+4      	; 0x1d6e <EEPROM_readByte+0xa6>
        return ERROR;
    1d6a:	1d 82       	std	Y+5, r1	; 0x05
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1d6e:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TWI_stop>

    return SUCCESS;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <MOTOR_Init>:

/*********************************************************************
 * 						 Functions' Prototypes
 *********************************************************************/
void MOTOR_Init(const MOTOR_ConfigType *Config_Ptr)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <MOTOR_Init+0x6>
    1d8e:	0f 92       	push	r0
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9b 83       	std	Y+3, r25	; 0x03
    1d96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 motorId;
	for(motorId=0; motorId < NUM_OF_MOTORS; motorId++)
    1d98:	19 82       	std	Y+1, r1	; 0x01
    1d9a:	51 c0       	rjmp	.+162    	; 0x1e3e <MOTOR_Init+0xb6>
	{
#if(MOTOR_DIRECTION == MOTOR_BOTH_DIRECTIONS)
		GPIO_setupPinDirection(Config_Ptr->M_Config[motorId].Motor_CW_port,
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a 81       	ldd	r20, Y+2	; 0x02
    1da4:	5b 81       	ldd	r21, Y+3	; 0x03
    1da6:	c9 01       	movw	r24, r18
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	82 0f       	add	r24, r18
    1db2:	93 1f       	adc	r25, r19
    1db4:	84 0f       	add	r24, r20
    1db6:	95 1f       	adc	r25, r21
    1db8:	fc 01       	movw	r30, r24
    1dba:	31 96       	adiw	r30, 0x01	; 1
    1dbc:	60 81       	ld	r22, Z
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a 81       	ldd	r20, Y+2	; 0x02
    1dc6:	5b 81       	ldd	r21, Y+3	; 0x03
    1dc8:	c9 01       	movw	r24, r18
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	84 0f       	add	r24, r20
    1dd8:	95 1f       	adc	r25, r21
    1dda:	fc 01       	movw	r30, r24
    1ddc:	32 96       	adiw	r30, 0x02	; 2
    1dde:	90 81       	ld	r25, Z
    1de0:	86 2f       	mov	r24, r22
    1de2:	69 2f       	mov	r22, r25
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <GPIO_setupPinDirection>
				Config_Ptr->M_Config[motorId].Motor_CW_pin,
				PIN_OUTPUT);
		GPIO_setupPinDirection(Config_Ptr->M_Config[motorId].Motor_ACW_port,
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	4a 81       	ldd	r20, Y+2	; 0x02
    1df2:	5b 81       	ldd	r21, Y+3	; 0x03
    1df4:	c9 01       	movw	r24, r18
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	84 0f       	add	r24, r20
    1e04:	95 1f       	adc	r25, r21
    1e06:	fc 01       	movw	r30, r24
    1e08:	33 96       	adiw	r30, 0x03	; 3
    1e0a:	60 81       	ld	r22, Z
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a 81       	ldd	r20, Y+2	; 0x02
    1e14:	5b 81       	ldd	r21, Y+3	; 0x03
    1e16:	c9 01       	movw	r24, r18
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	82 0f       	add	r24, r18
    1e22:	93 1f       	adc	r25, r19
    1e24:	84 0f       	add	r24, r20
    1e26:	95 1f       	adc	r25, r21
    1e28:	fc 01       	movw	r30, r24
    1e2a:	34 96       	adiw	r30, 0x04	; 4
    1e2c:	90 81       	ld	r25, Z
    1e2e:	86 2f       	mov	r24, r22
    1e30:	69 2f       	mov	r22, r25
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <GPIO_setupPinDirection>
 * 						 Functions' Prototypes
 *********************************************************************/
void MOTOR_Init(const MOTOR_ConfigType *Config_Ptr)
{
	uint8 motorId;
	for(motorId=0; motorId < NUM_OF_MOTORS; motorId++)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	88 23       	and	r24, r24
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <MOTOR_Init+0xbe>
    1e44:	ab cf       	rjmp	.-170    	; 0x1d9c <MOTOR_Init+0x14>
		GPIO_setupPinDirection(Config_Ptr->ConfigMotorInstances[motorId].Motor_CW_port,
				Config_Ptr->M_Config[motorId].Motor_CW_pin,
				PIN_OUTPUT);
#endif
	}
}
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <MOTOR_rotateCW>:


#if(MOTOR_DIRECTION == MOTOR_BOTH_DIRECTIONS)
	void MOTOR_rotateCW(const MOTOR_ConfigType *Config_Ptr,MotorIdType Mx)
	{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <MOTOR_rotateCW+0x6>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	6b 83       	std	Y+3, r22	; 0x03
		GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_CW_port,
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	49 81       	ldd	r20, Y+1	; 0x01
    1e6c:	5a 81       	ldd	r21, Y+2	; 0x02
    1e6e:	c9 01       	movw	r24, r18
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	82 0f       	add	r24, r18
    1e7a:	93 1f       	adc	r25, r19
    1e7c:	84 0f       	add	r24, r20
    1e7e:	95 1f       	adc	r25, r21
    1e80:	fc 01       	movw	r30, r24
    1e82:	31 96       	adiw	r30, 0x01	; 1
    1e84:	60 81       	ld	r22, Z
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	49 81       	ldd	r20, Y+1	; 0x01
    1e8e:	5a 81       	ldd	r21, Y+2	; 0x02
    1e90:	c9 01       	movw	r24, r18
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	82 0f       	add	r24, r18
    1e9c:	93 1f       	adc	r25, r19
    1e9e:	84 0f       	add	r24, r20
    1ea0:	95 1f       	adc	r25, r21
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	32 96       	adiw	r30, 0x02	; 2
    1ea6:	90 81       	ld	r25, Z
    1ea8:	86 2f       	mov	r24, r22
    1eaa:	69 2f       	mov	r22, r25
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
					  Config_Ptr->M_Config[Mx].Motor_CW_pin,
					  LOGIC_HIGH);
		GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_ACW_port,
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	49 81       	ldd	r20, Y+1	; 0x01
    1eba:	5a 81       	ldd	r21, Y+2	; 0x02
    1ebc:	c9 01       	movw	r24, r18
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	82 0f       	add	r24, r18
    1ec8:	93 1f       	adc	r25, r19
    1eca:	84 0f       	add	r24, r20
    1ecc:	95 1f       	adc	r25, r21
    1ece:	fc 01       	movw	r30, r24
    1ed0:	33 96       	adiw	r30, 0x03	; 3
    1ed2:	60 81       	ld	r22, Z
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	49 81       	ldd	r20, Y+1	; 0x01
    1edc:	5a 81       	ldd	r21, Y+2	; 0x02
    1ede:	c9 01       	movw	r24, r18
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	82 0f       	add	r24, r18
    1eea:	93 1f       	adc	r25, r19
    1eec:	84 0f       	add	r24, r20
    1eee:	95 1f       	adc	r25, r21
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	34 96       	adiw	r30, 0x04	; 4
    1ef4:	90 81       	ld	r25, Z
    1ef6:	86 2f       	mov	r24, r22
    1ef8:	69 2f       	mov	r22, r25
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
				  	  Config_Ptr->M_Config[Mx].Motor_ACW_pin,
				  	  LOGIC_LOW);
	}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <MOTOR_rotateACW>:

	void MOTOR_rotateACW(const MOTOR_ConfigType *Config_Ptr,MotorIdType Mx)
	{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <MOTOR_rotateACW+0x6>
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
		GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_ACW_port,
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	49 81       	ldd	r20, Y+1	; 0x01
    1f26:	5a 81       	ldd	r21, Y+2	; 0x02
    1f28:	c9 01       	movw	r24, r18
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	82 0f       	add	r24, r18
    1f34:	93 1f       	adc	r25, r19
    1f36:	84 0f       	add	r24, r20
    1f38:	95 1f       	adc	r25, r21
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	33 96       	adiw	r30, 0x03	; 3
    1f3e:	60 81       	ld	r22, Z
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	49 81       	ldd	r20, Y+1	; 0x01
    1f48:	5a 81       	ldd	r21, Y+2	; 0x02
    1f4a:	c9 01       	movw	r24, r18
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	82 0f       	add	r24, r18
    1f56:	93 1f       	adc	r25, r19
    1f58:	84 0f       	add	r24, r20
    1f5a:	95 1f       	adc	r25, r21
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	34 96       	adiw	r30, 0x04	; 4
    1f60:	90 81       	ld	r25, Z
    1f62:	86 2f       	mov	r24, r22
    1f64:	69 2f       	mov	r22, r25
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
				  	  Config_Ptr->M_Config[Mx].Motor_ACW_pin,
					  LOGIC_HIGH);
		GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_CW_port,
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	28 2f       	mov	r18, r24
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	49 81       	ldd	r20, Y+1	; 0x01
    1f74:	5a 81       	ldd	r21, Y+2	; 0x02
    1f76:	c9 01       	movw	r24, r18
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	82 0f       	add	r24, r18
    1f82:	93 1f       	adc	r25, r19
    1f84:	84 0f       	add	r24, r20
    1f86:	95 1f       	adc	r25, r21
    1f88:	fc 01       	movw	r30, r24
    1f8a:	31 96       	adiw	r30, 0x01	; 1
    1f8c:	60 81       	ld	r22, Z
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	49 81       	ldd	r20, Y+1	; 0x01
    1f96:	5a 81       	ldd	r21, Y+2	; 0x02
    1f98:	c9 01       	movw	r24, r18
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	84 0f       	add	r24, r20
    1fa8:	95 1f       	adc	r25, r21
    1faa:	fc 01       	movw	r30, r24
    1fac:	32 96       	adiw	r30, 0x02	; 2
    1fae:	90 81       	ld	r25, Z
    1fb0:	86 2f       	mov	r24, r22
    1fb2:	69 2f       	mov	r22, r25
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
					  Config_Ptr->M_Config[Mx].Motor_CW_pin,
					  LOGIC_LOW);
	}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <MOTOR_stop>:
	}
#endif


void MOTOR_stop(const MOTOR_ConfigType *Config_Ptr,MotorIdType Mx)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <MOTOR_stop+0x6>
    1fcc:	0f 92       	push	r0
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	6b 83       	std	Y+3, r22	; 0x03
#if(MOTOR_ONE_DIR == MOTOR_DIRECTION)
	GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_CW_port,
				  Config_Ptr->M_Config[Mx].Motor_CW_pin,
				  LOGIC_LOW);
#else
	GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_CW_port,
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	49 81       	ldd	r20, Y+1	; 0x01
    1fe0:	5a 81       	ldd	r21, Y+2	; 0x02
    1fe2:	c9 01       	movw	r24, r18
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 0f       	add	r24, r18
    1fee:	93 1f       	adc	r25, r19
    1ff0:	84 0f       	add	r24, r20
    1ff2:	95 1f       	adc	r25, r21
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	31 96       	adiw	r30, 0x01	; 1
    1ff8:	60 81       	ld	r22, Z
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	49 81       	ldd	r20, Y+1	; 0x01
    2002:	5a 81       	ldd	r21, Y+2	; 0x02
    2004:	c9 01       	movw	r24, r18
    2006:	88 0f       	add	r24, r24
    2008:	99 1f       	adc	r25, r25
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	82 0f       	add	r24, r18
    2010:	93 1f       	adc	r25, r19
    2012:	84 0f       	add	r24, r20
    2014:	95 1f       	adc	r25, r21
    2016:	fc 01       	movw	r30, r24
    2018:	32 96       	adiw	r30, 0x02	; 2
    201a:	90 81       	ld	r25, Z
    201c:	86 2f       	mov	r24, r22
    201e:	69 2f       	mov	r22, r25
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
				  Config_Ptr->M_Config[Mx].Motor_CW_pin,
				  LOGIC_LOW);
	GPIO_writePin(Config_Ptr->M_Config[Mx].Motor_ACW_port,
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	49 81       	ldd	r20, Y+1	; 0x01
    202e:	5a 81       	ldd	r21, Y+2	; 0x02
    2030:	c9 01       	movw	r24, r18
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	82 0f       	add	r24, r18
    203c:	93 1f       	adc	r25, r19
    203e:	84 0f       	add	r24, r20
    2040:	95 1f       	adc	r25, r21
    2042:	fc 01       	movw	r30, r24
    2044:	33 96       	adiw	r30, 0x03	; 3
    2046:	60 81       	ld	r22, Z
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	49 81       	ldd	r20, Y+1	; 0x01
    2050:	5a 81       	ldd	r21, Y+2	; 0x02
    2052:	c9 01       	movw	r24, r18
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	82 0f       	add	r24, r18
    205e:	93 1f       	adc	r25, r19
    2060:	84 0f       	add	r24, r20
    2062:	95 1f       	adc	r25, r21
    2064:	fc 01       	movw	r30, r24
    2066:	34 96       	adiw	r30, 0x04	; 4
    2068:	90 81       	ld	r25, Z
    206a:	86 2f       	mov	r24, r22
    206c:	69 2f       	mov	r22, r25
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
			  	  Config_Ptr->M_Config[Mx].Motor_ACW_pin,
				  LOGIC_LOW);
#endif
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <BUZZER_Init>:

/************************************************************************************************
 	 	 	 	 	 	 	 	 	 Functions' Definition
 ************************************************************************************************/
void BUZZER_Init(const BUZZER_ConfigType *Config_Ptr)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <BUZZER_Init+0x6>
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9b 83       	std	Y+3, r25	; 0x03
    208e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Bx_ID;
	for(Bx_ID = 0; Bx_ID < NUM_OF_BUZZERS; Bx_ID++ )
    2090:	19 82       	std	Y+1, r1	; 0x01
    2092:	49 c0       	rjmp	.+146    	; 0x2126 <BUZZER_Init+0xa6>
	{
		/* Set the buzzer at portB , pin0 as output */
		GPIO_setupPinDirection(Config_Ptr->B_Config[Bx_ID].port,
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	4a 81       	ldd	r20, Y+2	; 0x02
    209c:	5b 81       	ldd	r21, Y+3	; 0x03
    209e:	c9 01       	movw	r24, r18
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	82 0f       	add	r24, r18
    20a6:	93 1f       	adc	r25, r19
    20a8:	84 0f       	add	r24, r20
    20aa:	95 1f       	adc	r25, r21
    20ac:	fc 01       	movw	r30, r24
    20ae:	31 96       	adiw	r30, 0x01	; 1
    20b0:	60 81       	ld	r22, Z
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	4a 81       	ldd	r20, Y+2	; 0x02
    20ba:	5b 81       	ldd	r21, Y+3	; 0x03
    20bc:	c9 01       	movw	r24, r18
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	84 0f       	add	r24, r20
    20c8:	95 1f       	adc	r25, r21
    20ca:	fc 01       	movw	r30, r24
    20cc:	32 96       	adiw	r30, 0x02	; 2
    20ce:	90 81       	ld	r25, Z
    20d0:	86 2f       	mov	r24, r22
    20d2:	69 2f       	mov	r22, r25
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <GPIO_setupPinDirection>
							   Config_Ptr->B_Config[Bx_ID].pin,
							   PIN_OUTPUT);
		/* Turn off Buzzer */
		GPIO_writePin(Config_Ptr->B_Config[Bx_ID].port,
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a 81       	ldd	r20, Y+2	; 0x02
    20e2:	5b 81       	ldd	r21, Y+3	; 0x03
    20e4:	c9 01       	movw	r24, r18
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	84 0f       	add	r24, r20
    20f0:	95 1f       	adc	r25, r21
    20f2:	fc 01       	movw	r30, r24
    20f4:	31 96       	adiw	r30, 0x01	; 1
    20f6:	60 81       	ld	r22, Z
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a 81       	ldd	r20, Y+2	; 0x02
    2100:	5b 81       	ldd	r21, Y+3	; 0x03
    2102:	c9 01       	movw	r24, r18
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	84 0f       	add	r24, r20
    210e:	95 1f       	adc	r25, r21
    2110:	fc 01       	movw	r30, r24
    2112:	32 96       	adiw	r30, 0x02	; 2
    2114:	90 81       	ld	r25, Z
    2116:	86 2f       	mov	r24, r22
    2118:	69 2f       	mov	r22, r25
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
 	 	 	 	 	 	 	 	 	 Functions' Definition
 ************************************************************************************************/
void BUZZER_Init(const BUZZER_ConfigType *Config_Ptr)
{
	uint8 Bx_ID;
	for(Bx_ID = 0; Bx_ID < NUM_OF_BUZZERS; Bx_ID++ )
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	8f 5f       	subi	r24, 0xFF	; 255
    2124:	89 83       	std	Y+1, r24	; 0x01
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	88 23       	and	r24, r24
    212a:	09 f4       	brne	.+2      	; 0x212e <BUZZER_Init+0xae>
    212c:	b3 cf       	rjmp	.-154    	; 0x2094 <BUZZER_Init+0x14>
		/* Turn off Buzzer */
		GPIO_writePin(Config_Ptr->B_Config[Bx_ID].port,
				   	   Config_Ptr->B_Config[Bx_ID].pin,
					   BUZZER_OFF);
	}
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <BUZZER_On>:

void BUZZER_On(const BUZZER_ConfigType *Config_Ptr,BuzzerIdType Bx_ID)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <BUZZER_On+0x6>
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_writePin(Config_Ptr->B_Config[Bx_ID].port,
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	49 81       	ldd	r20, Y+1	; 0x01
    2154:	5a 81       	ldd	r21, Y+2	; 0x02
    2156:	c9 01       	movw	r24, r18
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	82 0f       	add	r24, r18
    215e:	93 1f       	adc	r25, r19
    2160:	84 0f       	add	r24, r20
    2162:	95 1f       	adc	r25, r21
    2164:	fc 01       	movw	r30, r24
    2166:	31 96       	adiw	r30, 0x01	; 1
    2168:	60 81       	ld	r22, Z
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	49 81       	ldd	r20, Y+1	; 0x01
    2172:	5a 81       	ldd	r21, Y+2	; 0x02
    2174:	c9 01       	movw	r24, r18
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	82 0f       	add	r24, r18
    217c:	93 1f       	adc	r25, r19
    217e:	84 0f       	add	r24, r20
    2180:	95 1f       	adc	r25, r21
    2182:	fc 01       	movw	r30, r24
    2184:	32 96       	adiw	r30, 0x02	; 2
    2186:	90 81       	ld	r25, Z
    2188:	86 2f       	mov	r24, r22
    218a:	69 2f       	mov	r22, r25
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
			   	   Config_Ptr->B_Config[Bx_ID].pin,
				   BUZZER_ON);
}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <BUZZER_Off>:

void BUZZER_Off(const BUZZER_ConfigType *Config_Ptr,BuzzerIdType Bx_ID)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <BUZZER_Off+0x6>
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	6b 83       	std	Y+3, r22	; 0x03
	GPIO_writePin(Config_Ptr->B_Config[Bx_ID].port,
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	49 81       	ldd	r20, Y+1	; 0x01
    21b8:	5a 81       	ldd	r21, Y+2	; 0x02
    21ba:	c9 01       	movw	r24, r18
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	82 0f       	add	r24, r18
    21c2:	93 1f       	adc	r25, r19
    21c4:	84 0f       	add	r24, r20
    21c6:	95 1f       	adc	r25, r21
    21c8:	fc 01       	movw	r30, r24
    21ca:	31 96       	adiw	r30, 0x01	; 1
    21cc:	60 81       	ld	r22, Z
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	49 81       	ldd	r20, Y+1	; 0x01
    21d6:	5a 81       	ldd	r21, Y+2	; 0x02
    21d8:	c9 01       	movw	r24, r18
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	82 0f       	add	r24, r18
    21e0:	93 1f       	adc	r25, r19
    21e2:	84 0f       	add	r24, r20
    21e4:	95 1f       	adc	r25, r21
    21e6:	fc 01       	movw	r30, r24
    21e8:	32 96       	adiw	r30, 0x02	; 2
    21ea:	90 81       	ld	r25, Z
    21ec:	86 2f       	mov	r24, r22
    21ee:	69 2f       	mov	r22, r25
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 be 0b 	call	0x177c	; 0x177c <GPIO_writePin>
			   	   Config_Ptr->B_Config[Bx_ID].pin,
				   BUZZER_OFF);
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <CTRL_Init>:
 	 	 	 	 	 	 	 	 	 Functions' Definition
 ************************************************************************************************/

/*==================================== CONTROL_init ===============================================*/
void CTRL_Init(void)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	2c 97       	sbiw	r28, 0x0c	; 12
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
	 * 2. initiate the Buzzer.
	 * 3. initiate the motor.
	 * 4. initiate the timer to Timer1, compare-mode, prescaler_1024,and set the initial and compare values.
	 * 5. initiate the UART to baud-rate=9600, 8-bits data, one stop bit and no parity.
	 **********************************************************************************************************/
	EEPROM_Init();
    2216:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <EEPROM_Init>
	BUZZER_Init(&BuzzerConfig);
    221a:	8b e8       	ldi	r24, 0x8B	; 139
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 40 10 	call	0x2080	; 0x2080 <BUZZER_Init>
	MOTOR_Init(&MotorConfig);
    2222:	86 e8       	ldi	r24, 0x86	; 134
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <MOTOR_Init>
	GPT_startTimer(T1);
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	0e 94 b8 06 	call	0xd70	; 0xd70 <GPT_startTimer>
	GPT_T1_setCallBack(CTRL_callBack);
    2230:	89 ee       	ldi	r24, 0xE9	; 233
    2232:	93 e1       	ldi	r25, 0x13	; 19
    2234:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPT_T1_setCallBack>
	UART_ConfigType uart_configObj = {9600,EIGHT_BITS,DISABLE_PARITY,ONE_STOP_BIT};
    2238:	ce 01       	movw	r24, r28
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	99 87       	std	Y+9, r25	; 0x09
    223e:	88 87       	std	Y+8, r24	; 0x08
    2240:	ee e8       	ldi	r30, 0x8E	; 142
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	fb 87       	std	Y+11, r31	; 0x0b
    2246:	ea 87       	std	Y+10, r30	; 0x0a
    2248:	f7 e0       	ldi	r31, 0x07	; 7
    224a:	fc 87       	std	Y+12, r31	; 0x0c
    224c:	ea 85       	ldd	r30, Y+10	; 0x0a
    224e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2250:	00 80       	ld	r0, Z
    2252:	8a 85       	ldd	r24, Y+10	; 0x0a
    2254:	9b 85       	ldd	r25, Y+11	; 0x0b
    2256:	01 96       	adiw	r24, 0x01	; 1
    2258:	9b 87       	std	Y+11, r25	; 0x0b
    225a:	8a 87       	std	Y+10, r24	; 0x0a
    225c:	e8 85       	ldd	r30, Y+8	; 0x08
    225e:	f9 85       	ldd	r31, Y+9	; 0x09
    2260:	00 82       	st	Z, r0
    2262:	88 85       	ldd	r24, Y+8	; 0x08
    2264:	99 85       	ldd	r25, Y+9	; 0x09
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	99 87       	std	Y+9, r25	; 0x09
    226a:	88 87       	std	Y+8, r24	; 0x08
    226c:	9c 85       	ldd	r25, Y+12	; 0x0c
    226e:	91 50       	subi	r25, 0x01	; 1
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	ec 85       	ldd	r30, Y+12	; 0x0c
    2274:	ee 23       	and	r30, r30
    2276:	51 f7       	brne	.-44     	; 0x224c <CTRL_Init+0x4a>
	UART_Init(&uart_configObj);
    2278:	ce 01       	movw	r24, r28
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	GPT_enableNotification(T1, OUTPUT_COMPARE);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	62 e0       	ldi	r22, 0x02	; 2
    2284:	0e 94 44 09 	call	0x1288	; 0x1288 <GPT_enableNotification>
}
    2288:	2c 96       	adiw	r28, 0x0c	; 12
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <CTRL_receiveACK>:
/*======================================== HMI_receiveACK ==========================================*/
void CTRL_receiveACK(void)
{
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the control ECU check the password*/
	while(UART_receiveByte() != READY);
    22a2:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <CTRL_receiveACK+0x8>
	UART_sendByte(READY);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <CTRL_sendACK>:
/*======================================== HMI_sendACK ==========================================*/
void CTRL_sendACK(void)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
	while(UART_receiveByte() != READY);
    22c4:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	e1 f7       	brne	.-8      	; 0x22c4 <CTRL_sendACK+0xe>
}
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <CTRL_receivePassword>:
/*==================================== receivePassword ===============================================*/
void CTRL_receivePassword(uint8 *a_password)
{
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	61 97       	sbiw	r28, 0x11	; 17
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	99 8b       	std	Y+17, r25	; 0x11
    22ec:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    22ee:	1f 86       	std	Y+15, r1	; 0x0f
    22f0:	81 c0       	rjmp	.+258    	; 0x23f4 <CTRL_receivePassword+0x122>
	{
		a_password[i] = UART_receiveByte();
    22f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	88 89       	ldd	r24, Y+16	; 0x10
    22fa:	99 89       	ldd	r25, Y+17	; 0x11
    22fc:	8c 01       	movw	r16, r24
    22fe:	02 0f       	add	r16, r18
    2300:	13 1f       	adc	r17, r19
    2302:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2306:	f8 01       	movw	r30, r16
    2308:	80 83       	st	Z, r24
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a8 e4       	ldi	r26, 0x48	; 72
    2310:	b2 e4       	ldi	r27, 0x42	; 66
    2312:	8b 87       	std	Y+11, r24	; 0x0b
    2314:	9c 87       	std	Y+12, r25	; 0x0c
    2316:	ad 87       	std	Y+13, r26	; 0x0d
    2318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6b 85       	ldd	r22, Y+11	; 0x0b
    231c:	7c 85       	ldd	r23, Y+12	; 0x0c
    231e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2320:	9e 85       	ldd	r25, Y+14	; 0x0e
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a ef       	ldi	r20, 0xFA	; 250
    2328:	54 e4       	ldi	r21, 0x44	; 68
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8f 83       	std	Y+7, r24	; 0x07
    2334:	98 87       	std	Y+8, r25	; 0x08
    2336:	a9 87       	std	Y+9, r26	; 0x09
    2338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <CTRL_receivePassword+0x8a>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	3f c0       	rjmp	.+126    	; 0x23da <CTRL_receivePassword+0x108>
	else if (__tmp > 65535)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <CTRL_receivePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <CTRL_receivePassword+0xea>
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <CTRL_receivePassword+0xd8>
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <CTRL_receivePassword+0xcc>
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <CTRL_receivePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6f 81       	ldd	r22, Y+7	; 0x07
    23c8:	78 85       	ldd	r23, Y+8	; 0x08
    23ca:	89 85       	ldd	r24, Y+9	; 0x09
    23cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <CTRL_receivePassword+0x114>
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== receivePassword ===============================================*/
void CTRL_receivePassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    23ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
    23f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f6:	85 30       	cpi	r24, 0x05	; 5
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <CTRL_receivePassword+0x12a>
    23fa:	7b cf       	rjmp	.-266    	; 0x22f2 <CTRL_receivePassword+0x20>
	{
		a_password[i] = UART_receiveByte();
		_delay_ms(50);
	}
}
    23fc:	61 96       	adiw	r28, 0x11	; 17
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	08 95       	ret

00002412 <CTRL_sendPassword>:
/*==================================== sendPassword ===============================================*/
void CTRL_sendPassword(uint8 *a_password)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	61 97       	sbiw	r28, 0x11	; 17
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	99 8b       	std	Y+17, r25	; 0x11
    2428:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    242a:	1f 86       	std	Y+15, r1	; 0x0f
    242c:	80 c0       	rjmp	.+256    	; 0x252e <CTRL_sendPassword+0x11c>
	{
		UART_sendByte(a_password[i]);
    242e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	88 89       	ldd	r24, Y+16	; 0x10
    2436:	99 89       	ldd	r25, Y+17	; 0x11
    2438:	fc 01       	movw	r30, r24
    243a:	e2 0f       	add	r30, r18
    243c:	f3 1f       	adc	r31, r19
    243e:	80 81       	ld	r24, Z
    2440:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	a8 e4       	ldi	r26, 0x48	; 72
    244a:	b2 e4       	ldi	r27, 0x42	; 66
    244c:	8b 87       	std	Y+11, r24	; 0x0b
    244e:	9c 87       	std	Y+12, r25	; 0x0c
    2450:	ad 87       	std	Y+13, r26	; 0x0d
    2452:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2454:	6b 85       	ldd	r22, Y+11	; 0x0b
    2456:	7c 85       	ldd	r23, Y+12	; 0x0c
    2458:	8d 85       	ldd	r24, Y+13	; 0x0d
    245a:	9e 85       	ldd	r25, Y+14	; 0x0e
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	4a ef       	ldi	r20, 0xFA	; 250
    2462:	54 e4       	ldi	r21, 0x44	; 68
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8f 83       	std	Y+7, r24	; 0x07
    246e:	98 87       	std	Y+8, r25	; 0x08
    2470:	a9 87       	std	Y+9, r26	; 0x09
    2472:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2474:	6f 81       	ldd	r22, Y+7	; 0x07
    2476:	78 85       	ldd	r23, Y+8	; 0x08
    2478:	89 85       	ldd	r24, Y+9	; 0x09
    247a:	9a 85       	ldd	r25, Y+10	; 0x0a
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e8       	ldi	r20, 0x80	; 128
    2482:	5f e3       	ldi	r21, 0x3F	; 63
    2484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2488:	88 23       	and	r24, r24
    248a:	2c f4       	brge	.+10     	; 0x2496 <CTRL_sendPassword+0x84>
		__ticks = 1;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	3f c0       	rjmp	.+126    	; 0x2514 <CTRL_sendPassword+0x102>
	else if (__tmp > 65535)
    2496:	6f 81       	ldd	r22, Y+7	; 0x07
    2498:	78 85       	ldd	r23, Y+8	; 0x08
    249a:	89 85       	ldd	r24, Y+9	; 0x09
    249c:	9a 85       	ldd	r25, Y+10	; 0x0a
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	4c f5       	brge	.+82     	; 0x2500 <CTRL_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	0f c0       	rjmp	.+30     	; 0x24f6 <CTRL_sendPassword+0xe4>
    24d8:	88 ec       	ldi	r24, 0xC8	; 200
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <CTRL_sendPassword+0xd2>
    24e8:	9c 83       	std	Y+4, r25	; 0x04
    24ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
    24ee:	9e 81       	ldd	r25, Y+6	; 0x06
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	9e 81       	ldd	r25, Y+6	; 0x06
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	69 f7       	brne	.-38     	; 0x24d8 <CTRL_sendPassword+0xc6>
    24fe:	14 c0       	rjmp	.+40     	; 0x2528 <CTRL_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2500:	6f 81       	ldd	r22, Y+7	; 0x07
    2502:	78 85       	ldd	r23, Y+8	; 0x08
    2504:	89 85       	ldd	r24, Y+9	; 0x09
    2506:	9a 85       	ldd	r25, Y+10	; 0x0a
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <CTRL_sendPassword+0x10e>
    2524:	9a 83       	std	Y+2, r25	; 0x02
    2526:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== sendPassword ===============================================*/
void CTRL_sendPassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2528:	8f 85       	ldd	r24, Y+15	; 0x0f
    252a:	8f 5f       	subi	r24, 0xFF	; 255
    252c:	8f 87       	std	Y+15, r24	; 0x0f
    252e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2530:	85 30       	cpi	r24, 0x05	; 5
    2532:	08 f4       	brcc	.+2      	; 0x2536 <CTRL_sendPassword+0x124>
    2534:	7c cf       	rjmp	.-264    	; 0x242e <CTRL_sendPassword+0x1c>
	{
		UART_sendByte(a_password[i]);
		_delay_ms(50);
	}
}
    2536:	61 96       	adiw	r28, 0x11	; 17
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <CTRL_savePassword>:
/*==================================== savePassword ===============================================*/
void CTRL_savePassword(void)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	2f 97       	sbiw	r28, 0x0f	; 15
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i=0;i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    255c:	1f 86       	std	Y+15, r1	; 0x0f
    255e:	86 c0       	rjmp	.+268    	; 0x266c <CTRL_savePassword+0x124>
	{
		EEPROM_writeByte((PASSWORD_START_ADDRESS_IN_MEMORY+i), g_currentPassword_array[i]);
    2560:	8f 85       	ldd	r24, Y+15	; 0x0f
    2562:	88 2f       	mov	r24, r24
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	8f 5e       	subi	r24, 0xEF	; 239
    2568:	9c 4f       	sbci	r25, 0xFC	; 252
    256a:	ac 01       	movw	r20, r24
    256c:	8f 85       	ldd	r24, Y+15	; 0x0f
    256e:	88 2f       	mov	r24, r24
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	fc 01       	movw	r30, r24
    2574:	e2 56       	subi	r30, 0x62	; 98
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	20 81       	ld	r18, Z
    257a:	ca 01       	movw	r24, r20
    257c:	62 2f       	mov	r22, r18
    257e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <EEPROM_writeByte>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a8 e4       	ldi	r26, 0x48	; 72
    2588:	b2 e4       	ldi	r27, 0x42	; 66
    258a:	8b 87       	std	Y+11, r24	; 0x0b
    258c:	9c 87       	std	Y+12, r25	; 0x0c
    258e:	ad 87       	std	Y+13, r26	; 0x0d
    2590:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8f 83       	std	Y+7, r24	; 0x07
    25ac:	98 87       	std	Y+8, r25	; 0x08
    25ae:	a9 87       	std	Y+9, r26	; 0x09
    25b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <CTRL_savePassword+0x8c>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <CTRL_savePassword+0x10a>
	else if (__tmp > 65535)
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <CTRL_savePassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <CTRL_savePassword+0xec>
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <CTRL_savePassword+0xda>
    2626:	9c 83       	std	Y+4, r25	; 0x04
    2628:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <CTRL_savePassword+0xce>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <CTRL_savePassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <CTRL_savePassword+0x116>
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== savePassword ===============================================*/
void CTRL_savePassword(void)
{
	uint8 i;
	for(i=0;i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    2666:	8f 85       	ldd	r24, Y+15	; 0x0f
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	85 30       	cpi	r24, 0x05	; 5
    2670:	08 f4       	brcc	.+2      	; 0x2674 <CTRL_savePassword+0x12c>
    2672:	76 cf       	rjmp	.-276    	; 0x2560 <CTRL_savePassword+0x18>
	{
		EEPROM_writeByte((PASSWORD_START_ADDRESS_IN_MEMORY+i), g_currentPassword_array[i]);
		_delay_ms(50);
	}
}
    2674:	2f 96       	adiw	r28, 0x0f	; 15
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <CTRL_readPassword>:
/*==================================== readPassword ===============================================*/
void CTRL_readPassword(void)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	0f 92       	push	r0
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2690:	19 82       	std	Y+1, r1	; 0x01
    2692:	13 c0       	rjmp	.+38     	; 0x26ba <CTRL_readPassword+0x34>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS_IN_MEMORY+i, &g_currentPassword_array[i]);
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	8f 5e       	subi	r24, 0xEF	; 239
    269c:	9c 4f       	sbci	r25, 0xFC	; 252
    269e:	ac 01       	movw	r20, r24
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9c 01       	movw	r18, r24
    26a8:	22 56       	subi	r18, 0x62	; 98
    26aa:	3f 4f       	sbci	r19, 0xFF	; 255
    26ac:	ca 01       	movw	r24, r20
    26ae:	b9 01       	movw	r22, r18
    26b0:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <EEPROM_readByte>
}
/*==================================== readPassword ===============================================*/
void CTRL_readPassword(void)
{
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	85 30       	cpi	r24, 0x05	; 5
    26be:	50 f3       	brcs	.-44     	; 0x2694 <CTRL_readPassword+0xe>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS_IN_MEMORY+i, &g_currentPassword_array[i]);
	}
}
    26c0:	0f 90       	pop	r0
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <CTRL_compareTwoPasswords>:
/*==================================== compare_TwoPasswords ========================================*/
uint8 CTRL_compareTwoPasswords(void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	00 d0       	rcall	.+0      	; 0x26ce <CTRL_compareTwoPasswords+0x6>
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
	uint8 i,verify = MATCHED;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	89 83       	std	Y+1, r24	; 0x01
	for(i=0; i < NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    26d6:	1a 82       	std	Y+2, r1	; 0x02
    26d8:	15 c0       	rjmp	.+42     	; 0x2704 <CTRL_compareTwoPasswords+0x3c>
	{
		if(g_currentPassword_array[i] != g_confirmPassword_array[i])
    26da:	8a 81       	ldd	r24, Y+2	; 0x02
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	fc 01       	movw	r30, r24
    26e2:	e2 56       	subi	r30, 0x62	; 98
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	20 81       	ld	r18, Z
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	e7 56       	subi	r30, 0x67	; 103
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	28 17       	cp	r18, r24
    26f8:	11 f0       	breq	.+4      	; 0x26fe <CTRL_compareTwoPasswords+0x36>
		{
			verify = MISMATCHED;
    26fa:	19 82       	std	Y+1, r1	; 0x01
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <CTRL_compareTwoPasswords+0x42>
}
/*==================================== compare_TwoPasswords ========================================*/
uint8 CTRL_compareTwoPasswords(void)
{
	uint8 i,verify = MATCHED;
	for(i=0; i < NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	8f 5f       	subi	r24, 0xFF	; 255
    2702:	8a 83       	std	Y+2, r24	; 0x02
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	85 30       	cpi	r24, 0x05	; 5
    2708:	40 f3       	brcs	.-48     	; 0x26da <CTRL_compareTwoPasswords+0x12>
		{
			verify = MISMATCHED;
			break;
		}
	}
	return verify;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
}
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <CTRL_passwordInputOperation>:
/*==================================== PasswordInputOperation =======================================*/
void CTRL_passwordInputOperation(void)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
	uint8 temp = 0;
    2720:	19 82       	std	Y+1, r1	; 0x01
	 * 6. send ready to contact to HMI and wait if until finish its task and respond by ready.
	 * 7. send the result of comparsion to HMI.
	 * 8. loop until the two password are matched.
	 ****************************************************************************************/
		do{
			while(UART_receiveByte() != READY);
    2722:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	e1 f7       	brne	.-8      	; 0x2722 <CTRL_passwordInputOperation+0xc>
			UART_sendByte(READY);
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			CTRL_receivePassword(g_currentPassword_array);
    2730:	8e e9       	ldi	r24, 0x9E	; 158
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 69 11 	call	0x22d2	; 0x22d2 <CTRL_receivePassword>
			while(UART_receiveByte() != READY);
    2738:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	e1 f7       	brne	.-8      	; 0x2738 <CTRL_passwordInputOperation+0x22>
			UART_sendByte(READY);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			CTRL_receivePassword(g_confirmPassword_array);
    2746:	89 e9       	ldi	r24, 0x99	; 153
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <CTRL_receivePassword>
			temp = CTRL_compareTwoPasswords();
    274e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <CTRL_compareTwoPasswords>
    2752:	89 83       	std	Y+1, r24	; 0x01
			if(temp == MATCHED)
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	11 f4       	brne	.+4      	; 0x275e <CTRL_passwordInputOperation+0x48>
			{
				CTRL_savePassword();
    275a:	0e 94 a4 12 	call	0x2548	; 0x2548 <CTRL_savePassword>
			}
			UART_sendByte(READY);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			while(UART_receiveByte() != READY);
    2764:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	e1 f7       	brne	.-8      	; 0x2764 <CTRL_passwordInputOperation+0x4e>
			UART_sendByte(temp);
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		}while(temp == MISMATCHED);
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	88 23       	and	r24, r24
    2776:	a9 f2       	breq	.-86     	; 0x2722 <CTRL_passwordInputOperation+0xc>
}
    2778:	0f 90       	pop	r0
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	08 95       	ret

00002780 <CTRL_doorAction>:
/*=================================== display_DoorAction =============================================*/
void CTRL_doorAction(void)
{
    2780:	df 93       	push	r29
    2782:	cf 93       	push	r28
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    2788:	10 92 98 00 	sts	0x0098, r1
	MOTOR_rotateCW(&MotorConfig,M0);
    278c:	86 e8       	ldi	r24, 0x86	; 134
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	60 e0       	ldi	r22, 0x00	; 0
    2792:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <MOTOR_rotateCW>
	while(g_seconds < TIME_OF_DOOR_OPEN);
    2796:	80 91 98 00 	lds	r24, 0x0098
    279a:	8f 30       	cpi	r24, 0x0F	; 15
    279c:	e0 f3       	brcs	.-8      	; 0x2796 <CTRL_doorAction+0x16>
	MOTOR_stop(&MotorConfig,M0);
    279e:	86 e8       	ldi	r24, 0x86	; 134
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	60 e0       	ldi	r22, 0x00	; 0
    27a4:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <MOTOR_stop>
	while(g_seconds < (TIME_OF_DOOR_OPEN+TIME_OF_DOOR_STOP));
    27a8:	80 91 98 00 	lds	r24, 0x0098
    27ac:	82 31       	cpi	r24, 0x12	; 18
    27ae:	e0 f3       	brcs	.-8      	; 0x27a8 <CTRL_doorAction+0x28>
	MOTOR_rotateACW(&MotorConfig,M0);
    27b0:	86 e8       	ldi	r24, 0x86	; 134
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <MOTOR_rotateACW>
	while(g_seconds < (TIME_OF_DOOR_OPEN+TIME_OF_DOOR_STOP+TIME_OF_DOOR_CLOSE));
    27ba:	80 91 98 00 	lds	r24, 0x0098
    27be:	81 32       	cpi	r24, 0x21	; 33
    27c0:	e0 f3       	brcs	.-8      	; 0x27ba <CTRL_doorAction+0x3a>
	MOTOR_stop(&MotorConfig,M0);
    27c2:	86 e8       	ldi	r24, 0x86	; 134
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <MOTOR_stop>

}
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <CTRL_callBack>:
/*=================================== Door_callBack =============================================*/
void CTRL_callBack(void)
{
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    27da:	80 91 98 00 	lds	r24, 0x0098
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	80 93 98 00 	sts	0x0098, r24
}
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <CTRL_alarmAction>:
/*================================== CONTROL_alarmAction =======================================*/
void CTRL_alarmAction(void)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    27f2:	10 92 98 00 	sts	0x0098, r1
	BUZZER_On(&BuzzerConfig,B0);
    27f6:	8b e8       	ldi	r24, 0x8B	; 139
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	0e 94 9d 10 	call	0x213a	; 0x213a <BUZZER_On>
	while(g_seconds < TIME_OF_ALARM);
    2800:	80 91 98 00 	lds	r24, 0x0098
    2804:	8c 33       	cpi	r24, 0x3C	; 60
    2806:	e0 f3       	brcs	.-8      	; 0x2800 <CTRL_alarmAction+0x16>
	BUZZER_Off(&BuzzerConfig,B0);
    2808:	8b e8       	ldi	r24, 0x8B	; 139
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	0e 94 cf 10 	call	0x219e	; 0x219e <BUZZER_Off>
}
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <CTRL_openDoorWrongPassword>:
/*================================= CONTROL_openDoorCheckPassword ================================*/
void CTRL_openDoorWrongPassword(uint8 *a_NumberOfWrongPasswords)
{
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	00 d0       	rcall	.+0      	; 0x281e <CTRL_openDoorWrongPassword+0x6>
    281e:	0f 92       	push	r0
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	9b 83       	std	Y+3, r25	; 0x03
    2826:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_verification_res = 0;
    2828:	19 82       	std	Y+1, r1	; 0x01
	 * 	12-1. exit the loop.
	 * 	12-2. set num_of_wrong_passwords back to zero.
	 * 	12-3. apply functoin CONTROL_alarmAction.
	 * 	12-4. return back to the option menu.
	 ************************************************************************/
	CTRL_sendACK();
    282a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
	UART_sendByte(MISMATCHED);
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
    2834:	20 c0       	rjmp	.+64     	; 0x2876 <CTRL_openDoorWrongPassword+0x5e>
	while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
	{
		(*a_NumberOfWrongPasswords) ++;
    2836:	ea 81       	ldd	r30, Y+2	; 0x02
    2838:	fb 81       	ldd	r31, Y+3	; 0x03
    283a:	80 81       	ld	r24, Z
    283c:	8f 5f       	subi	r24, 0xFF	; 255
    283e:	ea 81       	ldd	r30, Y+2	; 0x02
    2840:	fb 81       	ldd	r31, Y+3	; 0x03
    2842:	80 83       	st	Z, r24
		CTRL_receiveACK();
    2844:	0e 94 4d 11 	call	0x229a	; 0x229a <CTRL_receiveACK>
		CTRL_receivePassword(g_confirmPassword_array);
    2848:	89 e9       	ldi	r24, 0x99	; 153
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <CTRL_receivePassword>
		CTRL_readPassword();
    2850:	0e 94 43 13 	call	0x2686	; 0x2686 <CTRL_readPassword>
		a_verification_res = CTRL_compareTwoPasswords();
    2854:	0e 94 64 13 	call	0x26c8	; 0x26c8 <CTRL_compareTwoPasswords>
    2858:	89 83       	std	Y+1, r24	; 0x01
		CTRL_sendACK();
    285a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
		UART_sendByte(a_verification_res);
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>

		if(a_verification_res == MATCHED)
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	31 f4       	brne	.+12     	; 0x2876 <CTRL_openDoorWrongPassword+0x5e>
		{
			(*a_NumberOfWrongPasswords) = 0;
    286a:	ea 81       	ldd	r30, Y+2	; 0x02
    286c:	fb 81       	ldd	r31, Y+3	; 0x03
    286e:	10 82       	st	Z, r1
			CTRL_doorAction();
    2870:	0e 94 c0 13 	call	0x2780	; 0x2780 <CTRL_doorAction>
    2874:	05 c0       	rjmp	.+10     	; 0x2880 <CTRL_openDoorWrongPassword+0x68>
	 * 	12-3. apply functoin CONTROL_alarmAction.
	 * 	12-4. return back to the option menu.
	 ************************************************************************/
	CTRL_sendACK();
	UART_sendByte(MISMATCHED);
	while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    2876:	ea 81       	ldd	r30, Y+2	; 0x02
    2878:	fb 81       	ldd	r31, Y+3	; 0x03
    287a:	80 81       	ld	r24, Z
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	d8 f2       	brcs	.-74     	; 0x2836 <CTRL_openDoorWrongPassword+0x1e>
			(*a_NumberOfWrongPasswords) = 0;
			CTRL_doorAction();
			break;         /* exit from while loop */
		}
	}
	if((*a_NumberOfWrongPasswords) == MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    2880:	ea 81       	ldd	r30, Y+2	; 0x02
    2882:	fb 81       	ldd	r31, Y+3	; 0x03
    2884:	80 81       	ld	r24, Z
    2886:	83 30       	cpi	r24, 0x03	; 3
    2888:	29 f4       	brne	.+10     	; 0x2894 <CTRL_openDoorWrongPassword+0x7c>
	{
		(*a_NumberOfWrongPasswords) = 0;
    288a:	ea 81       	ldd	r30, Y+2	; 0x02
    288c:	fb 81       	ldd	r31, Y+3	; 0x03
    288e:	10 82       	st	Z, r1
		CTRL_alarmAction();
    2890:	0e 94 f5 13 	call	0x27ea	; 0x27ea <CTRL_alarmAction>
	}
}
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <CTRL_changePassword>:
/*================================= CONTROL_changePassword ======================================*/
void CTRL_changePassword(uint8 *a_NumberOfWrongPasswords)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <CTRL_changePassword+0x6>
    28a6:	0f 92       	push	r0
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	9b 83       	std	Y+3, r25	; 0x03
    28ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_verification_res = 0;
    28b0:	19 82       	std	Y+1, r1	; 0x01
	 * 	6-1. send ready to the HMI and wait its readiness.
	 * 	6-2. send MISMATCHED message to HMI.
	 * 	6-3. loop until enter the correct password.
	 * 	6-4. if the user enter a wrong password for 3 times ==> implement alarm action.
	 ************************************************************************************/
	CTRL_receiveACK();
    28b2:	0e 94 4d 11 	call	0x229a	; 0x229a <CTRL_receiveACK>

	CTRL_receivePassword(g_confirmPassword_array);
    28b6:	89 e9       	ldi	r24, 0x99	; 153
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	0e 94 69 11 	call	0x22d2	; 0x22d2 <CTRL_receivePassword>
	CTRL_readPassword();
    28be:	0e 94 43 13 	call	0x2686	; 0x2686 <CTRL_readPassword>
	a_verification_res = CTRL_compareTwoPasswords();
    28c2:	0e 94 64 13 	call	0x26c8	; 0x26c8 <CTRL_compareTwoPasswords>
    28c6:	89 83       	std	Y+1, r24	; 0x01

	if(a_verification_res == MATCHED)
    28c8:	89 81       	ldd	r24, Y+1	; 0x01
    28ca:	81 30       	cpi	r24, 0x01	; 1
    28cc:	59 f4       	brne	.+22     	; 0x28e4 <CTRL_changePassword+0x44>
	{
		CTRL_sendACK();
    28ce:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
		UART_sendByte(CHANGE_PASSWORD);
    28d2:	8c e2       	ldi	r24, 0x2C	; 44
    28d4:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		CTRL_passwordInputOperation();
    28d8:	0e 94 8b 13 	call	0x2716	; 0x2716 <CTRL_passwordInputOperation>
		(*a_NumberOfWrongPasswords) = 0;
    28dc:	ea 81       	ldd	r30, Y+2	; 0x02
    28de:	fb 81       	ldd	r31, Y+3	; 0x03
    28e0:	10 82       	st	Z, r1
    28e2:	38 c0       	rjmp	.+112    	; 0x2954 <CTRL_changePassword+0xb4>
	}
	else if(a_verification_res == MISMATCHED)
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	88 23       	and	r24, r24
    28e8:	a9 f5       	brne	.+106    	; 0x2954 <CTRL_changePassword+0xb4>
	{
		CTRL_sendACK();
    28ea:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
		UART_sendByte(MISMATCHED);
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
    28f4:	20 c0       	rjmp	.+64     	; 0x2936 <CTRL_changePassword+0x96>
		while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
		{
			(*a_NumberOfWrongPasswords)++;
    28f6:	ea 81       	ldd	r30, Y+2	; 0x02
    28f8:	fb 81       	ldd	r31, Y+3	; 0x03
    28fa:	80 81       	ld	r24, Z
    28fc:	8f 5f       	subi	r24, 0xFF	; 255
    28fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2900:	fb 81       	ldd	r31, Y+3	; 0x03
    2902:	80 83       	st	Z, r24

			CTRL_receiveACK();
    2904:	0e 94 4d 11 	call	0x229a	; 0x229a <CTRL_receiveACK>
			CTRL_receivePassword(g_confirmPassword_array);
    2908:	89 e9       	ldi	r24, 0x99	; 153
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <CTRL_receivePassword>
			CTRL_readPassword();
    2910:	0e 94 43 13 	call	0x2686	; 0x2686 <CTRL_readPassword>
			a_verification_res = CTRL_compareTwoPasswords();
    2914:	0e 94 64 13 	call	0x26c8	; 0x26c8 <CTRL_compareTwoPasswords>
    2918:	89 83       	std	Y+1, r24	; 0x01
			CTRL_sendACK();
    291a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
			UART_sendByte(a_verification_res);
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			if(a_verification_res == MATCHED)
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	81 30       	cpi	r24, 0x01	; 1
    2928:	31 f4       	brne	.+12     	; 0x2936 <CTRL_changePassword+0x96>
			{
				(*a_NumberOfWrongPasswords) = 0;
    292a:	ea 81       	ldd	r30, Y+2	; 0x02
    292c:	fb 81       	ldd	r31, Y+3	; 0x03
    292e:	10 82       	st	Z, r1
				CTRL_passwordInputOperation();
    2930:	0e 94 8b 13 	call	0x2716	; 0x2716 <CTRL_passwordInputOperation>
    2934:	05 c0       	rjmp	.+10     	; 0x2940 <CTRL_changePassword+0xa0>
	}
	else if(a_verification_res == MISMATCHED)
	{
		CTRL_sendACK();
		UART_sendByte(MISMATCHED);
		while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    2936:	ea 81       	ldd	r30, Y+2	; 0x02
    2938:	fb 81       	ldd	r31, Y+3	; 0x03
    293a:	80 81       	ld	r24, Z
    293c:	83 30       	cpi	r24, 0x03	; 3
    293e:	d8 f2       	brcs	.-74     	; 0x28f6 <CTRL_changePassword+0x56>
				(*a_NumberOfWrongPasswords) = 0;
				CTRL_passwordInputOperation();
				break; /* exit the while loop */
			}
		}
		if((*a_NumberOfWrongPasswords) == MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    2940:	ea 81       	ldd	r30, Y+2	; 0x02
    2942:	fb 81       	ldd	r31, Y+3	; 0x03
    2944:	80 81       	ld	r24, Z
    2946:	83 30       	cpi	r24, 0x03	; 3
    2948:	29 f4       	brne	.+10     	; 0x2954 <CTRL_changePassword+0xb4>
		{
			(*a_NumberOfWrongPasswords) = 0;
    294a:	ea 81       	ldd	r30, Y+2	; 0x02
    294c:	fb 81       	ldd	r31, Y+3	; 0x03
    294e:	10 82       	st	Z, r1
			CTRL_alarmAction();
    2950:	0e 94 f5 13 	call	0x27ea	; 0x27ea <CTRL_alarmAction>
		}
	}

}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	08 95       	ret

00002960 <main>:

#define PASSWORD_NOT_ENTERED	0xFF
#define PASSWORD_ENTERED		1

int main(void)
{
    2960:	df 93       	push	r29
    2962:	cf 93       	push	r28
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	64 97       	sbiw	r28, 0x14	; 20
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
	 *  [uint8 flag]: variable to observe if the user is used the program for the first time or not.
	 *  [uint8 a_CTROL_option]: this variable stores the selected option coming from HMI ECU.
	 *  [uint8 a_num_of_wrong_passwords]: this variable used to observe how many wrong passwords the user has enterred.
	 *  [uint8 a_CTROL_verification_res]: this variable stores the result of the comparsion betweem the two input passwords.
	 ******************************************************************************************************************/
	uint8 a_num_of_wrong_passwords = 0,a_passwordState;
    2974:	19 8a       	std	Y+17, r1	; 0x11
	uint8 a_CTROL_verification_res = 0,a_CTROL_option=0;
    2976:	18 8a       	std	Y+16, r1	; 0x10
    2978:	1f 86       	std	Y+15, r1	; 0x0f
	 * 2. initiate the Buzzer.
	 * 3. initiate the motor.
	 * 4. initiate the timer to Timer1, compare-mode, prescaler_1024,and set the initial and compare values.
	 * 5. initiate the UART to baud-rate=9600, 8-bits data, one stop bit and no parity.
	 **********************************************************************************************************/
	CTRL_Init();
    297a:	0e 94 01 11 	call	0x2202	; 0x2202 <CTRL_Init>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	a0 e2       	ldi	r26, 0x20	; 32
    2984:	b1 e4       	ldi	r27, 0x41	; 65
    2986:	8b 87       	std	Y+11, r24	; 0x0b
    2988:	9c 87       	std	Y+12, r25	; 0x0c
    298a:	ad 87       	std	Y+13, r26	; 0x0d
    298c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2990:	7c 85       	ldd	r23, Y+12	; 0x0c
    2992:	8d 85       	ldd	r24, Y+13	; 0x0d
    2994:	9e 85       	ldd	r25, Y+14	; 0x0e
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	4a ef       	ldi	r20, 0xFA	; 250
    299c:	54 e4       	ldi	r21, 0x44	; 68
    299e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8f 83       	std	Y+7, r24	; 0x07
    29a8:	98 87       	std	Y+8, r25	; 0x08
    29aa:	a9 87       	std	Y+9, r26	; 0x09
    29ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ae:	6f 81       	ldd	r22, Y+7	; 0x07
    29b0:	78 85       	ldd	r23, Y+8	; 0x08
    29b2:	89 85       	ldd	r24, Y+9	; 0x09
    29b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	2c f4       	brge	.+10     	; 0x29d0 <main+0x70>
		__ticks = 1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	3f c0       	rjmp	.+126    	; 0x2a4e <main+0xee>
	else if (__tmp > 65535)
    29d0:	6f 81       	ldd	r22, Y+7	; 0x07
    29d2:	78 85       	ldd	r23, Y+8	; 0x08
    29d4:	89 85       	ldd	r24, Y+9	; 0x09
    29d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	3f ef       	ldi	r19, 0xFF	; 255
    29dc:	4f e7       	ldi	r20, 0x7F	; 127
    29de:	57 e4       	ldi	r21, 0x47	; 71
    29e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e4:	18 16       	cp	r1, r24
    29e6:	4c f5       	brge	.+82     	; 0x2a3a <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9e 83       	std	Y+6, r25	; 0x06
    2a0e:	8d 83       	std	Y+5, r24	; 0x05
    2a10:	0f c0       	rjmp	.+30     	; 0x2a30 <main+0xd0>
    2a12:	88 ec       	ldi	r24, 0xC8	; 200
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9c 83       	std	Y+4, r25	; 0x04
    2a18:	8b 83       	std	Y+3, r24	; 0x03
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <main+0xbe>
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	69 f7       	brne	.-38     	; 0x2a12 <main+0xb2>
    2a38:	14 c0       	rjmp	.+40     	; 0x2a62 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	9a 83       	std	Y+2, r25	; 0x02
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <main+0xfa>
    2a5e:	9a 83       	std	Y+2, r25	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	/* read the value of flag from memory */
	EEPROM_readByte(CODE_STATE_ADDRESS, &a_passwordState);
    2a62:	9e 01       	movw	r18, r28
    2a64:	2e 5e       	subi	r18, 0xEE	; 238
    2a66:	3f 4f       	sbci	r19, 0xFF	; 255
    2a68:	80 e1       	ldi	r24, 0x10	; 16
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <EEPROM_readByte>
	/* check if HMI is ready to contact. if it is ready send the flag to it. */
	CTRL_sendACK();
    2a72:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
	UART_sendByte(a_passwordState);
    2a76:	8a 89       	ldd	r24, Y+18	; 0x12
    2a78:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>

	/* Don't come here again if you have set your password brefore. */
	if(a_passwordState == PASSWORD_NOT_ENTERED)
    2a7c:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a80:	11 f4       	brne	.+4      	; 0x2a86 <main+0x126>
		 * 5. if two passwords are matched store the password in memory.
		 * 6. send ready to contact to HMI and wait if until finish its task and respond by ready.
		 * 7. send the result of comparsion to HMI.
		 * 8. loop until the two password are matched.
		 ********************************************************************************************************/
		CTRL_passwordInputOperation();
    2a82:	0e 94 8b 13 	call	0x2716	; 0x2716 <CTRL_passwordInputOperation>
	}

	/* set the flag to 1 and store it in memory to prevent the program from starting again from this point */
	a_passwordState = PASSWORD_ENTERED;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	8a 8b       	std	Y+18, r24	; 0x12
	EEPROM_writeByte(CODE_STATE_ADDRESS, a_passwordState);
    2a8a:	2a 89       	ldd	r18, Y+18	; 0x12
    2a8c:	80 e1       	ldi	r24, 0x10	; 16
    2a8e:	93 e0       	ldi	r25, 0x03	; 3
    2a90:	62 2f       	mov	r22, r18
    2a92:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <EEPROM_writeByte>

	/* Enable global interrupt */
	SREG |= (1<<7);
    2a96:	af e5       	ldi	r26, 0x5F	; 95
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	ef e5       	ldi	r30, 0x5F	; 95
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 68       	ori	r24, 0x80	; 128
    2aa2:	8c 93       	st	X, r24
	while(1)
	{
		CTRL_receiveACK();		/* wait until verify password is entered.*/
    2aa4:	0e 94 4d 11 	call	0x229a	; 0x229a <CTRL_receiveACK>
		a_CTROL_option = UART_receiveByte(); 	/* receive the selected option*/
    2aa8:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2aac:	8f 87       	std	Y+15, r24	; 0x0f

		switch(a_CTROL_option)
    2aae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	3c 8b       	std	Y+20, r19	; 0x14
    2ab6:	2b 8b       	std	Y+19, r18	; 0x13
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	9c 89       	ldd	r25, Y+20	; 0x14
    2abc:	8b 32       	cpi	r24, 0x2B	; 43
    2abe:	91 05       	cpc	r25, r1
    2ac0:	31 f0       	breq	.+12     	; 0x2ace <main+0x16e>
    2ac2:	2b 89       	ldd	r18, Y+19	; 0x13
    2ac4:	3c 89       	ldd	r19, Y+20	; 0x14
    2ac6:	2d 32       	cpi	r18, 0x2D	; 45
    2ac8:	31 05       	cpc	r19, r1
    2aca:	19 f1       	breq	.+70     	; 0x2b12 <main+0x1b2>
    2acc:	eb cf       	rjmp	.-42     	; 0x2aa4 <main+0x144>
			 * 5. compare the two passwords and put the result in a_CTROL_verification_res.
			 * 6. if a_verification_res = matched ==> implement the door action.
			 * 7. if a_verificatoin_res = mismatched ==> reenter the password again.
			 * 	7-1. if the passwords don't matched for three times ==> implement the alarm action.
			 *********************************************************************************************/
			a_num_of_wrong_passwords++;
    2ace:	89 89       	ldd	r24, Y+17	; 0x11
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	89 8b       	std	Y+17, r24	; 0x11
			CTRL_receiveACK();
    2ad4:	0e 94 4d 11 	call	0x229a	; 0x229a <CTRL_receiveACK>
			CTRL_receivePassword(g_confirmPassword_array);
    2ad8:	89 e9       	ldi	r24, 0x99	; 153
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <CTRL_receivePassword>
			CTRL_readPassword();
    2ae0:	0e 94 43 13 	call	0x2686	; 0x2686 <CTRL_readPassword>
			a_CTROL_verification_res = CTRL_compareTwoPasswords();
    2ae4:	0e 94 64 13 	call	0x26c8	; 0x26c8 <CTRL_compareTwoPasswords>
    2ae8:	88 8b       	std	Y+16, r24	; 0x10

			if(a_CTROL_verification_res == MATCHED)
    2aea:	88 89       	ldd	r24, Y+16	; 0x10
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	49 f4       	brne	.+18     	; 0x2b02 <main+0x1a2>
				 * 3.wait until the HMI finihes its task and ready to respond.
				 * 4.send the command generated depended on verification result to the HMI ECU.
				 * 5.start the door action.
				 * 6.return to option menu again after door actoin ended.(go to break from switch)
				 **********************************************************************************/
				a_num_of_wrong_passwords = 0;
    2af0:	19 8a       	std	Y+17, r1	; 0x11
				CTRL_sendACK();
    2af2:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <CTRL_sendACK>
				UART_sendByte(DOOR_OPEN);
    2af6:	88 e5       	ldi	r24, 0x58	; 88
    2af8:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
				CTRL_doorAction();
    2afc:	0e 94 c0 13 	call	0x2780	; 0x2780 <CTRL_doorAction>
    2b00:	d1 cf       	rjmp	.-94     	; 0x2aa4 <main+0x144>
			}
			else if(a_CTROL_verification_res == MISMATCHED)
    2b02:	88 89       	ldd	r24, Y+16	; 0x10
    2b04:	88 23       	and	r24, r24
    2b06:	71 f6       	brne	.-100    	; 0x2aa4 <main+0x144>
				 * 	12-1. exit the loop.
				 * 	12-2. set num_of_wrong_passwords back to zero.
				 * 	12-3. apply functoin CONTROL_alarmAction.
				 * 	12-4. return back to the option menu.
				 ************************************************************************/
				CTRL_openDoorWrongPassword(&a_num_of_wrong_passwords);
    2b08:	ce 01       	movw	r24, r28
    2b0a:	41 96       	adiw	r24, 0x11	; 17
    2b0c:	0e 94 0c 14 	call	0x2818	; 0x2818 <CTRL_openDoorWrongPassword>
    2b10:	c9 cf       	rjmp	.-110    	; 0x2aa4 <main+0x144>
			}
			break;		/* return to the option menu , exit from open door option case */

		case CHANGE_PASSWORD_OPTION:
			a_num_of_wrong_passwords ++;
    2b12:	89 89       	ldd	r24, Y+17	; 0x11
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	89 8b       	std	Y+17, r24	; 0x11
			 * 	6-1. send ready to the HMI and wait its readiness.
			 * 	6-2. send MISMATCHED message to HMI.
			 * 	6-3. loop until enter the correct password.
			 * 	6-4. if the user enter a wrong password for 3 times ==> implement alarm action.
			 ************************************************************************************/
			CTRL_changePassword(&a_num_of_wrong_passwords);
    2b18:	ce 01       	movw	r24, r28
    2b1a:	41 96       	adiw	r24, 0x11	; 17
    2b1c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <CTRL_changePassword>
    2b20:	c1 cf       	rjmp	.-126    	; 0x2aa4 <main+0x144>

00002b22 <__udivmodsi4>:
    2b22:	a1 e2       	ldi	r26, 0x21	; 33
    2b24:	1a 2e       	mov	r1, r26
    2b26:	aa 1b       	sub	r26, r26
    2b28:	bb 1b       	sub	r27, r27
    2b2a:	fd 01       	movw	r30, r26
    2b2c:	0d c0       	rjmp	.+26     	; 0x2b48 <__udivmodsi4_ep>

00002b2e <__udivmodsi4_loop>:
    2b2e:	aa 1f       	adc	r26, r26
    2b30:	bb 1f       	adc	r27, r27
    2b32:	ee 1f       	adc	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	a2 17       	cp	r26, r18
    2b38:	b3 07       	cpc	r27, r19
    2b3a:	e4 07       	cpc	r30, r20
    2b3c:	f5 07       	cpc	r31, r21
    2b3e:	20 f0       	brcs	.+8      	; 0x2b48 <__udivmodsi4_ep>
    2b40:	a2 1b       	sub	r26, r18
    2b42:	b3 0b       	sbc	r27, r19
    2b44:	e4 0b       	sbc	r30, r20
    2b46:	f5 0b       	sbc	r31, r21

00002b48 <__udivmodsi4_ep>:
    2b48:	66 1f       	adc	r22, r22
    2b4a:	77 1f       	adc	r23, r23
    2b4c:	88 1f       	adc	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	1a 94       	dec	r1
    2b52:	69 f7       	brne	.-38     	; 0x2b2e <__udivmodsi4_loop>
    2b54:	60 95       	com	r22
    2b56:	70 95       	com	r23
    2b58:	80 95       	com	r24
    2b5a:	90 95       	com	r25
    2b5c:	9b 01       	movw	r18, r22
    2b5e:	ac 01       	movw	r20, r24
    2b60:	bd 01       	movw	r22, r26
    2b62:	cf 01       	movw	r24, r30
    2b64:	08 95       	ret

00002b66 <__prologue_saves__>:
    2b66:	2f 92       	push	r2
    2b68:	3f 92       	push	r3
    2b6a:	4f 92       	push	r4
    2b6c:	5f 92       	push	r5
    2b6e:	6f 92       	push	r6
    2b70:	7f 92       	push	r7
    2b72:	8f 92       	push	r8
    2b74:	9f 92       	push	r9
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	ca 1b       	sub	r28, r26
    2b90:	db 0b       	sbc	r29, r27
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	09 94       	ijmp

00002b9e <__epilogue_restores__>:
    2b9e:	2a 88       	ldd	r2, Y+18	; 0x12
    2ba0:	39 88       	ldd	r3, Y+17	; 0x11
    2ba2:	48 88       	ldd	r4, Y+16	; 0x10
    2ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2baa:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bac:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bae:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bb0:	b9 84       	ldd	r11, Y+9	; 0x09
    2bb2:	c8 84       	ldd	r12, Y+8	; 0x08
    2bb4:	df 80       	ldd	r13, Y+7	; 0x07
    2bb6:	ee 80       	ldd	r14, Y+6	; 0x06
    2bb8:	fd 80       	ldd	r15, Y+5	; 0x05
    2bba:	0c 81       	ldd	r16, Y+4	; 0x04
    2bbc:	1b 81       	ldd	r17, Y+3	; 0x03
    2bbe:	aa 81       	ldd	r26, Y+2	; 0x02
    2bc0:	b9 81       	ldd	r27, Y+1	; 0x01
    2bc2:	ce 0f       	add	r28, r30
    2bc4:	d1 1d       	adc	r29, r1
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	ed 01       	movw	r28, r26
    2bd2:	08 95       	ret

00002bd4 <_exit>:
    2bd4:	f8 94       	cli

00002bd6 <__stop_program>:
    2bd6:	ff cf       	rjmp	.-2      	; 0x2bd6 <__stop_program>
