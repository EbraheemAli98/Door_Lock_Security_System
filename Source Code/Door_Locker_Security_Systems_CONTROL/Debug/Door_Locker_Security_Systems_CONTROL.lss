
Door_Locker_Security_Systems_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000028f0  00002984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080008e  0080008e  000029b2  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002091  00000000  00000000  00005db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ac25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bdc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c58f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_6>
      1c:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <__vector_7>
      20:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 13 	call	0x2678	; 0x2678 <main>
      8a:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
#include "uart.h"
#include "../../LIBRARIES/comman_macros.h"


void UART_init(UART_ConfigType* uart_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01
	/****************** UCSRA Description ******************************
	 * set U2X=1 for double transmission speed.
	 *******************************************************************/
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ******************************************************************/
	UCSRB = (1<<TXEN)|(1<<RXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (uart_config->N_StopBits<<USBS)|(uart_config->frame_type<<1)|(uart_config->parity_type<<4)|(1<<URSEL);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	86 81       	ldd	r24, Z+6	; 0x06
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	28 2f       	mov	r18, r24
     b86:	eb 81       	ldd	r30, Y+3	; 0x03
     b88:	fc 81       	ldd	r31, Y+4	; 0x04
     b8a:	84 81       	ldd	r24, Z+4	; 0x04
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	28 2b       	or	r18, r24
     b96:	eb 81       	ldd	r30, Y+3	; 0x03
     b98:	fc 81       	ldd	r31, Y+4	; 0x04
     b9a:	85 81       	ldd	r24, Z+5	; 0x05
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	82 95       	swap	r24
     ba2:	92 95       	swap	r25
     ba4:	90 7f       	andi	r25, 0xF0	; 240
     ba6:	98 27       	eor	r25, r24
     ba8:	80 7f       	andi	r24, 0xF0	; 240
     baa:	98 27       	eor	r25, r24
     bac:	82 2b       	or	r24, r18
     bae:	80 68       	ori	r24, 0x80	; 128
     bb0:	8c 93       	st	X, r24

	/* *************************************
	 * Calculate the UBRR register value
	 * *************************************/
	ubrr_value = (uint16)(((F_CPU)/(uart_config->baud_rate*8UL))-1);
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
     bba:	a2 81       	ldd	r26, Z+2	; 0x02
     bbc:	b3 81       	ldd	r27, Z+3	; 0x03
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	aa 1f       	adc	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	aa 1f       	adc	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	9c 01       	movw	r18, r24
     bd8:	ad 01       	movw	r20, r26
     bda:	80 e4       	ldi	r24, 0x40	; 64
     bdc:	92 e4       	ldi	r25, 0x42	; 66
     bde:	af e0       	ldi	r26, 0x0F	; 15
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 1d 14 	call	0x283a	; 0x283a <__udivmodsi4>
     bea:	da 01       	movw	r26, r20
     bec:	c9 01       	movw	r24, r18
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01

	/****************************************************************************
	 * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 ****************************************************************************/
	UBRRH = (ubrr_value >> 8);
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	89 2f       	mov	r24, r25
     bfe:	99 27       	eor	r25, r25
     c00:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c02:	e9 e2       	ldi	r30, 0x29	; 41
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	80 83       	st	Z, r24
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <UART_sendByte>:

void UART_sendByte(uint8 data)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Poll until the USART data register empty flag is, to make sure the UDR has empty now and ready to transmit
	 *  a new data.
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     c24:	eb e2       	ldi	r30, 0x2B	; 43
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	80 72       	andi	r24, 0x20	; 32
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	b9 f3       	breq	.-18     	; 0xc24 <UART_sendByte+0xc>
	/*
	 * Put the required data in UDR register
	 * It also clear the UDRE flag as the UDR register is not empty now.
	 */
	UDR = data;
     c36:	ec e2       	ldi	r30, 0x2C	; 44
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	80 83       	st	Z, r24
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <UART_receiveByte>:


uint8 UART_receiveByte(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Poll until the receive complete flag is set, to make sure the UDR has an correctly unread data
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 23       	and	r24, r24
     c56:	dc f7       	brge	.-10     	; 0xc4e <UART_receiveByte+0x8>
	/* Read the unread data in the receive buffer register */
	return UDR;
     c58:	ec e2       	ldi	r30, 0x2C	; 44
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <UART_sendString>:

void UART_sendString(uint8 *Str)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <UART_sendString+0x6>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	0a c0       	rjmp	.+20     	; 0xc88 <UART_sendString+0x24>
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
     c74:	e9 81       	ldd	r30, Y+1	; 0x01
     c76:	fa 81       	ldd	r31, Y+2	; 0x02
     c78:	80 81       	ld	r24, Z
     c7a:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		Str++;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	9a 81       	ldd	r25, Y+2	; 0x02
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void UART_sendString(uint8 *Str)
{
	while(*Str != '\0')
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	89 f7       	brne	.-30     	; 0xc74 <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <UART_receiveString>:

void UART_receiveString(uint8* Str)
{
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_receiveString+0xa>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9b 83       	std	Y+3, r25	; 0x03
     cae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     cb0:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	8c 01       	movw	r16, r24
     cbe:	02 0f       	add	r16, r18
     cc0:	13 1f       	adc	r17, r19
     cc2:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24
     cca:	0f c0       	rjmp	.+30     	; 0xcea <UART_receiveString+0x4e>
	 * '$' here is Used by the programmer/user to refer to the end of the
	 * string received, because we can't send '\0'.
	 */
	while(Str[i] != '$')
	{
		i++;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	8f 5f       	subi	r24, 0xFF	; 255
     cd0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	9b 81       	ldd	r25, Y+3	; 0x03
     cdc:	8c 01       	movw	r16, r24
     cde:	02 0f       	add	r16, r18
     ce0:	13 1f       	adc	r17, r19
     ce2:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
     ce6:	f8 01       	movw	r30, r16
     ce8:	80 83       	st	Z, r24
	/*
	 * Receive the whole string until the MASTER is send '$'
	 * '$' here is Used by the programmer/user to refer to the end of the
	 * string received, because we can't send '\0'.
	 */
	while(Str[i] != '$')
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	fc 01       	movw	r30, r24
     cf6:	e2 0f       	add	r30, r18
     cf8:	f3 1f       	adc	r31, r19
     cfa:	80 81       	ld	r24, Z
     cfc:	84 32       	cpi	r24, 0x24	; 36
     cfe:	31 f7       	brne	.-52     	; 0xccc <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	/* After receiving the whole string plus the '$', replace the '$' with '\0' */
	Str[i] = '\0';
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	fc 01       	movw	r30, r24
     d0c:	e2 0f       	add	r30, r18
     d0e:	f3 1f       	adc	r31, r19
     d10:	10 82       	st	Z, r1

}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <TWI_init>:
#include <avr/io.h>
#include "twi.h"
#include "../../LIBRARIES/comman_macros.h"

void TWI_init(TWI_configType *a_Ptr)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <TWI_init+0x6>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9a 83       	std	Y+2, r25	; 0x02
     d2e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = a_Ptr->bitRate;
     d30:	a0 e2       	ldi	r26, 0x20	; 32
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e9 81       	ldd	r30, Y+1	; 0x01
     d36:	fa 81       	ldd	r31, Y+2	; 0x02
     d38:	80 81       	ld	r24, Z
     d3a:	8c 93       	st	X, r24
	TWSR = 0x00;
     d3c:	e1 e2       	ldi	r30, 0x21	; 33
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = a_Ptr->deviceAddress; // my address = 0x01 :)
     d42:	a2 e2       	ldi	r26, 0x22	; 34
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e9 81       	ldd	r30, Y+1	; 0x01
     d48:	fa 81       	ldd	r31, Y+2	; 0x02
     d4a:	81 81       	ldd	r24, Z+1	; 0x01
     d4c:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     d4e:	e6 e5       	ldi	r30, 0x56	; 86
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	84 e0       	ldi	r24, 0x04	; 4
     d54:	80 83       	st	Z, r24
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <TWI_start>:

void TWI_start(void)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     d68:	e6 e5       	ldi	r30, 0x56	; 86
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	84 ea       	ldi	r24, 0xA4	; 164
     d6e:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d70:	e6 e5       	ldi	r30, 0x56	; 86
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	dc f7       	brge	.-10     	; 0xd70 <TWI_start+0x10>
}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <TWI_stop>:

void TWI_stop(void)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     d88:	e6 e5       	ldi	r30, 0x56	; 86
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	84 e9       	ldi	r24, 0x94	; 148
     d8e:	80 83       	st	Z, r24
}
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	0f 92       	push	r0
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     da2:	e3 e2       	ldi	r30, 0x23	; 35
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     daa:	e6 e5       	ldi	r30, 0x56	; 86
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	84 e8       	ldi	r24, 0x84	; 132
     db0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     db2:	e6 e5       	ldi	r30, 0x56	; 86
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	88 23       	and	r24, r24
     dba:	dc f7       	brge	.-10     	; 0xdb2 <TWI_writeByte+0x1c>
}
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     dcc:	e6 e5       	ldi	r30, 0x56	; 86
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	84 ec       	ldi	r24, 0xC4	; 196
     dd2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dd4:	e6 e5       	ldi	r30, 0x56	; 86
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 23       	and	r24, r24
     ddc:	dc f7       	brge	.-10     	; 0xdd4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     dde:	e3 e2       	ldi	r30, 0x23	; 35
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     df2:	e6 e5       	ldi	r30, 0x56	; 86
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	84 e8       	ldi	r24, 0x84	; 132
     df8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dfa:	e6 e5       	ldi	r30, 0x56	; 86
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	dc f7       	brge	.-10     	; 0xdfa <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e04:	e3 e2       	ldi	r30, 0x23	; 35
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e1a:	e1 e2       	ldi	r30, 0x21	; 33
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	88 7f       	andi	r24, 0xF8	; 248
     e22:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <GPT_startTimer>:
/*******************************************************************************
 * 						GPT Functions' Definition
 *******************************************************************************/

void GPT_startTimer(TimerType Tx)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01
	if(Tx>=0 && Tx<=2)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	70 f4       	brcc	.+28     	; 0xe5c <GPT_startTimer+0x2e>
	{
		(*GPT_Init[Tx])(&GPT_ConfigStructObj);
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	fc 01       	movw	r30, r24
     e4c:	e8 59       	subi	r30, 0x98	; 152
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	01 90       	ld	r0, Z+
     e52:	f0 81       	ld	r31, Z
     e54:	e0 2d       	mov	r30, r0
     e56:	8e e6       	ldi	r24, 0x6E	; 110
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	09 95       	icall
	}
	else
	{
		/* Do Nothing... */
	}
}
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <GPT_setPrescaler>:
#ifdef GPT_SET_PRESCALER_API
/*--------------------------------------- GPT_setPrescaler ----------------------------------------------------------*/
void GPT_setPrescaler(TimerType Tx,GPT_PrescalerType value)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPT_setPrescaler+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPT_setPrescaler+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02
	if(Tx >= T0 && Tx <= T2)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	98 f5       	brcc	.+102    	; 0xee0 <GPT_setPrescaler+0x7c>
	{
		switch(Tx)
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3c 83       	std	Y+4, r19	; 0x04
     e82:	2b 83       	std	Y+3, r18	; 0x03
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	a1 f0       	breq	.+40     	; 0xeb6 <GPT_setPrescaler+0x52>
     e8e:	2b 81       	ldd	r18, Y+3	; 0x03
     e90:	3c 81       	ldd	r19, Y+4	; 0x04
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	d1 f0       	breq	.+52     	; 0xecc <GPT_setPrescaler+0x68>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	01 f5       	brne	.+64     	; 0xee0 <GPT_setPrescaler+0x7c>
		{
		case T0:
			TCCR0 = (TCCR0 & 0xF8)|(value);
     ea0:	a3 e5       	ldi	r26, 0x53	; 83
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e3 e5       	ldi	r30, 0x53	; 83
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	98 2f       	mov	r25, r24
     eac:	98 7f       	andi	r25, 0xF8	; 248
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	89 2b       	or	r24, r25
     eb2:	8c 93       	st	X, r24
     eb4:	15 c0       	rjmp	.+42     	; 0xee0 <GPT_setPrescaler+0x7c>
			break;
		case T1:
			TCCR1B = (TCCR1B & 0xF8) | (value);
     eb6:	ae e4       	ldi	r26, 0x4E	; 78
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	ee e4       	ldi	r30, 0x4E	; 78
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	98 2f       	mov	r25, r24
     ec2:	98 7f       	andi	r25, 0xF8	; 248
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	89 2b       	or	r24, r25
     ec8:	8c 93       	st	X, r24
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <GPT_setPrescaler+0x7c>
			break;
		case T2:
			TCCR2 = (TCCR2 & 0xF8)|(value);
     ecc:	a5 e4       	ldi	r26, 0x45	; 69
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e4       	ldi	r30, 0x45	; 69
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	98 2f       	mov	r25, r24
     ed8:	98 7f       	andi	r25, 0xF8	; 248
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	89 2b       	or	r24, r25
     ede:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <GPT_setInitValue>:
#endif
/*--------------------------------------- GPT_setInitValue ----------------------------------------------------------*/
#ifdef GPT_SET_INIT_VALUE_API
void GPT_setInitValue(TimerType Tx,TimerValueType value)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <GPT_setInitValue+0x6>
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <GPT_setInitValue+0x8>
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
     efe:	7b 83       	std	Y+3, r23	; 0x03
     f00:	6a 83       	std	Y+2, r22	; 0x02
	if(Tx>=T0 && Tx<=T2)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	18 f5       	brcc	.+70     	; 0xf4e <GPT_setInitValue+0x60>
	{
		switch(Tx)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3d 83       	std	Y+5, r19	; 0x05
     f10:	2c 83       	std	Y+4, r18	; 0x04
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	71 f0       	breq	.+28     	; 0xf38 <GPT_setInitValue+0x4a>
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	81 f0       	breq	.+32     	; 0xf46 <GPT_setInitValue+0x58>
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	81 f4       	brne	.+32     	; 0xf4e <GPT_setInitValue+0x60>
		{
		case T0:
			TCNT0 = value;
     f2e:	e2 e5       	ldi	r30, 0x52	; 82
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	80 83       	st	Z, r24
     f36:	0b c0       	rjmp	.+22     	; 0xf4e <GPT_setInitValue+0x60>
			break;
		case T1:
			TCNT1 = value;
     f38:	ec e4       	ldi	r30, 0x4C	; 76
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <GPT_setInitValue+0x60>
			break;
		case T2:
			TCNT2 = value;
     f46:	e4 e4       	ldi	r30, 0x44	; 68
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <GPT_setCompValue>:
#endif
/*--------------------------------------- GPT_setCompValue ----------------------------------------------------------*/
#ifdef GPT_SET_COMP_VALUE_API
void GPT_setCompValue(TimerType Tx,TimerValueType value)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <GPT_setCompValue+0x6>
     f64:	00 d0       	rcall	.+0      	; 0xf66 <GPT_setCompValue+0x8>
     f66:	0f 92       	push	r0
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	7b 83       	std	Y+3, r23	; 0x03
     f70:	6a 83       	std	Y+2, r22	; 0x02
	if(Tx>=T0 && Tx<=T2)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	18 f5       	brcc	.+70     	; 0xfbe <GPT_setCompValue+0x60>
	{
		switch(Tx)
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3d 83       	std	Y+5, r19	; 0x05
     f80:	2c 83       	std	Y+4, r18	; 0x04
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <GPT_setCompValue+0x4a>
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	81 f0       	breq	.+32     	; 0xfb6 <GPT_setCompValue+0x58>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	81 f4       	brne	.+32     	; 0xfbe <GPT_setCompValue+0x60>
		{
		case T0:
			OCR0 = value;
     f9e:	ec e5       	ldi	r30, 0x5C	; 92
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	80 83       	st	Z, r24
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <GPT_setCompValue+0x60>
			break;
		case T1:
			OCR1A = value;
     fa8:	ea e4       	ldi	r30, 0x4A	; 74
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	91 83       	std	Z+1, r25	; 0x01
     fb2:	80 83       	st	Z, r24
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <GPT_setCompValue+0x60>
			break;
		case T2:
			OCR2 = value;
     fb6:	e3 e4       	ldi	r30, 0x43	; 67
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	80 83       	st	Z, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <GPT_setMode>:
#endif
/*--------------------------------------- GPT_setMode ----------------------------------------------------------*/
#ifdef GPT_SET_MODE_API
void GPT_setMode(TimerType Tx,GPT_ModeType mode)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	2a 97       	sbiw	r28, 0x0a	; 10
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	08 f0       	brcs	.+2      	; 0xfee <GPT_setMode+0x20>
     fec:	59 c0       	rjmp	.+178    	; 0x10a0 <GPT_setMode+0xd2>
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	88 23       	and	r24, r24
     ff2:	21 f0       	breq	.+8      	; 0xffc <GPT_setMode+0x2e>
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	09 f0       	breq	.+2      	; 0xffc <GPT_setMode+0x2e>
     ffa:	52 c0       	rjmp	.+164    	; 0x10a0 <GPT_setMode+0xd2>
	{
		switch(Tx)
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3a 87       	std	Y+10, r19	; 0x0a
    1004:	29 87       	std	Y+9, r18	; 0x09
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	f9 f0       	breq	.+62     	; 0x104e <GPT_setMode+0x80>
    1010:	29 85       	ldd	r18, Y+9	; 0x09
    1012:	3a 85       	ldd	r19, Y+10	; 0x0a
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	79 f1       	breq	.+94     	; 0x1078 <GPT_setMode+0xaa>
    101a:	89 85       	ldd	r24, Y+9	; 0x09
    101c:	9a 85       	ldd	r25, Y+10	; 0x0a
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	09 f0       	breq	.+2      	; 0x1024 <GPT_setMode+0x56>
    1022:	3e c0       	rjmp	.+124    	; 0x10a0 <GPT_setMode+0xd2>
		{
		case T0:
			(mode == NORMAL)? (TCCR0 &=~ (1<<WGM01)):(TCCR0 |= (1<<WGM01));
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	88 23       	and	r24, r24
    1028:	49 f4       	brne	.+18     	; 0x103c <GPT_setMode+0x6e>
    102a:	a3 e5       	ldi	r26, 0x53	; 83
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e3 e5       	ldi	r30, 0x53	; 83
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	8c 93       	st	X, r24
    1038:	9c 91       	ld	r25, X
    103a:	32 c0       	rjmp	.+100    	; 0x10a0 <GPT_setMode+0xd2>
    103c:	a3 e5       	ldi	r26, 0x53	; 83
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e3 e5       	ldi	r30, 0x53	; 83
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	8c 93       	st	X, r24
    104a:	2c 91       	ld	r18, X
    104c:	29 c0       	rjmp	.+82     	; 0x10a0 <GPT_setMode+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? (TCCR1B &= ~(1<<WGM12) & ~(1<<WGM13)):(TCCR1B |= (1<<WGM12)| (1<<WGM13));

#else
			(mode == NORMAL)? (TCCR1B &=~ (1<<WGM12)):(TCCR1B |= (1<<WGM12));
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 23       	and	r24, r24
    1052:	49 f4       	brne	.+18     	; 0x1066 <GPT_setMode+0x98>
    1054:	ae e4       	ldi	r26, 0x4E	; 78
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ee e4       	ldi	r30, 0x4E	; 78
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	8c 93       	st	X, r24
    1062:	3c 91       	ld	r19, X
    1064:	1d c0       	rjmp	.+58     	; 0x10a0 <GPT_setMode+0xd2>
    1066:	ae e4       	ldi	r26, 0x4E	; 78
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ee e4       	ldi	r30, 0x4E	; 78
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	8c 93       	st	X, r24
    1074:	8c 91       	ld	r24, X
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <GPT_setMode+0xd2>

#endif
			break;
		case T2:
			(mode == NORMAL)? (TCCR0 &=~ (1<<WGM21)):(TCCR0 |= (1<<WGM21));
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	88 23       	and	r24, r24
    107c:	49 f4       	brne	.+18     	; 0x1090 <GPT_setMode+0xc2>
    107e:	a3 e5       	ldi	r26, 0x53	; 83
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e3 e5       	ldi	r30, 0x53	; 83
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	8c 93       	st	X, r24
    108c:	9c 91       	ld	r25, X
    108e:	08 c0       	rjmp	.+16     	; 0x10a0 <GPT_setMode+0xd2>
    1090:	a3 e5       	ldi	r26, 0x53	; 83
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e3 e5       	ldi	r30, 0x53	; 83
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 60       	ori	r24, 0x08	; 8
    109c:	8c 93       	st	X, r24
    109e:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
    10a0:	2a 96       	adiw	r28, 0x0a	; 10
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <GPT_stopTimer>:
#endif
/*--------------------------------------- GPT_stopTimer ----------------------------------------------------------*/
void GPT_stopTimer(TimerType Tx)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPT_stopTimer+0x6>
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	89 83       	std	Y+1, r24	; 0x01
	switch(Tx)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3b 83       	std	Y+3, r19	; 0x03
    10c8:	2a 83       	std	Y+2, r18	; 0x02
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	69 f0       	breq	.+26     	; 0x10ee <GPT_stopTimer+0x3c>
    10d4:	2a 81       	ldd	r18, Y+2	; 0x02
    10d6:	3b 81       	ldd	r19, Y+3	; 0x03
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	61 f0       	breq	.+24     	; 0x10f6 <GPT_stopTimer+0x44>
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	59 f4       	brne	.+22     	; 0x10fc <GPT_stopTimer+0x4a>
	{
	case T0:
		TCCR0 = 0;
    10e6:	e3 e5       	ldi	r30, 0x53	; 83
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 82       	st	Z, r1
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <GPT_stopTimer+0x4a>
		break;
	case T1:
		TCCR1B = 0;
    10ee:	ee e4       	ldi	r30, 0x4E	; 78
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	10 82       	st	Z, r1
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <GPT_stopTimer+0x4a>
		break;
	case T2:
		TCCR2 = 0;
    10f6:	e5 e4       	ldi	r30, 0x45	; 69
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	10 82       	st	Z, r1
		break;
	default:
		/* Do Nothing...*/
		break;
	}
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <GPT_InitTimer0>:

/*------------------------------------------ GPT_InitTimer0 ------------------------------------------------------*/
static void GPT_InitTimer0(const GPT_ConfigType* Config_Ptr)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	00 d0       	rcall	.+0      	; 0x110e <GPT_InitTimer0+0x6>
    110e:	00 d0       	rcall	.+0      	; 0x1110 <GPT_InitTimer0+0x8>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	09 f4       	brne	.+2      	; 0x1122 <GPT_InitTimer0+0x1a>
    1120:	48 c0       	rjmp	.+144    	; 0x11b2 <GPT_InitTimer0+0xaa>
	{
		/* Set an Initial Value for Timer0 */
		TCNT0 = Config_Ptr->GPT_Config[T0].TimerInitValue;
    1122:	a2 e5       	ldi	r26, 0x52	; 82
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e9 81       	ldd	r30, Y+1	; 0x01
    1128:	fa 81       	ldd	r31, Y+2	; 0x02
    112a:	84 81       	ldd	r24, Z+4	; 0x04
    112c:	95 81       	ldd	r25, Z+5	; 0x05
    112e:	8c 93       	st	X, r24
		switch(Config_Ptr->GPT_Config[T0].mode)
    1130:	e9 81       	ldd	r30, Y+1	; 0x01
    1132:	fa 81       	ldd	r31, Y+2	; 0x02
    1134:	81 81       	ldd	r24, Z+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3c 83       	std	Y+4, r19	; 0x04
    113c:	2b 83       	std	Y+3, r18	; 0x03
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	31 f0       	breq	.+12     	; 0x1152 <GPT_InitTimer0+0x4a>
    1146:	2b 81       	ldd	r18, Y+3	; 0x03
    1148:	3c 81       	ldd	r19, Y+4	; 0x04
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	79 f0       	breq	.+30     	; 0x116e <GPT_InitTimer0+0x66>
    1150:	30 c0       	rjmp	.+96     	; 0x11b2 <GPT_InitTimer0+0xaa>
			 * |FOC0 | WGM00 | COM01 | COM00 | WGM01 | CS02 | CS01 | CS00|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   0   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR0 = (1<<FOC0)|((TCCR0 & 0xF8)|(Config_Ptr->GPT_Config[T0].prescaler));
    1152:	a3 e5       	ldi	r26, 0x53	; 83
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e3 e5       	ldi	r30, 0x53	; 83
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	98 2f       	mov	r25, r24
    115e:	98 7f       	andi	r25, 0xF8	; 248
    1160:	e9 81       	ldd	r30, Y+1	; 0x01
    1162:	fa 81       	ldd	r31, Y+2	; 0x02
    1164:	82 81       	ldd	r24, Z+2	; 0x02
    1166:	89 2b       	or	r24, r25
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	8c 93       	st	X, r24
    116c:	22 c0       	rjmp	.+68     	; 0x11b2 <GPT_InitTimer0+0xaa>
			break;
		/*=========================================== CTC Mode ========================================================*/
		case OUTPUT_COMPARE:
			/* Initialize OCR0 = TOP ,for CTC Mode */
			OCR0 = Config_Ptr->GPT_Config[T0].TimerCompValue;
    116e:	ac e5       	ldi	r26, 0x5C	; 92
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	86 81       	ldd	r24, Z+6	; 0x06
    1178:	97 81       	ldd	r25, Z+7	; 0x07
    117a:	8c 93       	st	X, r24
			 * |FOC0 | WGM00 | COM01 | COM00 | WGM01 | CS02 | CS01 | CS00|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   1   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR0 = (1<<FOC0)|(1<<WGM01)|((TCCR0 & 0xF8)|(Config_Ptr->GPT_Config[T0].prescaler))| (0x30 & (Config_Ptr->GPT_Config[T0].CTC_waveForm<<4));
    117c:	a3 e5       	ldi	r26, 0x53	; 83
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e3 e5       	ldi	r30, 0x53	; 83
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	98 2f       	mov	r25, r24
    1188:	98 7f       	andi	r25, 0xF8	; 248
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	89 2b       	or	r24, r25
    1192:	28 2f       	mov	r18, r24
    1194:	28 68       	ori	r18, 0x88	; 136
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	83 81       	ldd	r24, Z+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	82 95       	swap	r24
    11a2:	92 95       	swap	r25
    11a4:	90 7f       	andi	r25, 0xF0	; 240
    11a6:	98 27       	eor	r25, r24
    11a8:	80 7f       	andi	r24, 0xF0	; 240
    11aa:	98 27       	eor	r25, r24
    11ac:	80 73       	andi	r24, 0x30	; 48
    11ae:	82 2b       	or	r24, r18
    11b0:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <GPT_InitTimer1>:

/*------------------------------------------ GPT_InitTimer1 ------------------------------------------------------*/

static void GPT_InitTimer1(const GPT_ConfigType* Config_Ptr)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <GPT_InitTimer1+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <GPT_InitTimer1+0x8>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	9a 83       	std	Y+2, r25	; 0x02
    11ce:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	09 f4       	brne	.+2      	; 0x11da <GPT_InitTimer1+0x1a>
    11d8:	53 c0       	rjmp	.+166    	; 0x1280 <GPT_InitTimer1+0xc0>
	{
		/* Set an Initial Value for Timer1 */
		TCNT1 = Config_Ptr->GPT_Config[T1].TimerInitValue;
    11da:	ac e4       	ldi	r26, 0x4C	; 76
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	84 85       	ldd	r24, Z+12	; 0x0c
    11e4:	95 85       	ldd	r25, Z+13	; 0x0d
    11e6:	11 96       	adiw	r26, 0x01	; 1
    11e8:	9c 93       	st	X, r25
    11ea:	8e 93       	st	-X, r24
		switch(Config_Ptr->GPT_Config[T1].mode)
    11ec:	e9 81       	ldd	r30, Y+1	; 0x01
    11ee:	fa 81       	ldd	r31, Y+2	; 0x02
    11f0:	81 85       	ldd	r24, Z+9	; 0x09
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3c 83       	std	Y+4, r19	; 0x04
    11f8:	2b 83       	std	Y+3, r18	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	31 f0       	breq	.+12     	; 0x120e <GPT_InitTimer1+0x4e>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	91 f0       	breq	.+36     	; 0x1230 <GPT_InitTimer1+0x70>
    120c:	39 c0       	rjmp	.+114    	; 0x1280 <GPT_InitTimer1+0xc0>
		{
		/*================================================= Normal Mode ===============================================*/
		case NORMAL:
			/* DISABLE PWM for Normal mode */
			TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    120e:	ef e4       	ldi	r30, 0x4F	; 79
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8c e0       	ldi	r24, 0x0C	; 12
    1214:	80 83       	st	Z, r24
			/* Select the prescaler for Normal mode */
			TCCR1B = (TCCR1B & 0xF8)|(Config_Ptr->GPT_Config[T1].prescaler);
    1216:	ae e4       	ldi	r26, 0x4E	; 78
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ee e4       	ldi	r30, 0x4E	; 78
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	98 2f       	mov	r25, r24
    1222:	98 7f       	andi	r25, 0xF8	; 248
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	82 85       	ldd	r24, Z+10	; 0x0a
    122a:	89 2b       	or	r24, r25
    122c:	8c 93       	st	X, r24
    122e:	28 c0       	rjmp	.+80     	; 0x1280 <GPT_InitTimer1+0xc0>
			 */
			TCCR1B = (1<<WGM12)| (1<<WGM13)| ((TCCR1B & 0xF8) | (Config_Ptr->GPT_Config[T1].prescaler));

#elif(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_4)
			/* Initialize OCR1A = TOP ,for CTC Mode number (4)*/
			OCR1A = Config_Ptr->GPT_Config[T1].TimerCompValue;
    1230:	aa e4       	ldi	r26, 0x4A	; 74
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e9 81       	ldd	r30, Y+1	; 0x01
    1236:	fa 81       	ldd	r31, Y+2	; 0x02
    1238:	86 85       	ldd	r24, Z+14	; 0x0e
    123a:	97 85       	ldd	r25, Z+15	; 0x0f
    123c:	11 96       	adiw	r26, 0x01	; 1
    123e:	9c 93       	st	X, r25
    1240:	8e 93       	st	-X, r24
			 * |COM1A1|COM1A0|COM1B1|COM1B0|FOC1A|FOC1B|WGM11|WGM10|
			 * -----------------------------------------------------
			 * |CTC_waveForm |  0   |  0   |  1  |  1  |  0  |  0  |
			 * -----------------------------------------------------
			 */
			TCCR1A = (1<<FOC1A)|(1<<FOC1B)|(Config_Ptr->GPT_Config[T1].CTC_waveForm<<6);
    1242:	af e4       	ldi	r26, 0x4F	; 79
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e9 81       	ldd	r30, Y+1	; 0x01
    1248:	fa 81       	ldd	r31, Y+2	; 0x02
    124a:	83 85       	ldd	r24, Z+11	; 0x0b
    124c:	88 2f       	mov	r24, r24
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	00 24       	eor	r0, r0
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	07 94       	ror	r0
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	07 94       	ror	r0
    125e:	98 2f       	mov	r25, r24
    1260:	80 2d       	mov	r24, r0
    1262:	8c 60       	ori	r24, 0x0C	; 12
    1264:	8c 93       	st	X, r24
			 * |ICNC1 | ICES1 |  -  | WGM13 | WGM12 | CS12 | CS11 | CS10|
			 * ----------------------------------------------------------
			 * |  0   |   0   |  -  |   0   |   1   |  prescaler_value  |
			 * ----------------------------------------------------------
			 */
			TCCR1B = (1<<WGM12) | ((TCCR1B & 0xF8) | (Config_Ptr->GPT_Config[T1].prescaler));
    1266:	ae e4       	ldi	r26, 0x4E	; 78
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	ee e4       	ldi	r30, 0x4E	; 78
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	98 2f       	mov	r25, r24
    1272:	98 7f       	andi	r25, 0xF8	; 248
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	82 85       	ldd	r24, Z+10	; 0x0a
    127a:	89 2b       	or	r24, r25
    127c:	88 60       	ori	r24, 0x08	; 8
    127e:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <GPT_InitTimer2>:

/*------------------------------------------ GPT_InitTimer2 ------------------------------------------------------*/
static void GPT_InitTimer2(const GPT_ConfigType* Config_Ptr)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <GPT_InitTimer2+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <GPT_InitTimer2+0x8>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	9a 83       	std	Y+2, r25	; 0x02
    129c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <GPT_InitTimer2+0x1a>
    12a6:	48 c0       	rjmp	.+144    	; 0x1338 <GPT_InitTimer2+0xaa>
	{
		/* Set an Initial Value for Timer0 */
		TCNT2 = Config_Ptr->GPT_Config[T2].TimerInitValue;
    12a8:	a4 e4       	ldi	r26, 0x44	; 68
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e9 81       	ldd	r30, Y+1	; 0x01
    12ae:	fa 81       	ldd	r31, Y+2	; 0x02
    12b0:	84 89       	ldd	r24, Z+20	; 0x14
    12b2:	95 89       	ldd	r25, Z+21	; 0x15
    12b4:	8c 93       	st	X, r24
		switch(Config_Ptr->GPT_Config[T2].mode)
    12b6:	e9 81       	ldd	r30, Y+1	; 0x01
    12b8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ba:	81 89       	ldd	r24, Z+17	; 0x11
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3c 83       	std	Y+4, r19	; 0x04
    12c2:	2b 83       	std	Y+3, r18	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <GPT_InitTimer2+0x4a>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	22 30       	cpi	r18, 0x02	; 2
    12d2:	31 05       	cpc	r19, r1
    12d4:	79 f0       	breq	.+30     	; 0x12f4 <GPT_InitTimer2+0x66>
    12d6:	30 c0       	rjmp	.+96     	; 0x1338 <GPT_InitTimer2+0xaa>
			 * |FOC2 | WGM20 | COM21 | COM20 | WGM21 | CS22 | CS21 | CS20|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   0   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR2 = (1<<FOC2)|((TCCR2 & 0xF8)|(Config_Ptr->GPT_Config[T2].prescaler));
    12d8:	a5 e4       	ldi	r26, 0x45	; 69
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e4       	ldi	r30, 0x45	; 69
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	98 2f       	mov	r25, r24
    12e4:	98 7f       	andi	r25, 0xF8	; 248
    12e6:	e9 81       	ldd	r30, Y+1	; 0x01
    12e8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ea:	82 89       	ldd	r24, Z+18	; 0x12
    12ec:	89 2b       	or	r24, r25
    12ee:	80 68       	ori	r24, 0x80	; 128
    12f0:	8c 93       	st	X, r24
    12f2:	22 c0       	rjmp	.+68     	; 0x1338 <GPT_InitTimer2+0xaa>
			break;
		/*=========================================== CTC Mode ========================================================*/
		case OUTPUT_COMPARE:

			/* Initialize OCR0 = TOP ,for CTC Mode */
			OCR2 = Config_Ptr->GPT_Config[T2].TimerCompValue;
    12f4:	a3 e4       	ldi	r26, 0x43	; 67
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	86 89       	ldd	r24, Z+22	; 0x16
    12fe:	97 89       	ldd	r25, Z+23	; 0x17
    1300:	8c 93       	st	X, r24
			 * |FOC2 | WGM20 | COM21 | COM20 | WGM21 | CS22 | CS21 | CS20|
			 * -----------------------------------------------------------
			 * |  1  |   0   |   - 	 |   -   |   1   |  prescaler_value  |
			 * -----------------------------------------------------------
			 */
			TCCR2 = (1<<FOC2)|(1<<WGM21)|((TCCR2 & 0xF8)|(Config_Ptr->GPT_Config[T2].prescaler))| (0x30 & (Config_Ptr->GPT_Config[T2].CTC_waveForm <<4));
    1302:	a5 e4       	ldi	r26, 0x45	; 69
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e4       	ldi	r30, 0x45	; 69
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	98 2f       	mov	r25, r24
    130e:	98 7f       	andi	r25, 0xF8	; 248
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	82 89       	ldd	r24, Z+18	; 0x12
    1316:	89 2b       	or	r24, r25
    1318:	28 2f       	mov	r18, r24
    131a:	28 68       	ori	r18, 0x88	; 136
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	83 89       	ldd	r24, Z+19	; 0x13
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	82 95       	swap	r24
    1328:	92 95       	swap	r25
    132a:	90 7f       	andi	r25, 0xF0	; 240
    132c:	98 27       	eor	r25, r24
    132e:	80 7f       	andi	r24, 0xF0	; 240
    1330:	98 27       	eor	r25, r24
    1332:	80 73       	andi	r24, 0x30	; 48
    1334:	82 2b       	or	r24, r18
    1336:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing..*/
	}
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <GPT_enableNotification>:
/*******************************************************************************
 * 						GPT Enable/Disable Notification Functions
 *******************************************************************************/
void GPT_enableNotification(TimerType Tx,GPT_ModeType mode)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	2a 97       	sbiw	r28, 0x0a	; 10
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	08 f0       	brcs	.+2      	; 0x1366 <GPT_enableNotification+0x20>
    1364:	59 c0       	rjmp	.+178    	; 0x1418 <GPT_enableNotification+0xd2>
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	88 23       	and	r24, r24
    136a:	21 f0       	breq	.+8      	; 0x1374 <GPT_enableNotification+0x2e>
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	09 f0       	breq	.+2      	; 0x1374 <GPT_enableNotification+0x2e>
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <GPT_enableNotification+0xd2>
	{
		switch(Tx)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3a 87       	std	Y+10, r19	; 0x0a
    137c:	29 87       	std	Y+9, r18	; 0x09
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	f9 f0       	breq	.+62     	; 0x13c6 <GPT_enableNotification+0x80>
    1388:	29 85       	ldd	r18, Y+9	; 0x09
    138a:	3a 85       	ldd	r19, Y+10	; 0x0a
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	79 f1       	breq	.+94     	; 0x13f0 <GPT_enableNotification+0xaa>
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    1394:	9a 85       	ldd	r25, Y+10	; 0x0a
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	09 f0       	breq	.+2      	; 0x139c <GPT_enableNotification+0x56>
    139a:	3e c0       	rjmp	.+124    	; 0x1418 <GPT_enableNotification+0xd2>
		{
		case T0:
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE0):SET_BIT(TIMSK,OCIE0);
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	88 23       	and	r24, r24
    13a0:	49 f4       	brne	.+18     	; 0x13b4 <GPT_enableNotification+0x6e>
    13a2:	a9 e5       	ldi	r26, 0x59	; 89
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e9 e5       	ldi	r30, 0x59	; 89
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	81 60       	ori	r24, 0x01	; 1
    13ae:	8c 93       	st	X, r24
    13b0:	9c 91       	ld	r25, X
    13b2:	32 c0       	rjmp	.+100    	; 0x1418 <GPT_enableNotification+0xd2>
    13b4:	a9 e5       	ldi	r26, 0x59	; 89
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e9 e5       	ldi	r30, 0x59	; 89
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	8c 93       	st	X, r24
    13c2:	2c 91       	ld	r18, X
    13c4:	29 c0       	rjmp	.+82     	; 0x1418 <GPT_enableNotification+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE1):SET_BIT(TIMSK,TICIE1);

#else
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE1):SET_BIT(TIMSK,OCIE1A);
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	88 23       	and	r24, r24
    13ca:	49 f4       	brne	.+18     	; 0x13de <GPT_enableNotification+0x98>
    13cc:	a9 e5       	ldi	r26, 0x59	; 89
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e9 e5       	ldi	r30, 0x59	; 89
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	84 60       	ori	r24, 0x04	; 4
    13d8:	8c 93       	st	X, r24
    13da:	3c 91       	ld	r19, X
    13dc:	1d c0       	rjmp	.+58     	; 0x1418 <GPT_enableNotification+0xd2>
    13de:	a9 e5       	ldi	r26, 0x59	; 89
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 e5       	ldi	r30, 0x59	; 89
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 61       	ori	r24, 0x10	; 16
    13ea:	8c 93       	st	X, r24
    13ec:	8c 91       	ld	r24, X
    13ee:	14 c0       	rjmp	.+40     	; 0x1418 <GPT_enableNotification+0xd2>

#endif
			break;
		case T2:
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE2):SET_BIT(TIMSK,OCIE2);
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 23       	and	r24, r24
    13f4:	49 f4       	brne	.+18     	; 0x1408 <GPT_enableNotification+0xc2>
    13f6:	a9 e5       	ldi	r26, 0x59	; 89
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e9 e5       	ldi	r30, 0x59	; 89
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 64       	ori	r24, 0x40	; 64
    1402:	8c 93       	st	X, r24
    1404:	9c 91       	ld	r25, X
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <GPT_enableNotification+0xd2>
    1408:	a9 e5       	ldi	r26, 0x59	; 89
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e9 e5       	ldi	r30, 0x59	; 89
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 68       	ori	r24, 0x80	; 128
    1414:	8c 93       	st	X, r24
    1416:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
    1418:	2a 96       	adiw	r28, 0x0a	; 10
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <GPT_disableNotification>:
/*------------------------------------------ GPT_disableNotification -------------------------------------------*/
void GPT_disableNotification(TimerType Tx,GPT_ModeType mode)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	2a 97       	sbiw	r28, 0x0a	; 10
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	08 f0       	brcs	.+2      	; 0x144a <GPT_disableNotification+0x20>
    1448:	59 c0       	rjmp	.+178    	; 0x14fc <GPT_disableNotification+0xd2>
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	88 23       	and	r24, r24
    144e:	21 f0       	breq	.+8      	; 0x1458 <GPT_disableNotification+0x2e>
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	09 f0       	breq	.+2      	; 0x1458 <GPT_disableNotification+0x2e>
    1456:	52 c0       	rjmp	.+164    	; 0x14fc <GPT_disableNotification+0xd2>
	{
		switch(Tx)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3a 87       	std	Y+10, r19	; 0x0a
    1460:	29 87       	std	Y+9, r18	; 0x09
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	f9 f0       	breq	.+62     	; 0x14aa <GPT_disableNotification+0x80>
    146c:	29 85       	ldd	r18, Y+9	; 0x09
    146e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	79 f1       	breq	.+94     	; 0x14d4 <GPT_disableNotification+0xaa>
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	09 f0       	breq	.+2      	; 0x1480 <GPT_disableNotification+0x56>
    147e:	3e c0       	rjmp	.+124    	; 0x14fc <GPT_disableNotification+0xd2>
		{
		case T0:
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE0):CLEAR_BIT(TIMSK,OCIE0);
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	88 23       	and	r24, r24
    1484:	49 f4       	brne	.+18     	; 0x1498 <GPT_disableNotification+0x6e>
    1486:	a9 e5       	ldi	r26, 0x59	; 89
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e9 e5       	ldi	r30, 0x59	; 89
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	8c 93       	st	X, r24
    1494:	9c 91       	ld	r25, X
    1496:	32 c0       	rjmp	.+100    	; 0x14fc <GPT_disableNotification+0xd2>
    1498:	a9 e5       	ldi	r26, 0x59	; 89
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e9 e5       	ldi	r30, 0x59	; 89
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8d 7f       	andi	r24, 0xFD	; 253
    14a4:	8c 93       	st	X, r24
    14a6:	2c 91       	ld	r18, X
    14a8:	29 c0       	rjmp	.+82     	; 0x14fc <GPT_disableNotification+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE1):CLEAR_BIT(TIMSK,TICIE1);
			break;
#else
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE1):CLEAR_BIT(TIMSK,OCIE1A);
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	88 23       	and	r24, r24
    14ae:	49 f4       	brne	.+18     	; 0x14c2 <GPT_disableNotification+0x98>
    14b0:	a9 e5       	ldi	r26, 0x59	; 89
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e9 e5       	ldi	r30, 0x59	; 89
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	8b 7f       	andi	r24, 0xFB	; 251
    14bc:	8c 93       	st	X, r24
    14be:	3c 91       	ld	r19, X
    14c0:	1d c0       	rjmp	.+58     	; 0x14fc <GPT_disableNotification+0xd2>
    14c2:	a9 e5       	ldi	r26, 0x59	; 89
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 e5       	ldi	r30, 0x59	; 89
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 7e       	andi	r24, 0xEF	; 239
    14ce:	8c 93       	st	X, r24
    14d0:	8c 91       	ld	r24, X
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <GPT_disableNotification+0xd2>
			break;
#endif
		case T2:
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE2):CLEAR_BIT(TIMSK,OCIE2);
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 23       	and	r24, r24
    14d8:	49 f4       	brne	.+18     	; 0x14ec <GPT_disableNotification+0xc2>
    14da:	a9 e5       	ldi	r26, 0x59	; 89
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 e5       	ldi	r30, 0x59	; 89
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	8f 7b       	andi	r24, 0xBF	; 191
    14e6:	8c 93       	st	X, r24
    14e8:	9c 91       	ld	r25, X
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <GPT_disableNotification+0xd2>
    14ec:	a9 e5       	ldi	r26, 0x59	; 89
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e9 e5       	ldi	r30, 0x59	; 89
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8f 77       	andi	r24, 0x7F	; 127
    14f8:	8c 93       	st	X, r24
    14fa:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
    14fc:	2a 96       	adiw	r28, 0x0a	; 10
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <GPT_T1_setCallBack>:
}
#endif
/*--------------------------------------------------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
void GPT_T1_setCallBack(void (*a_Fun_Ptr)(void))
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <GPT_T1_setCallBack+0x6>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBack_Ptr = a_Fun_Ptr;
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	90 93 8f 00 	sts	0x008F, r25
    1524:	80 93 8e 00 	sts	0x008E, r24
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <__vector_8>:
}
#endif
/*-------------------------- TIMER1 ISR -------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
ISR(TIMER1_OVF_vect)
{
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	2f 93       	push	r18
    153e:	3f 93       	push	r19
    1540:	4f 93       	push	r20
    1542:	5f 93       	push	r21
    1544:	6f 93       	push	r22
    1546:	7f 93       	push	r23
    1548:	8f 93       	push	r24
    154a:	9f 93       	push	r25
    154c:	af 93       	push	r26
    154e:	bf 93       	push	r27
    1550:	ef 93       	push	r30
    1552:	ff 93       	push	r31
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    155c:	80 91 8e 00 	lds	r24, 0x008E
    1560:	90 91 8f 00 	lds	r25, 0x008F
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	29 f0       	breq	.+10     	; 0x1572 <__vector_8+0x40>
		(*g_Timer1_callBack_Ptr)();
    1568:	e0 91 8e 00 	lds	r30, 0x008E
    156c:	f0 91 8f 00 	lds	r31, 0x008F
    1570:	09 95       	icall
}
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	ff 91       	pop	r31
    1578:	ef 91       	pop	r30
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	7f 91       	pop	r23
    1584:	6f 91       	pop	r22
    1586:	5f 91       	pop	r21
    1588:	4f 91       	pop	r20
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    15c2:	80 91 8e 00 	lds	r24, 0x008E
    15c6:	90 91 8f 00 	lds	r25, 0x008F
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	29 f0       	breq	.+10     	; 0x15d8 <__vector_6+0x40>
		(*g_Timer1_callBack_Ptr)();
    15ce:	e0 91 8e 00 	lds	r30, 0x008E
    15d2:	f0 91 8f 00 	lds	r31, 0x008F
    15d6:	09 95       	icall
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	ff 91       	pop	r31
    15de:	ef 91       	pop	r30
    15e0:	bf 91       	pop	r27
    15e2:	af 91       	pop	r26
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	7f 91       	pop	r23
    15ea:	6f 91       	pop	r22
    15ec:	5f 91       	pop	r21
    15ee:	4f 91       	pop	r20
    15f0:	3f 91       	pop	r19
    15f2:	2f 91       	pop	r18
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	0f 90       	pop	r0
    15fa:	1f 90       	pop	r1
    15fc:	18 95       	reti

000015fe <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    15fe:	1f 92       	push	r1
    1600:	0f 92       	push	r0
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	0f 92       	push	r0
    1606:	11 24       	eor	r1, r1
    1608:	2f 93       	push	r18
    160a:	3f 93       	push	r19
    160c:	4f 93       	push	r20
    160e:	5f 93       	push	r21
    1610:	6f 93       	push	r22
    1612:	7f 93       	push	r23
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	af 93       	push	r26
    161a:	bf 93       	push	r27
    161c:	ef 93       	push	r30
    161e:	ff 93       	push	r31
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    1628:	80 91 8e 00 	lds	r24, 0x008E
    162c:	90 91 8f 00 	lds	r25, 0x008F
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	29 f0       	breq	.+10     	; 0x163e <__vector_7+0x40>
		(*g_Timer1_callBack_Ptr)();
    1634:	e0 91 8e 00 	lds	r30, 0x008E
    1638:	f0 91 8f 00 	lds	r31, 0x008F
    163c:	09 95       	icall
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	0f 90       	pop	r0
    1660:	1f 90       	pop	r1
    1662:	18 95       	reti

00001664 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 ----------------------------------------------------------------------------------------------*/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num, GPIO_PinDirectionType direction)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <GPIO_setupPinDirection+0x6>
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_setupPinDirection+0x8>
    166c:	0f 92       	push	r0
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	89 83       	std	Y+1, r24	; 0x01
    1674:	6a 83       	std	Y+2, r22	; 0x02
    1676:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 30       	cpi	r24, 0x08	; 8
    167c:	08 f0       	brcs	.+2      	; 0x1680 <GPIO_setupPinDirection+0x1c>
    167e:	d5 c0       	rjmp	.+426    	; 0x182a <GPIO_setupPinDirection+0x1c6>
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	84 30       	cpi	r24, 0x04	; 4
    1684:	08 f0       	brcs	.+2      	; 0x1688 <GPIO_setupPinDirection+0x24>
    1686:	d1 c0       	rjmp	.+418    	; 0x182a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	3d 83       	std	Y+5, r19	; 0x05
    1690:	2c 83       	std	Y+4, r18	; 0x04
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	09 f4       	brne	.+2      	; 0x169e <GPIO_setupPinDirection+0x3a>
    169c:	43 c0       	rjmp	.+134    	; 0x1724 <GPIO_setupPinDirection+0xc0>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	2c f4       	brge	.+10     	; 0x16b2 <GPIO_setupPinDirection+0x4e>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	71 f0       	breq	.+28     	; 0x16cc <GPIO_setupPinDirection+0x68>
    16b0:	bc c0       	rjmp	.+376    	; 0x182a <GPIO_setupPinDirection+0x1c6>
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <GPIO_setupPinDirection+0x5a>
    16bc:	5f c0       	rjmp	.+190    	; 0x177c <GPIO_setupPinDirection+0x118>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <GPIO_setupPinDirection+0x66>
    16c8:	85 c0       	rjmp	.+266    	; 0x17d4 <GPIO_setupPinDirection+0x170>
    16ca:	af c0       	rjmp	.+350    	; 0x182a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	a1 f4       	brne	.+40     	; 0x16fa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16d2:	aa e3       	ldi	r26, 0x3A	; 58
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ea e3       	ldi	r30, 0x3A	; 58
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <GPIO_setupPinDirection+0x8c>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <GPIO_setupPinDirection+0x88>
    16f4:	84 2b       	or	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	98 c0       	rjmp	.+304    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16fa:	aa e3       	ldi	r26, 0x3A	; 58
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ea e3       	ldi	r30, 0x3A	; 58
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <GPIO_setupPinDirection+0xb4>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <GPIO_setupPinDirection+0xb0>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	83 c0       	rjmp	.+262    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	a1 f4       	brne	.+40     	; 0x1752 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    172a:	a7 e3       	ldi	r26, 0x37	; 55
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e7 e3       	ldi	r30, 0x37	; 55
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	48 2f       	mov	r20, r24
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	02 2e       	mov	r0, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_setupPinDirection+0xe4>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_setupPinDirection+0xe0>
    174c:	84 2b       	or	r24, r20
    174e:	8c 93       	st	X, r24
    1750:	6c c0       	rjmp	.+216    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1752:	a7 e3       	ldi	r26, 0x37	; 55
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e7 e3       	ldi	r30, 0x37	; 55
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_setupPinDirection+0x10c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_setupPinDirection+0x108>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	57 c0       	rjmp	.+174    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	a1 f4       	brne	.+40     	; 0x17aa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1782:	a4 e3       	ldi	r26, 0x34	; 52
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GPIO_setupPinDirection+0x13c>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GPIO_setupPinDirection+0x138>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	40 c0       	rjmp	.+128    	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    17aa:	a4 e3       	ldi	r26, 0x34	; 52
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e4 e3       	ldi	r30, 0x34	; 52
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_setupPinDirection+0x164>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_setupPinDirection+0x160>
    17cc:	80 95       	com	r24
    17ce:	84 23       	and	r24, r20
    17d0:	8c 93       	st	X, r24
    17d2:	2b c0       	rjmp	.+86     	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	a1 f4       	brne	.+40     	; 0x1802 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17da:	a1 e3       	ldi	r26, 0x31	; 49
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e1 e3       	ldi	r30, 0x31	; 49
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 2e       	mov	r0, r18
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <GPIO_setupPinDirection+0x194>
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <GPIO_setupPinDirection+0x190>
    17fc:	84 2b       	or	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	14 c0       	rjmp	.+40     	; 0x182a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1802:	a1 e3       	ldi	r26, 0x31	; 49
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e1 e3       	ldi	r30, 0x31	; 49
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_setupPinDirection+0x1bc>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_setupPinDirection+0x1b8>
    1824:	80 95       	com	r24
    1826:	84 23       	and	r24, r20
    1828:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 ----------------------------------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num,uint8 pin_num, uint8 value)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	00 d0       	rcall	.+0      	; 0x1840 <GPIO_writePin+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <GPIO_writePin+0x8>
    1842:	0f 92       	push	r0
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	6a 83       	std	Y+2, r22	; 0x02
    184c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num  >= NUM_OF_PORTS))
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	08 f0       	brcs	.+2      	; 0x1856 <GPIO_writePin+0x1c>
    1854:	d5 c0       	rjmp	.+426    	; 0x1a00 <GPIO_writePin+0x1c6>
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	08 f0       	brcs	.+2      	; 0x185e <GPIO_writePin+0x24>
    185c:	d1 c0       	rjmp	.+418    	; 0x1a00 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3d 83       	std	Y+5, r19	; 0x05
    1866:	2c 83       	std	Y+4, r18	; 0x04
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	91 05       	cpc	r25, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <GPIO_writePin+0x3a>
    1872:	43 c0       	rjmp	.+134    	; 0x18fa <GPIO_writePin+0xc0>
    1874:	2c 81       	ldd	r18, Y+4	; 0x04
    1876:	3d 81       	ldd	r19, Y+5	; 0x05
    1878:	22 30       	cpi	r18, 0x02	; 2
    187a:	31 05       	cpc	r19, r1
    187c:	2c f4       	brge	.+10     	; 0x1888 <GPIO_writePin+0x4e>
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	71 f0       	breq	.+28     	; 0x18a2 <GPIO_writePin+0x68>
    1886:	bc c0       	rjmp	.+376    	; 0x1a00 <GPIO_writePin+0x1c6>
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	3d 81       	ldd	r19, Y+5	; 0x05
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <GPIO_writePin+0x5a>
    1892:	5f c0       	rjmp	.+190    	; 0x1952 <GPIO_writePin+0x118>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <GPIO_writePin+0x66>
    189e:	85 c0       	rjmp	.+266    	; 0x19aa <GPIO_writePin+0x170>
    18a0:	af c0       	rjmp	.+350    	; 0x1a00 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	a1 f4       	brne	.+40     	; 0x18d0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_writePin+0x8c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_writePin+0x88>
    18ca:	84 2b       	or	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	98 c0       	rjmp	.+304    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18d0:	ab e3       	ldi	r26, 0x3B	; 59
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	eb e3       	ldi	r30, 0x3B	; 59
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	48 2f       	mov	r20, r24
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	02 2e       	mov	r0, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <GPIO_writePin+0xb4>
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	0a 94       	dec	r0
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <GPIO_writePin+0xb0>
    18f2:	80 95       	com	r24
    18f4:	84 23       	and	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	83 c0       	rjmp	.+262    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1900:	a8 e3       	ldi	r26, 0x38	; 56
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e8 e3       	ldi	r30, 0x38	; 56
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <GPIO_writePin+0xe4>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <GPIO_writePin+0xe0>
    1922:	84 2b       	or	r24, r20
    1924:	8c 93       	st	X, r24
    1926:	6c c0       	rjmp	.+216    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1928:	a8 e3       	ldi	r26, 0x38	; 56
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e8 e3       	ldi	r30, 0x38	; 56
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_writePin+0x10c>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_writePin+0x108>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	57 c0       	rjmp	.+174    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	a1 f4       	brne	.+40     	; 0x1980 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1958:	a5 e3       	ldi	r26, 0x35	; 53
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e3       	ldi	r30, 0x35	; 53
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <GPIO_writePin+0x13c>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <GPIO_writePin+0x138>
    197a:	84 2b       	or	r24, r20
    197c:	8c 93       	st	X, r24
    197e:	40 c0       	rjmp	.+128    	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1980:	a5 e3       	ldi	r26, 0x35	; 53
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_writePin+0x164>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_writePin+0x160>
    19a2:	80 95       	com	r24
    19a4:	84 23       	and	r24, r20
    19a6:	8c 93       	st	X, r24
    19a8:	2b c0       	rjmp	.+86     	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	a1 f4       	brne	.+40     	; 0x19d8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    19b0:	a2 e3       	ldi	r26, 0x32	; 50
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_writePin+0x194>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_writePin+0x190>
    19d2:	84 2b       	or	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	14 c0       	rjmp	.+40     	; 0x1a00 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19d8:	a2 e3       	ldi	r26, 0x32	; 50
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e2 e3       	ldi	r30, 0x32	; 50
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <GPIO_writePin+0x1bc>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <GPIO_writePin+0x1b8>
    19fa:	80 95       	com	r24
    19fc:	84 23       	and	r24, r20
    19fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 ----------------------------------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <GPIO_readPin+0x6>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_readPin+0x8>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pin_value = LOGIC_LOW;
    1a22:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 30       	cpi	r24, 0x08	; 8
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <GPIO_readPin+0x1c>
    1a2a:	84 c0       	rjmp	.+264    	; 0x1b34 <GPIO_readPin+0x124>
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	84 30       	cpi	r24, 0x04	; 4
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <GPIO_readPin+0x24>
    1a32:	80 c0       	rjmp	.+256    	; 0x1b34 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3d 83       	std	Y+5, r19	; 0x05
    1a3c:	2c 83       	std	Y+4, r18	; 0x04
    1a3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a40:	5d 81       	ldd	r21, Y+5	; 0x05
    1a42:	41 30       	cpi	r20, 0x01	; 1
    1a44:	51 05       	cpc	r21, r1
    1a46:	79 f1       	breq	.+94     	; 0x1aa6 <GPIO_readPin+0x96>
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	34 f4       	brge	.+12     	; 0x1a5e <GPIO_readPin+0x4e>
    1a52:	2c 81       	ldd	r18, Y+4	; 0x04
    1a54:	3d 81       	ldd	r19, Y+5	; 0x05
    1a56:	21 15       	cp	r18, r1
    1a58:	31 05       	cpc	r19, r1
    1a5a:	69 f0       	breq	.+26     	; 0x1a76 <GPIO_readPin+0x66>
    1a5c:	6b c0       	rjmp	.+214    	; 0x1b34 <GPIO_readPin+0x124>
    1a5e:	4c 81       	ldd	r20, Y+4	; 0x04
    1a60:	5d 81       	ldd	r21, Y+5	; 0x05
    1a62:	42 30       	cpi	r20, 0x02	; 2
    1a64:	51 05       	cpc	r21, r1
    1a66:	b9 f1       	breq	.+110    	; 0x1ad6 <GPIO_readPin+0xc6>
    1a68:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	91 05       	cpc	r25, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <GPIO_readPin+0x64>
    1a72:	49 c0       	rjmp	.+146    	; 0x1b06 <GPIO_readPin+0xf6>
    1a74:	5f c0       	rjmp	.+190    	; 0x1b34 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a76:	e9 e3       	ldi	r30, 0x39	; 57
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	88 2f       	mov	r24, r24
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a9 01       	movw	r20, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_readPin+0x7e>
    1a8a:	55 95       	asr	r21
    1a8c:	47 95       	ror	r20
    1a8e:	8a 95       	dec	r24
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_readPin+0x7a>
    1a92:	ca 01       	movw	r24, r20
    1a94:	81 70       	andi	r24, 0x01	; 1
    1a96:	90 70       	andi	r25, 0x00	; 0
    1a98:	88 23       	and	r24, r24
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <GPIO_readPin+0x92>
			{
				a_pin_value = LOGIC_HIGH;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	49 c0       	rjmp	.+146    	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
    1aa4:	47 c0       	rjmp	.+142    	; 0x1b34 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1aa6:	e6 e3       	ldi	r30, 0x36	; 54
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	88 2f       	mov	r24, r24
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	a9 01       	movw	r20, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_readPin+0xae>
    1aba:	55 95       	asr	r21
    1abc:	47 95       	ror	r20
    1abe:	8a 95       	dec	r24
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_readPin+0xaa>
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	81 70       	andi	r24, 0x01	; 1
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	88 23       	and	r24, r24
    1aca:	19 f0       	breq	.+6      	; 0x1ad2 <GPIO_readPin+0xc2>
			{
				a_pin_value = LOGIC_HIGH;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	31 c0       	rjmp	.+98     	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
    1ad4:	2f c0       	rjmp	.+94     	; 0x1b34 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ad6:	e3 e3       	ldi	r30, 0x33	; 51
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_readPin+0xde>
    1aea:	55 95       	asr	r21
    1aec:	47 95       	ror	r20
    1aee:	8a 95       	dec	r24
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_readPin+0xda>
    1af2:	ca 01       	movw	r24, r20
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	88 23       	and	r24, r24
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <GPIO_readPin+0xf2>
			{
				a_pin_value = LOGIC_HIGH;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	17 c0       	rjmp	.+46     	; 0x1b34 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b06:	e0 e3       	ldi	r30, 0x30	; 48
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	a9 01       	movw	r20, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_readPin+0x10e>
    1b1a:	55 95       	asr	r21
    1b1c:	47 95       	ror	r20
    1b1e:	8a 95       	dec	r24
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_readPin+0x10a>
    1b22:	ca 01       	movw	r24, r20
    1b24:	81 70       	andi	r24, 0x01	; 1
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	88 23       	and	r24, r24
    1b2a:	19 f0       	breq	.+6      	; 0x1b32 <GPIO_readPin+0x122>
			{
				a_pin_value = LOGIC_HIGH;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1b32:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return a_pin_value;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
------------------------------------------------------------------------------------------------ */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <GPIO_setupPortDirection+0x6>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_setupPortDirection+0x8>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	84 30       	cpi	r24, 0x04	; 4
    1b5a:	90 f5       	brcc	.+100    	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3c 83       	std	Y+4, r19	; 0x04
    1b64:	2b 83       	std	Y+3, r18	; 0x03
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	d1 f0       	breq	.+52     	; 0x1ba4 <GPIO_setupPortDirection+0x5e>
    1b70:	2b 81       	ldd	r18, Y+3	; 0x03
    1b72:	3c 81       	ldd	r19, Y+4	; 0x04
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <GPIO_setupPortDirection+0x3e>
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	61 f0       	breq	.+24     	; 0x1b9a <GPIO_setupPortDirection+0x54>
    1b82:	1e c0       	rjmp	.+60     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
    1b84:	2b 81       	ldd	r18, Y+3	; 0x03
    1b86:	3c 81       	ldd	r19, Y+4	; 0x04
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	81 f0       	breq	.+32     	; 0x1bae <GPIO_setupPortDirection+0x68>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <GPIO_setupPortDirection+0x72>
    1b98:	13 c0       	rjmp	.+38     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b9a:	ea e3       	ldi	r30, 0x3A	; 58
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	80 83       	st	Z, r24
    1ba2:	0e c0       	rjmp	.+28     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ba4:	e7 e3       	ldi	r30, 0x37	; 55
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	80 83       	st	Z, r24
    1bac:	09 c0       	rjmp	.+18     	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1bae:	e4 e3       	ldi	r30, 0x34	; 52
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	80 83       	st	Z, r24
    1bb6:	04 c0       	rjmp	.+8      	; 0x1bc0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1bb8:	e1 e3       	ldi	r30, 0x31	; 49
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 --------------------------------------------------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <GPIO_writePort+0x6>
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_writePort+0x8>
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	84 30       	cpi	r24, 0x04	; 4
    1be2:	90 f5       	brcc	.+100    	; 0x1c48 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	3c 83       	std	Y+4, r19	; 0x04
    1bec:	2b 83       	std	Y+3, r18	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	d1 f0       	breq	.+52     	; 0x1c2c <GPIO_writePort+0x5e>
    1bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <GPIO_writePort+0x3e>
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <GPIO_writePort+0x54>
    1c0a:	1e c0       	rjmp	.+60     	; 0x1c48 <GPIO_writePort+0x7a>
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	31 05       	cpc	r19, r1
    1c14:	81 f0       	breq	.+32     	; 0x1c36 <GPIO_writePort+0x68>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	83 30       	cpi	r24, 0x03	; 3
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	81 f0       	breq	.+32     	; 0x1c40 <GPIO_writePort+0x72>
    1c20:	13 c0       	rjmp	.+38     	; 0x1c48 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c22:	eb e3       	ldi	r30, 0x3B	; 59
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 83       	st	Z, r24
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c2c:	e8 e3       	ldi	r30, 0x38	; 56
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	80 83       	st	Z, r24
    1c34:	09 c0       	rjmp	.+18     	; 0x1c48 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c36:	e5 e3       	ldi	r30, 0x35	; 53
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	80 83       	st	Z, r24
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c40:	e2 e3       	ldi	r30, 0x32	; 50
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 --------------------------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <GPIO_readPort+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_readPort+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_value = LOGIC_LOW;
    1c64:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	90 f5       	brcc	.+100    	; 0x1cd0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port a_value as required */
		switch(port_num)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3c 83       	std	Y+4, r19	; 0x04
    1c74:	2b 83       	std	Y+3, r18	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	d1 f0       	breq	.+52     	; 0x1cb4 <GPIO_readPort+0x5e>
    1c80:	2b 81       	ldd	r18, Y+3	; 0x03
    1c82:	3c 81       	ldd	r19, Y+4	; 0x04
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <GPIO_readPort+0x3e>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 f0       	breq	.+24     	; 0x1caa <GPIO_readPort+0x54>
    1c92:	1e c0       	rjmp	.+60     	; 0x1cd0 <GPIO_readPort+0x7a>
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	81 f0       	breq	.+32     	; 0x1cbe <GPIO_readPort+0x68>
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <GPIO_readPort+0x72>
    1ca8:	13 c0       	rjmp	.+38     	; 0x1cd0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_value = PINA;
    1caa:	e9 e3       	ldi	r30, 0x39	; 57
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	0e c0       	rjmp	.+28     	; 0x1cd0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_value = PINB;
    1cb4:	e6 e3       	ldi	r30, 0x36	; 54
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	09 c0       	rjmp	.+18     	; 0x1cd0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_value = PINC;
    1cbe:	e3 e3       	ldi	r30, 0x33	; 51
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_value = PIND;
    1cc8:	e0 e3       	ldi	r30, 0x30	; 48
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_value;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <EEPROM_init>:
 ----------------------------------------------------------------------------------*/
#include "../../MCAL/TWI/twi.h"
#include "eeprom.h"

void EEPROM_init(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <EEPROM_init+0x6>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the TWI/I2C Driver */
	TWI_configType config_Ptr;
	config_Ptr.bitRate = _400KB_BIT_RATE;
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	89 83       	std	Y+1, r24	; 0x01
	config_Ptr.deviceAddress = 0x01;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&config_Ptr);
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	0e 94 91 06 	call	0xd22	; 0xd22 <TWI_init>
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <EEPROM_writeByte+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <EEPROM_writeByte+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9a 83       	std	Y+2, r25	; 0x02
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1d16:	0e 94 b0 06 	call	0xd60	; 0xd60 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1d1a:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1d1e:	88 30       	cpi	r24, 0x08	; 8
    1d20:	11 f0       	breq	.+4      	; 0x1d26 <EEPROM_writeByte+0x22>
        return ERROR;
    1d22:	1c 82       	std	Y+4, r1	; 0x04
    1d24:	28 c0       	rjmp	.+80     	; 0x1d76 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	80 70       	andi	r24, 0x00	; 0
    1d2c:	97 70       	andi	r25, 0x07	; 7
    1d2e:	88 0f       	add	r24, r24
    1d30:	89 2f       	mov	r24, r25
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 0b       	sbc	r25, r25
    1d36:	91 95       	neg	r25
    1d38:	80 6a       	ori	r24, 0xA0	; 160
    1d3a:	0e 94 cb 06 	call	0xd96	; 0xd96 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1d3e:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1d42:	88 31       	cpi	r24, 0x18	; 24
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <EEPROM_writeByte+0x46>
        return ERROR;
    1d46:	1c 82       	std	Y+4, r1	; 0x04
    1d48:	16 c0       	rjmp	.+44     	; 0x1d76 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	0e 94 cb 06 	call	0xd96	; 0xd96 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d50:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1d54:	88 32       	cpi	r24, 0x28	; 40
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <EEPROM_writeByte+0x58>
        return ERROR;
    1d58:	1c 82       	std	Y+4, r1	; 0x04
    1d5a:	0d c0       	rjmp	.+26     	; 0x1d76 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	0e 94 cb 06 	call	0xd96	; 0xd96 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1d62:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1d66:	88 32       	cpi	r24, 0x28	; 40
    1d68:	11 f0       	breq	.+4      	; 0x1d6e <EEPROM_writeByte+0x6a>
        return ERROR;
    1d6a:	1c 82       	std	Y+4, r1	; 0x04
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1d6e:	0e 94 c0 06 	call	0xd80	; 0xd80 <TWI_stop>

    return SUCCESS;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	8c 83       	std	Y+4, r24	; 0x04
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <EEPROM_readByte+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <EEPROM_readByte+0x8>
    1d8e:	0f 92       	push	r0
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	7c 83       	std	Y+4, r23	; 0x04
    1d9a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1d9c:	0e 94 b0 06 	call	0xd60	; 0xd60 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1da0:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1da4:	88 30       	cpi	r24, 0x08	; 8
    1da6:	11 f0       	breq	.+4      	; 0x1dac <EEPROM_readByte+0x26>
        return ERROR;
    1da8:	1d 82       	std	Y+5, r1	; 0x05
    1daa:	44 c0       	rjmp	.+136    	; 0x1e34 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	80 70       	andi	r24, 0x00	; 0
    1db2:	97 70       	andi	r25, 0x07	; 7
    1db4:	88 0f       	add	r24, r24
    1db6:	89 2f       	mov	r24, r25
    1db8:	88 1f       	adc	r24, r24
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	91 95       	neg	r25
    1dbe:	80 6a       	ori	r24, 0xA0	; 160
    1dc0:	0e 94 cb 06 	call	0xd96	; 0xd96 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1dc4:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1dc8:	88 31       	cpi	r24, 0x18	; 24
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <EEPROM_readByte+0x4a>
        return ERROR;
    1dcc:	1d 82       	std	Y+5, r1	; 0x05
    1dce:	32 c0       	rjmp	.+100    	; 0x1e34 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1dd0:	89 81       	ldd	r24, Y+1	; 0x01
    1dd2:	0e 94 cb 06 	call	0xd96	; 0xd96 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1dd6:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1dda:	88 32       	cpi	r24, 0x28	; 40
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <EEPROM_readByte+0x5c>
        return ERROR;
    1dde:	1d 82       	std	Y+5, r1	; 0x05
    1de0:	29 c0       	rjmp	.+82     	; 0x1e34 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    1de2:	0e 94 b0 06 	call	0xd60	; 0xd60 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1de6:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1dea:	80 31       	cpi	r24, 0x10	; 16
    1dec:	11 f0       	breq	.+4      	; 0x1df2 <EEPROM_readByte+0x6c>
        return ERROR;
    1dee:	1d 82       	std	Y+5, r1	; 0x05
    1df0:	21 c0       	rjmp	.+66     	; 0x1e34 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	80 70       	andi	r24, 0x00	; 0
    1df8:	97 70       	andi	r25, 0x07	; 7
    1dfa:	88 0f       	add	r24, r24
    1dfc:	89 2f       	mov	r24, r25
    1dfe:	88 1f       	adc	r24, r24
    1e00:	99 0b       	sbc	r25, r25
    1e02:	91 95       	neg	r25
    1e04:	81 6a       	ori	r24, 0xA1	; 161
    1e06:	0e 94 cb 06 	call	0xd96	; 0xd96 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1e0a:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1e0e:	80 34       	cpi	r24, 0x40	; 64
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <EEPROM_readByte+0x90>
        return ERROR;
    1e12:	1d 82       	std	Y+5, r1	; 0x05
    1e14:	0f c0       	rjmp	.+30     	; 0x1e34 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1e16:	0e 94 f5 06 	call	0xdea	; 0xdea <TWI_readByteWithNACK>
    1e1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e1e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1e20:	0e 94 08 07 	call	0xe10	; 0xe10 <TWI_getStatus>
    1e24:	88 35       	cpi	r24, 0x58	; 88
    1e26:	11 f0       	breq	.+4      	; 0x1e2c <EEPROM_readByte+0xa6>
        return ERROR;
    1e28:	1d 82       	std	Y+5, r1	; 0x05
    1e2a:	04 c0       	rjmp	.+8      	; 0x1e34 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1e2c:	0e 94 c0 06 	call	0xd80	; 0xd80 <TWI_stop>

    return SUCCESS;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	8d 83       	std	Y+5, r24	; 0x05
    1e34:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <MOTOR_init>:

/*********************************************************************
 * 						Static Functions' Prototypes
 *********************************************************************/
void MOTOR_init()
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_CW_PIN_ID, PIN_OUTPUT);
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_A_CW_PIN_ID, PIN_OUTPUT);
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	61 e0       	ldi	r22, 0x01	; 1
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	MOTOR_stop();
    1e62:	0e 94 67 0f 	call	0x1ece	; 0x1ece <MOTOR_stop>
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <MOTOR_rotate>:

void MOTOR_rotate(uint8 a_direction)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <MOTOR_rotate+0x6>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
	switch(a_direction)
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3b 83       	std	Y+3, r19	; 0x03
    1e82:	2a 83       	std	Y+2, r18	; 0x02
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	31 f0       	breq	.+12     	; 0x1e98 <MOTOR_rotate+0x2c>
    1e8c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e8e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e90:	21 30       	cpi	r18, 0x01	; 1
    1e92:	31 05       	cpc	r19, r1
    1e94:	61 f0       	breq	.+24     	; 0x1eae <MOTOR_rotate+0x42>
    1e96:	15 c0       	rjmp	.+42     	; 0x1ec2 <MOTOR_rotate+0x56>
	{
	case ROTATE_A_CW:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_A_CW_PIN_ID, LOGIC_HIGH);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_CW_PIN_ID,LOGIC_LOW);
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
    1eac:	0a c0       	rjmp	.+20     	; 0x1ec2 <MOTOR_rotate+0x56>
		break;
	case ROTATE_CW:
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_CW_PIN_ID,LOGIC_HIGH);
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID,MOTOR_A_CW_PIN_ID,LOGIC_LOW);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
		break;
	}
}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <MOTOR_stop>:

void MOTOR_stop(void)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	cd b7       	in	r28, 0x3d	; 61
    1ed4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(MOTOR_PORT_ID,MOTOR_A_CW_PIN_ID,LOGIC_LOW);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_CW_PIN_ID, LOGIC_LOW);
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	40 e0       	ldi	r20, 0x00	; 0
    1ee6:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <BUZZER_init>:
#include "buzzer.h"

#include "../../LIBRARIES/Std_types.h"

void BUZZER_init(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	/* Set the buzzer at portB , pin0 as output */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	41 e0       	ldi	r20, 0x01	; 1
    1efe:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_setupPinDirection>
	/* Turn off Buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
}
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <BUZZER_on>:

void BUZZER_on(void)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <BUZZER_off>:

void BUZZER_off(void)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 1d 0c 	call	0x183a	; 0x183a <GPIO_writePin>
}
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <CTRL_init>:
 	 	 	 	 	 	 	 	 	 Functions' Definition
 ************************************************************************************************/

/*==================================== CONTROL_init ===============================================*/
void CTRL_init(void)
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	2c 97       	sbiw	r28, 0x0c	; 12
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
	 * 2. initiate the Buzzer.
	 * 3. initiate the motor.
	 * 4. initiate the timer to Timer1, compare-mode, prescaler_1024,and set the initial and compare values.
	 * 5. initiate the UART to baud-rate=9600, 8-bits data, one stop bit and no parity.
	 **********************************************************************************************************/
	EEPROM_init();
    1f56:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <EEPROM_init>
	BUZZER_init();
    1f5a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <BUZZER_init>
	MOTOR_init();
    1f5e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <MOTOR_init>
	GPT_startTimer(T1);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	0e 94 17 07 	call	0xe2e	; 0xe2e <GPT_startTimer>
	GPT_T1_setCallBack(CTRL_callBack);
    1f68:	8b e7       	ldi	r24, 0x7B	; 123
    1f6a:	92 e1       	ldi	r25, 0x12	; 18
    1f6c:	0e 94 87 0a 	call	0x150e	; 0x150e <GPT_T1_setCallBack>
	UART_ConfigType uart_configObj = {9600,EIGHT_BITS,DISABLE_PARITY,ONE_STOP_BIT};
    1f70:	ce 01       	movw	r24, r28
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	99 87       	std	Y+9, r25	; 0x09
    1f76:	88 87       	std	Y+8, r24	; 0x08
    1f78:	e6 e8       	ldi	r30, 0x86	; 134
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	fb 87       	std	Y+11, r31	; 0x0b
    1f7e:	ea 87       	std	Y+10, r30	; 0x0a
    1f80:	f7 e0       	ldi	r31, 0x07	; 7
    1f82:	fc 87       	std	Y+12, r31	; 0x0c
    1f84:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f86:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f88:	00 80       	ld	r0, Z
    1f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	9b 87       	std	Y+11, r25	; 0x0b
    1f92:	8a 87       	std	Y+10, r24	; 0x0a
    1f94:	e8 85       	ldd	r30, Y+8	; 0x08
    1f96:	f9 85       	ldd	r31, Y+9	; 0x09
    1f98:	00 82       	st	Z, r0
    1f9a:	88 85       	ldd	r24, Y+8	; 0x08
    1f9c:	99 85       	ldd	r25, Y+9	; 0x09
    1f9e:	01 96       	adiw	r24, 0x01	; 1
    1fa0:	99 87       	std	Y+9, r25	; 0x09
    1fa2:	88 87       	std	Y+8, r24	; 0x08
    1fa4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fa6:	91 50       	subi	r25, 0x01	; 1
    1fa8:	9c 87       	std	Y+12, r25	; 0x0c
    1faa:	ec 85       	ldd	r30, Y+12	; 0x0c
    1fac:	ee 23       	and	r30, r30
    1fae:	51 f7       	brne	.-44     	; 0x1f84 <CTRL_init+0x42>
	UART_init(&uart_configObj);
    1fb0:	ce 01       	movw	r24, r28
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>
	GPT_enableNotification(T1, OUTPUT_COMPARE);
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	0e 94 a3 09 	call	0x1346	; 0x1346 <GPT_enableNotification>
}
    1fc0:	2c 96       	adiw	r28, 0x0c	; 12
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <CTRL_receiveACK>:
/*======================================== HMI_receiveACK ==========================================*/
void CTRL_receiveACK(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the control ECU check the password*/
	while(UART_receiveByte() != READY);
    1fda:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <CTRL_receiveACK+0x8>
	UART_sendByte(READY);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <CTRL_sendACK>:
/*======================================== HMI_sendACK ==========================================*/
void CTRL_sendACK(void)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
	while(UART_receiveByte() != READY);
    1ffc:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <CTRL_sendACK+0xe>
}
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <CTRL_receivePassword>:
/*==================================== receivePassword ===============================================*/
void CTRL_receivePassword(uint8 *a_password)
{
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	61 97       	sbiw	r28, 0x11	; 17
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	99 8b       	std	Y+17, r25	; 0x11
    2024:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    2026:	1f 86       	std	Y+15, r1	; 0x0f
    2028:	81 c0       	rjmp	.+258    	; 0x212c <CTRL_receivePassword+0x122>
	{
		a_password[i] = UART_receiveByte();
    202a:	8f 85       	ldd	r24, Y+15	; 0x0f
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	88 89       	ldd	r24, Y+16	; 0x10
    2032:	99 89       	ldd	r25, Y+17	; 0x11
    2034:	8c 01       	movw	r16, r24
    2036:	02 0f       	add	r16, r18
    2038:	13 1f       	adc	r17, r19
    203a:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    203e:	f8 01       	movw	r30, r16
    2040:	80 83       	st	Z, r24
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a8 e4       	ldi	r26, 0x48	; 72
    2048:	b2 e4       	ldi	r27, 0x42	; 66
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	ad 87       	std	Y+13, r26	; 0x0d
    2050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8f 83       	std	Y+7, r24	; 0x07
    206c:	98 87       	std	Y+8, r25	; 0x08
    206e:	a9 87       	std	Y+9, r26	; 0x09
    2070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <CTRL_receivePassword+0x8a>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <CTRL_receivePassword+0x108>
	else if (__tmp > 65535)
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <CTRL_receivePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <CTRL_receivePassword+0xea>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <CTRL_receivePassword+0xd8>
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <CTRL_receivePassword+0xcc>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <CTRL_receivePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <CTRL_receivePassword+0x114>
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== receivePassword ===============================================*/
void CTRL_receivePassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    2126:	8f 85       	ldd	r24, Y+15	; 0x0f
    2128:	8f 5f       	subi	r24, 0xFF	; 255
    212a:	8f 87       	std	Y+15, r24	; 0x0f
    212c:	8f 85       	ldd	r24, Y+15	; 0x0f
    212e:	85 30       	cpi	r24, 0x05	; 5
    2130:	08 f4       	brcc	.+2      	; 0x2134 <CTRL_receivePassword+0x12a>
    2132:	7b cf       	rjmp	.-266    	; 0x202a <CTRL_receivePassword+0x20>
	{
		a_password[i] = UART_receiveByte();
		_delay_ms(50);
	}
}
    2134:	61 96       	adiw	r28, 0x11	; 17
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	08 95       	ret

0000214a <CTRL_sendPassword>:
/*==================================== sendPassword ===============================================*/
void CTRL_sendPassword(uint8 *a_password)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	61 97       	sbiw	r28, 0x11	; 17
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	99 8b       	std	Y+17, r25	; 0x11
    2160:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2162:	1f 86       	std	Y+15, r1	; 0x0f
    2164:	80 c0       	rjmp	.+256    	; 0x2266 <CTRL_sendPassword+0x11c>
	{
		UART_sendByte(a_password[i]);
    2166:	8f 85       	ldd	r24, Y+15	; 0x0f
    2168:	28 2f       	mov	r18, r24
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	88 89       	ldd	r24, Y+16	; 0x10
    216e:	99 89       	ldd	r25, Y+17	; 0x11
    2170:	fc 01       	movw	r30, r24
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	80 81       	ld	r24, Z
    2178:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a8 e4       	ldi	r26, 0x48	; 72
    2182:	b2 e4       	ldi	r27, 0x42	; 66
    2184:	8b 87       	std	Y+11, r24	; 0x0b
    2186:	9c 87       	std	Y+12, r25	; 0x0c
    2188:	ad 87       	std	Y+13, r26	; 0x0d
    218a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	6b 85       	ldd	r22, Y+11	; 0x0b
    218e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8f 83       	std	Y+7, r24	; 0x07
    21a6:	98 87       	std	Y+8, r25	; 0x08
    21a8:	a9 87       	std	Y+9, r26	; 0x09
    21aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <CTRL_sendPassword+0x84>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9e 83       	std	Y+6, r25	; 0x06
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <CTRL_sendPassword+0x102>
	else if (__tmp > 65535)
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <CTRL_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	0f c0       	rjmp	.+30     	; 0x222e <CTRL_sendPassword+0xe4>
    2210:	88 ec       	ldi	r24, 0xC8	; 200
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 83       	std	Y+4, r25	; 0x04
    2216:	8b 83       	std	Y+3, r24	; 0x03
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <CTRL_sendPassword+0xd2>
    2220:	9c 83       	std	Y+4, r25	; 0x04
    2222:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <CTRL_sendPassword+0xc6>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <CTRL_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	9a 83       	std	Y+2, r25	; 0x02
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	9a 81       	ldd	r25, Y+2	; 0x02
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <CTRL_sendPassword+0x10e>
    225c:	9a 83       	std	Y+2, r25	; 0x02
    225e:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== sendPassword ===============================================*/
void CTRL_sendPassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	8f 5f       	subi	r24, 0xFF	; 255
    2264:	8f 87       	std	Y+15, r24	; 0x0f
    2266:	8f 85       	ldd	r24, Y+15	; 0x0f
    2268:	85 30       	cpi	r24, 0x05	; 5
    226a:	08 f4       	brcc	.+2      	; 0x226e <CTRL_sendPassword+0x124>
    226c:	7c cf       	rjmp	.-264    	; 0x2166 <CTRL_sendPassword+0x1c>
	{
		UART_sendByte(a_password[i]);
		_delay_ms(50);
	}
}
    226e:	61 96       	adiw	r28, 0x11	; 17
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <CTRL_savePassword>:
/*==================================== savePassword ===============================================*/
void CTRL_savePassword(void)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	2f 97       	sbiw	r28, 0x0f	; 15
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	f8 94       	cli
    228e:	de bf       	out	0x3e, r29	; 62
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i=0;i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    2294:	1f 86       	std	Y+15, r1	; 0x0f
    2296:	86 c0       	rjmp	.+268    	; 0x23a4 <CTRL_savePassword+0x124>
	{
		EEPROM_writeByte((PASSWORD_START_ADDRESS_IN_MEMORY+i), g_currentPassword_array[i]);
    2298:	8f 85       	ldd	r24, Y+15	; 0x0f
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	8f 5e       	subi	r24, 0xEF	; 239
    22a0:	9c 4f       	sbci	r25, 0xFC	; 252
    22a2:	ac 01       	movw	r20, r24
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	88 2f       	mov	r24, r24
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	fc 01       	movw	r30, r24
    22ac:	ea 56       	subi	r30, 0x6A	; 106
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	20 81       	ld	r18, Z
    22b2:	ca 01       	movw	r24, r20
    22b4:	62 2f       	mov	r22, r18
    22b6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <EEPROM_writeByte>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a8 e4       	ldi	r26, 0x48	; 72
    22c0:	b2 e4       	ldi	r27, 0x42	; 66
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	ad 87       	std	Y+13, r26	; 0x0d
    22c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8f 83       	std	Y+7, r24	; 0x07
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	a9 87       	std	Y+9, r26	; 0x09
    22e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <CTRL_savePassword+0x8c>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	3f c0       	rjmp	.+126    	; 0x238a <CTRL_savePassword+0x10a>
	else if (__tmp > 65535)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <CTRL_savePassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	0f c0       	rjmp	.+30     	; 0x236c <CTRL_savePassword+0xec>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <CTRL_savePassword+0xda>
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <CTRL_savePassword+0xce>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <CTRL_savePassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <CTRL_savePassword+0x116>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== savePassword ===============================================*/
void CTRL_savePassword(void)
{
	uint8 i;
	for(i=0;i<NUMBER_OF_DIGITS_IN_PASSWORD;i++)
    239e:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	8f 87       	std	Y+15, r24	; 0x0f
    23a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a6:	85 30       	cpi	r24, 0x05	; 5
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <CTRL_savePassword+0x12c>
    23aa:	76 cf       	rjmp	.-276    	; 0x2298 <CTRL_savePassword+0x18>
	{
		EEPROM_writeByte((PASSWORD_START_ADDRESS_IN_MEMORY+i), g_currentPassword_array[i]);
		_delay_ms(50);
	}
}
    23ac:	2f 96       	adiw	r28, 0x0f	; 15
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <CTRL_readPassword>:
/*==================================== readPassword ===============================================*/
void CTRL_readPassword(void)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	0f 92       	push	r0
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	13 c0       	rjmp	.+38     	; 0x23f2 <CTRL_readPassword+0x34>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS_IN_MEMORY+i, &g_currentPassword_array[i]);
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	8f 5e       	subi	r24, 0xEF	; 239
    23d4:	9c 4f       	sbci	r25, 0xFC	; 252
    23d6:	ac 01       	movw	r20, r24
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 01       	movw	r18, r24
    23e0:	2a 56       	subi	r18, 0x6A	; 106
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	ca 01       	movw	r24, r20
    23e6:	b9 01       	movw	r22, r18
    23e8:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EEPROM_readByte>
}
/*==================================== readPassword ===============================================*/
void CTRL_readPassword(void)
{
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	85 30       	cpi	r24, 0x05	; 5
    23f6:	50 f3       	brcs	.-44     	; 0x23cc <CTRL_readPassword+0xe>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS_IN_MEMORY+i, &g_currentPassword_array[i]);
	}
}
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <CTRL_compareTwoPasswords>:
/*==================================== compare_TwoPasswords ========================================*/
uint8 CTRL_compareTwoPasswords(void)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <CTRL_compareTwoPasswords+0x6>
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	uint8 i,verify = MATCHED;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	89 83       	std	Y+1, r24	; 0x01
	for(i=0; i < NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    240e:	1a 82       	std	Y+2, r1	; 0x02
    2410:	15 c0       	rjmp	.+42     	; 0x243c <CTRL_compareTwoPasswords+0x3c>
	{
		if(g_currentPassword_array[i] != g_confirmPassword_array[i])
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	fc 01       	movw	r30, r24
    241a:	ea 56       	subi	r30, 0x6A	; 106
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	20 81       	ld	r18, Z
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	fc 01       	movw	r30, r24
    2428:	ef 56       	subi	r30, 0x6F	; 111
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	80 81       	ld	r24, Z
    242e:	28 17       	cp	r18, r24
    2430:	11 f0       	breq	.+4      	; 0x2436 <CTRL_compareTwoPasswords+0x36>
		{
			verify = MISMATCHED;
    2432:	19 82       	std	Y+1, r1	; 0x01
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <CTRL_compareTwoPasswords+0x42>
}
/*==================================== compare_TwoPasswords ========================================*/
uint8 CTRL_compareTwoPasswords(void)
{
	uint8 i,verify = MATCHED;
	for(i=0; i < NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	8f 5f       	subi	r24, 0xFF	; 255
    243a:	8a 83       	std	Y+2, r24	; 0x02
    243c:	8a 81       	ldd	r24, Y+2	; 0x02
    243e:	85 30       	cpi	r24, 0x05	; 5
    2440:	40 f3       	brcs	.-48     	; 0x2412 <CTRL_compareTwoPasswords+0x12>
		{
			verify = MISMATCHED;
			break;
		}
	}
	return verify;
    2442:	89 81       	ldd	r24, Y+1	; 0x01
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <CTRL_passwordInputOperation>:
/*==================================== PasswordInputOperation =======================================*/
void CTRL_passwordInputOperation(void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
	uint8 temp = 0;
    2458:	19 82       	std	Y+1, r1	; 0x01
	 * 6. send ready to contact to HMI and wait if until finish its task and respond by ready.
	 * 7. send the result of comparsion to HMI.
	 * 8. loop until the two password are matched.
	 ****************************************************************************************/
		do{
			while(UART_receiveByte() != READY);
    245a:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	e1 f7       	brne	.-8      	; 0x245a <CTRL_passwordInputOperation+0xc>
			UART_sendByte(READY);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			CTRL_receivePassword(g_currentPassword_array);
    2468:	86 e9       	ldi	r24, 0x96	; 150
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	0e 94 05 10 	call	0x200a	; 0x200a <CTRL_receivePassword>
			while(UART_receiveByte() != READY);
    2470:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	e1 f7       	brne	.-8      	; 0x2470 <CTRL_passwordInputOperation+0x22>
			UART_sendByte(READY);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			CTRL_receivePassword(g_confirmPassword_array);
    247e:	81 e9       	ldi	r24, 0x91	; 145
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 05 10 	call	0x200a	; 0x200a <CTRL_receivePassword>
			temp = CTRL_compareTwoPasswords();
    2486:	0e 94 00 12 	call	0x2400	; 0x2400 <CTRL_compareTwoPasswords>
    248a:	89 83       	std	Y+1, r24	; 0x01
			if(temp == MATCHED)
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	11 f4       	brne	.+4      	; 0x2496 <CTRL_passwordInputOperation+0x48>
			{
				CTRL_savePassword();
    2492:	0e 94 40 11 	call	0x2280	; 0x2280 <CTRL_savePassword>
			}
			UART_sendByte(READY);
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			while(UART_receiveByte() != READY);
    249c:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	e1 f7       	brne	.-8      	; 0x249c <CTRL_passwordInputOperation+0x4e>
			UART_sendByte(temp);
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		}while(temp == MISMATCHED);
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	88 23       	and	r24, r24
    24ae:	a9 f2       	breq	.-86     	; 0x245a <CTRL_passwordInputOperation+0xc>
}
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <CTRL_doorAction>:
/*=================================== display_DoorAction =============================================*/
void CTRL_doorAction(void)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    24c0:	10 92 90 00 	sts	0x0090, r1
	MOTOR_rotate(ROTATE_CW);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <MOTOR_rotate>
	while(g_seconds < TIME_OF_DOOR_OPEN);
    24ca:	80 91 90 00 	lds	r24, 0x0090
    24ce:	8f 30       	cpi	r24, 0x0F	; 15
    24d0:	e0 f3       	brcs	.-8      	; 0x24ca <CTRL_doorAction+0x12>
	MOTOR_stop();
    24d2:	0e 94 67 0f 	call	0x1ece	; 0x1ece <MOTOR_stop>
	while(g_seconds < (TIME_OF_DOOR_OPEN+TIME_OF_DOOR_STOP));
    24d6:	80 91 90 00 	lds	r24, 0x0090
    24da:	82 31       	cpi	r24, 0x12	; 18
    24dc:	e0 f3       	brcs	.-8      	; 0x24d6 <CTRL_doorAction+0x1e>
	MOTOR_rotate(ROTATE_A_CW);
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <MOTOR_rotate>
	while(g_seconds < (TIME_OF_DOOR_OPEN+TIME_OF_DOOR_STOP+TIME_OF_DOOR_CLOSE));
    24e4:	80 91 90 00 	lds	r24, 0x0090
    24e8:	81 32       	cpi	r24, 0x21	; 33
    24ea:	e0 f3       	brcs	.-8      	; 0x24e4 <CTRL_doorAction+0x2c>
	MOTOR_stop();
    24ec:	0e 94 67 0f 	call	0x1ece	; 0x1ece <MOTOR_stop>

}
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <CTRL_callBack>:
/*=================================== Door_callBack =============================================*/
void CTRL_callBack(void)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    24fe:	80 91 90 00 	lds	r24, 0x0090
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	80 93 90 00 	sts	0x0090, r24
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <CTRL_alarmAction>:
/*================================== CONTROL_alarmAction =======================================*/
void CTRL_alarmAction(void)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    2516:	10 92 90 00 	sts	0x0090, r1
	BUZZER_on();
    251a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <BUZZER_on>
	while(g_seconds < TIME_OF_ALARM);
    251e:	80 91 90 00 	lds	r24, 0x0090
    2522:	8c 33       	cpi	r24, 0x3C	; 60
    2524:	e0 f3       	brcs	.-8      	; 0x251e <CTRL_alarmAction+0x10>
	BUZZER_off();
    2526:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <BUZZER_off>
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <CTRL_openDoorWrongPassword>:
/*================================= CONTROL_openDoorCheckPassword ================================*/
void CTRL_openDoorWrongPassword(uint8 *a_NumberOfWrongPasswords)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	00 d0       	rcall	.+0      	; 0x2536 <CTRL_openDoorWrongPassword+0x6>
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9b 83       	std	Y+3, r25	; 0x03
    253e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_verification_res = 0;
    2540:	19 82       	std	Y+1, r1	; 0x01
	 * 	12-1. exit the loop.
	 * 	12-2. set num_of_wrong_passwords back to zero.
	 * 	12-3. apply functoin CONTROL_alarmAction.
	 * 	12-4. return back to the option menu.
	 ************************************************************************/
	CTRL_sendACK();
    2542:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
	UART_sendByte(MISMATCHED);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
    254c:	20 c0       	rjmp	.+64     	; 0x258e <CTRL_openDoorWrongPassword+0x5e>
	while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
	{
		(*a_NumberOfWrongPasswords) ++;
    254e:	ea 81       	ldd	r30, Y+2	; 0x02
    2550:	fb 81       	ldd	r31, Y+3	; 0x03
    2552:	80 81       	ld	r24, Z
    2554:	8f 5f       	subi	r24, 0xFF	; 255
    2556:	ea 81       	ldd	r30, Y+2	; 0x02
    2558:	fb 81       	ldd	r31, Y+3	; 0x03
    255a:	80 83       	st	Z, r24
		CTRL_receiveACK();
    255c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <CTRL_receiveACK>
		CTRL_receivePassword(g_confirmPassword_array);
    2560:	81 e9       	ldi	r24, 0x91	; 145
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 05 10 	call	0x200a	; 0x200a <CTRL_receivePassword>
		CTRL_readPassword();
    2568:	0e 94 df 11 	call	0x23be	; 0x23be <CTRL_readPassword>
		a_verification_res = CTRL_compareTwoPasswords();
    256c:	0e 94 00 12 	call	0x2400	; 0x2400 <CTRL_compareTwoPasswords>
    2570:	89 83       	std	Y+1, r24	; 0x01
		CTRL_sendACK();
    2572:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
		UART_sendByte(a_verification_res);
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>

		if(a_verification_res == MATCHED)
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	31 f4       	brne	.+12     	; 0x258e <CTRL_openDoorWrongPassword+0x5e>
		{
			(*a_NumberOfWrongPasswords) = 0;
    2582:	ea 81       	ldd	r30, Y+2	; 0x02
    2584:	fb 81       	ldd	r31, Y+3	; 0x03
    2586:	10 82       	st	Z, r1
			CTRL_doorAction();
    2588:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <CTRL_doorAction>
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <CTRL_openDoorWrongPassword+0x68>
	 * 	12-3. apply functoin CONTROL_alarmAction.
	 * 	12-4. return back to the option menu.
	 ************************************************************************/
	CTRL_sendACK();
	UART_sendByte(MISMATCHED);
	while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    258e:	ea 81       	ldd	r30, Y+2	; 0x02
    2590:	fb 81       	ldd	r31, Y+3	; 0x03
    2592:	80 81       	ld	r24, Z
    2594:	83 30       	cpi	r24, 0x03	; 3
    2596:	d8 f2       	brcs	.-74     	; 0x254e <CTRL_openDoorWrongPassword+0x1e>
			(*a_NumberOfWrongPasswords) = 0;
			CTRL_doorAction();
			break;         /* exit from while loop */
		}
	}
	if((*a_NumberOfWrongPasswords) == MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    2598:	ea 81       	ldd	r30, Y+2	; 0x02
    259a:	fb 81       	ldd	r31, Y+3	; 0x03
    259c:	80 81       	ld	r24, Z
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	29 f4       	brne	.+10     	; 0x25ac <CTRL_openDoorWrongPassword+0x7c>
	{
		(*a_NumberOfWrongPasswords) = 0;
    25a2:	ea 81       	ldd	r30, Y+2	; 0x02
    25a4:	fb 81       	ldd	r31, Y+3	; 0x03
    25a6:	10 82       	st	Z, r1
		CTRL_alarmAction();
    25a8:	0e 94 87 12 	call	0x250e	; 0x250e <CTRL_alarmAction>
	}
}
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <CTRL_changePassword>:
/*================================= CONTROL_changePassword ======================================*/
void CTRL_changePassword(uint8 *a_NumberOfWrongPasswords)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <CTRL_changePassword+0x6>
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	9b 83       	std	Y+3, r25	; 0x03
    25c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_verification_res = 0;
    25c8:	19 82       	std	Y+1, r1	; 0x01
	 * 	6-1. send ready to the HMI and wait its readiness.
	 * 	6-2. send MISMATCHED message to HMI.
	 * 	6-3. loop until enter the correct password.
	 * 	6-4. if the user enter a wrong password for 3 times ==> implement alarm action.
	 ************************************************************************************/
	CTRL_receiveACK();
    25ca:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <CTRL_receiveACK>

	CTRL_receivePassword(g_confirmPassword_array);
    25ce:	81 e9       	ldi	r24, 0x91	; 145
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 05 10 	call	0x200a	; 0x200a <CTRL_receivePassword>
	CTRL_readPassword();
    25d6:	0e 94 df 11 	call	0x23be	; 0x23be <CTRL_readPassword>
	a_verification_res = CTRL_compareTwoPasswords();
    25da:	0e 94 00 12 	call	0x2400	; 0x2400 <CTRL_compareTwoPasswords>
    25de:	89 83       	std	Y+1, r24	; 0x01

	if(a_verification_res == MATCHED)
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	81 30       	cpi	r24, 0x01	; 1
    25e4:	59 f4       	brne	.+22     	; 0x25fc <CTRL_changePassword+0x44>
	{
		CTRL_sendACK();
    25e6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
		UART_sendByte(CHANGE_PASSWORD);
    25ea:	8c e2       	ldi	r24, 0x2C	; 44
    25ec:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		CTRL_passwordInputOperation();
    25f0:	0e 94 27 12 	call	0x244e	; 0x244e <CTRL_passwordInputOperation>
		(*a_NumberOfWrongPasswords) = 0;
    25f4:	ea 81       	ldd	r30, Y+2	; 0x02
    25f6:	fb 81       	ldd	r31, Y+3	; 0x03
    25f8:	10 82       	st	Z, r1
    25fa:	38 c0       	rjmp	.+112    	; 0x266c <CTRL_changePassword+0xb4>
	}
	else if(a_verification_res == MISMATCHED)
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	88 23       	and	r24, r24
    2600:	a9 f5       	brne	.+106    	; 0x266c <CTRL_changePassword+0xb4>
	{
		CTRL_sendACK();
    2602:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
		UART_sendByte(MISMATCHED);
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
    260c:	20 c0       	rjmp	.+64     	; 0x264e <CTRL_changePassword+0x96>
		while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
		{
			(*a_NumberOfWrongPasswords)++;
    260e:	ea 81       	ldd	r30, Y+2	; 0x02
    2610:	fb 81       	ldd	r31, Y+3	; 0x03
    2612:	80 81       	ld	r24, Z
    2614:	8f 5f       	subi	r24, 0xFF	; 255
    2616:	ea 81       	ldd	r30, Y+2	; 0x02
    2618:	fb 81       	ldd	r31, Y+3	; 0x03
    261a:	80 83       	st	Z, r24

			CTRL_receiveACK();
    261c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <CTRL_receiveACK>
			CTRL_receivePassword(g_confirmPassword_array);
    2620:	81 e9       	ldi	r24, 0x91	; 145
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 05 10 	call	0x200a	; 0x200a <CTRL_receivePassword>
			CTRL_readPassword();
    2628:	0e 94 df 11 	call	0x23be	; 0x23be <CTRL_readPassword>
			a_verification_res = CTRL_compareTwoPasswords();
    262c:	0e 94 00 12 	call	0x2400	; 0x2400 <CTRL_compareTwoPasswords>
    2630:	89 83       	std	Y+1, r24	; 0x01
			CTRL_sendACK();
    2632:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
			UART_sendByte(a_verification_res);
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			if(a_verification_res == MATCHED)
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	31 f4       	brne	.+12     	; 0x264e <CTRL_changePassword+0x96>
			{
				(*a_NumberOfWrongPasswords) = 0;
    2642:	ea 81       	ldd	r30, Y+2	; 0x02
    2644:	fb 81       	ldd	r31, Y+3	; 0x03
    2646:	10 82       	st	Z, r1
				CTRL_passwordInputOperation();
    2648:	0e 94 27 12 	call	0x244e	; 0x244e <CTRL_passwordInputOperation>
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <CTRL_changePassword+0xa0>
	}
	else if(a_verification_res == MISMATCHED)
	{
		CTRL_sendACK();
		UART_sendByte(MISMATCHED);
		while((*a_NumberOfWrongPasswords) < MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    264e:	ea 81       	ldd	r30, Y+2	; 0x02
    2650:	fb 81       	ldd	r31, Y+3	; 0x03
    2652:	80 81       	ld	r24, Z
    2654:	83 30       	cpi	r24, 0x03	; 3
    2656:	d8 f2       	brcs	.-74     	; 0x260e <CTRL_changePassword+0x56>
				(*a_NumberOfWrongPasswords) = 0;
				CTRL_passwordInputOperation();
				break; /* exit the while loop */
			}
		}
		if((*a_NumberOfWrongPasswords) == MAX_NUMBER_OF_WRONG_PASS_ENTERED)
    2658:	ea 81       	ldd	r30, Y+2	; 0x02
    265a:	fb 81       	ldd	r31, Y+3	; 0x03
    265c:	80 81       	ld	r24, Z
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	29 f4       	brne	.+10     	; 0x266c <CTRL_changePassword+0xb4>
		{
			(*a_NumberOfWrongPasswords) = 0;
    2662:	ea 81       	ldd	r30, Y+2	; 0x02
    2664:	fb 81       	ldd	r31, Y+3	; 0x03
    2666:	10 82       	st	Z, r1
			CTRL_alarmAction();
    2668:	0e 94 87 12 	call	0x250e	; 0x250e <CTRL_alarmAction>
		}
	}

}
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <main>:

#define PASSWORD_NOT_ENTERED	0xFF
#define PASSWORD_ENTERED		1

int main(void)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	64 97       	sbiw	r28, 0x14	; 20
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
	 *  [uint8 flag]: variable to observe if the user is used the program for the first time or not.
	 *  [uint8 a_CTROL_option]: this variable stores the selected option coming from HMI ECU.
	 *  [uint8 a_num_of_wrong_passwords]: this variable used to observe how many wrong passwords the user has enterred.
	 *  [uint8 a_CTROL_verification_res]: this variable stores the result of the comparsion betweem the two input passwords.
	 ******************************************************************************************************************/
	uint8 a_num_of_wrong_passwords = 0,a_passwordState;
    268c:	19 8a       	std	Y+17, r1	; 0x11
	uint8 a_CTROL_verification_res = 0,a_CTROL_option=0;
    268e:	18 8a       	std	Y+16, r1	; 0x10
    2690:	1f 86       	std	Y+15, r1	; 0x0f
	 * 2. initiate the Buzzer.
	 * 3. initiate the motor.
	 * 4. initiate the timer to Timer1, compare-mode, prescaler_1024,and set the initial and compare values.
	 * 5. initiate the UART to baud-rate=9600, 8-bits data, one stop bit and no parity.
	 **********************************************************************************************************/
	CTRL_init();
    2692:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <CTRL_init>
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a0 e2       	ldi	r26, 0x20	; 32
    269c:	b1 e4       	ldi	r27, 0x41	; 65
    269e:	8b 87       	std	Y+11, r24	; 0x0b
    26a0:	9c 87       	std	Y+12, r25	; 0x0c
    26a2:	ad 87       	std	Y+13, r26	; 0x0d
    26a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	4a ef       	ldi	r20, 0xFA	; 250
    26b4:	54 e4       	ldi	r21, 0x44	; 68
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	8f 83       	std	Y+7, r24	; 0x07
    26c0:	98 87       	std	Y+8, r25	; 0x08
    26c2:	a9 87       	std	Y+9, r26	; 0x09
    26c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c6:	6f 81       	ldd	r22, Y+7	; 0x07
    26c8:	78 85       	ldd	r23, Y+8	; 0x08
    26ca:	89 85       	ldd	r24, Y+9	; 0x09
    26cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <main+0x70>
		__ticks = 1;
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
    26e6:	3f c0       	rjmp	.+126    	; 0x2766 <main+0xee>
	else if (__tmp > 65535)
    26e8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ea:	78 85       	ldd	r23, Y+8	; 0x08
    26ec:	89 85       	ldd	r24, Y+9	; 0x09
    26ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	3f ef       	ldi	r19, 0xFF	; 255
    26f4:	4f e7       	ldi	r20, 0x7F	; 127
    26f6:	57 e4       	ldi	r21, 0x47	; 71
    26f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fc:	18 16       	cp	r1, r24
    26fe:	4c f5       	brge	.+82     	; 0x2752 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2700:	6b 85       	ldd	r22, Y+11	; 0x0b
    2702:	7c 85       	ldd	r23, Y+12	; 0x0c
    2704:	8d 85       	ldd	r24, Y+13	; 0x0d
    2706:	9e 85       	ldd	r25, Y+14	; 0x0e
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e2       	ldi	r20, 0x20	; 32
    270e:	51 e4       	ldi	r21, 0x41	; 65
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <main+0xd0>
    272a:	88 ec       	ldi	r24, 0xC8	; 200
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <main+0xbe>
    273a:	9c 83       	std	Y+4, r25	; 0x04
    273c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	9e 83       	std	Y+6, r25	; 0x06
    2746:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	69 f7       	brne	.-38     	; 0x272a <main+0xb2>
    2750:	14 c0       	rjmp	.+40     	; 0x277a <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	8d 81       	ldd	r24, Y+5	; 0x05
    2768:	9e 81       	ldd	r25, Y+6	; 0x06
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <main+0xfa>
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	/* read the value of flag from memory */
	EEPROM_readByte(CODE_STATE_ADDRESS, &a_passwordState);
    277a:	9e 01       	movw	r18, r28
    277c:	2e 5e       	subi	r18, 0xEE	; 238
    277e:	3f 4f       	sbci	r19, 0xFF	; 255
    2780:	80 e1       	ldi	r24, 0x10	; 16
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	b9 01       	movw	r22, r18
    2786:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <EEPROM_readByte>
	/* check if HMI is ready to contact. if it is ready send the flag to it. */
	CTRL_sendACK();
    278a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
	UART_sendByte(a_passwordState);
    278e:	8a 89       	ldd	r24, Y+18	; 0x12
    2790:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>

	/* Don't come here again if you have set your password brefore. */
	if(a_passwordState == PASSWORD_NOT_ENTERED)
    2794:	8a 89       	ldd	r24, Y+18	; 0x12
    2796:	8f 3f       	cpi	r24, 0xFF	; 255
    2798:	11 f4       	brne	.+4      	; 0x279e <main+0x126>
		 * 5. if two passwords are matched store the password in memory.
		 * 6. send ready to contact to HMI and wait if until finish its task and respond by ready.
		 * 7. send the result of comparsion to HMI.
		 * 8. loop until the two password are matched.
		 ********************************************************************************************************/
		CTRL_passwordInputOperation();
    279a:	0e 94 27 12 	call	0x244e	; 0x244e <CTRL_passwordInputOperation>
	}

	/* set the flag to 1 and store it in memory to prevent the program from starting again from this point */
	a_passwordState = PASSWORD_ENTERED;
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	8a 8b       	std	Y+18, r24	; 0x12
	EEPROM_writeByte(CODE_STATE_ADDRESS, a_passwordState);
    27a2:	2a 89       	ldd	r18, Y+18	; 0x12
    27a4:	80 e1       	ldi	r24, 0x10	; 16
    27a6:	93 e0       	ldi	r25, 0x03	; 3
    27a8:	62 2f       	mov	r22, r18
    27aa:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <EEPROM_writeByte>

	/* Enable global interrupt */
	SREG |= (1<<7);
    27ae:	af e5       	ldi	r26, 0x5F	; 95
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ef e5       	ldi	r30, 0x5F	; 95
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	80 68       	ori	r24, 0x80	; 128
    27ba:	8c 93       	st	X, r24
	while(1)
	{
		CTRL_receiveACK();		/* wait until verify password is entered.*/
    27bc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <CTRL_receiveACK>
		a_CTROL_option = UART_receiveByte(); 	/* receive the selected option*/
    27c0:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    27c4:	8f 87       	std	Y+15, r24	; 0x0f

		switch(a_CTROL_option)
    27c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c8:	28 2f       	mov	r18, r24
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	3c 8b       	std	Y+20, r19	; 0x14
    27ce:	2b 8b       	std	Y+19, r18	; 0x13
    27d0:	8b 89       	ldd	r24, Y+19	; 0x13
    27d2:	9c 89       	ldd	r25, Y+20	; 0x14
    27d4:	8b 32       	cpi	r24, 0x2B	; 43
    27d6:	91 05       	cpc	r25, r1
    27d8:	31 f0       	breq	.+12     	; 0x27e6 <main+0x16e>
    27da:	2b 89       	ldd	r18, Y+19	; 0x13
    27dc:	3c 89       	ldd	r19, Y+20	; 0x14
    27de:	2d 32       	cpi	r18, 0x2D	; 45
    27e0:	31 05       	cpc	r19, r1
    27e2:	19 f1       	breq	.+70     	; 0x282a <main+0x1b2>
    27e4:	eb cf       	rjmp	.-42     	; 0x27bc <main+0x144>
			 * 5. compare the two passwords and put the result in a_CTROL_verification_res.
			 * 6. if a_verification_res = matched ==> implement the door action.
			 * 7. if a_verificatoin_res = mismatched ==> reenter the password again.
			 * 	7-1. if the passwords don't matched for three times ==> implement the alarm action.
			 *********************************************************************************************/
			a_num_of_wrong_passwords++;
    27e6:	89 89       	ldd	r24, Y+17	; 0x11
    27e8:	8f 5f       	subi	r24, 0xFF	; 255
    27ea:	89 8b       	std	Y+17, r24	; 0x11
			CTRL_receiveACK();
    27ec:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <CTRL_receiveACK>
			CTRL_receivePassword(g_confirmPassword_array);
    27f0:	81 e9       	ldi	r24, 0x91	; 145
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 05 10 	call	0x200a	; 0x200a <CTRL_receivePassword>
			CTRL_readPassword();
    27f8:	0e 94 df 11 	call	0x23be	; 0x23be <CTRL_readPassword>
			a_CTROL_verification_res = CTRL_compareTwoPasswords();
    27fc:	0e 94 00 12 	call	0x2400	; 0x2400 <CTRL_compareTwoPasswords>
    2800:	88 8b       	std	Y+16, r24	; 0x10

			if(a_CTROL_verification_res == MATCHED)
    2802:	88 89       	ldd	r24, Y+16	; 0x10
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	49 f4       	brne	.+18     	; 0x281a <main+0x1a2>
				 * 3.wait until the HMI finihes its task and ready to respond.
				 * 4.send the command generated depended on verification result to the HMI ECU.
				 * 5.start the door action.
				 * 6.return to option menu again after door actoin ended.(go to break from switch)
				 **********************************************************************************/
				a_num_of_wrong_passwords = 0;
    2808:	19 8a       	std	Y+17, r1	; 0x11
				CTRL_sendACK();
    280a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <CTRL_sendACK>
				UART_sendByte(DOOR_OPEN);
    280e:	88 e5       	ldi	r24, 0x58	; 88
    2810:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
				CTRL_doorAction();
    2814:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <CTRL_doorAction>
    2818:	d1 cf       	rjmp	.-94     	; 0x27bc <main+0x144>
			}
			else if(a_CTROL_verification_res == MISMATCHED)
    281a:	88 89       	ldd	r24, Y+16	; 0x10
    281c:	88 23       	and	r24, r24
    281e:	71 f6       	brne	.-100    	; 0x27bc <main+0x144>
				 * 	12-1. exit the loop.
				 * 	12-2. set num_of_wrong_passwords back to zero.
				 * 	12-3. apply functoin CONTROL_alarmAction.
				 * 	12-4. return back to the option menu.
				 ************************************************************************/
				CTRL_openDoorWrongPassword(&a_num_of_wrong_passwords);
    2820:	ce 01       	movw	r24, r28
    2822:	41 96       	adiw	r24, 0x11	; 17
    2824:	0e 94 98 12 	call	0x2530	; 0x2530 <CTRL_openDoorWrongPassword>
    2828:	c9 cf       	rjmp	.-110    	; 0x27bc <main+0x144>
			}
			break;		/* return to the option menu , exit from open door option case */

		case CHANGE_PASSWORD_OPTION:
			a_num_of_wrong_passwords ++;
    282a:	89 89       	ldd	r24, Y+17	; 0x11
    282c:	8f 5f       	subi	r24, 0xFF	; 255
    282e:	89 8b       	std	Y+17, r24	; 0x11
			 * 	6-1. send ready to the HMI and wait its readiness.
			 * 	6-2. send MISMATCHED message to HMI.
			 * 	6-3. loop until enter the correct password.
			 * 	6-4. if the user enter a wrong password for 3 times ==> implement alarm action.
			 ************************************************************************************/
			CTRL_changePassword(&a_num_of_wrong_passwords);
    2830:	ce 01       	movw	r24, r28
    2832:	41 96       	adiw	r24, 0x11	; 17
    2834:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <CTRL_changePassword>
    2838:	c1 cf       	rjmp	.-126    	; 0x27bc <main+0x144>

0000283a <__udivmodsi4>:
    283a:	a1 e2       	ldi	r26, 0x21	; 33
    283c:	1a 2e       	mov	r1, r26
    283e:	aa 1b       	sub	r26, r26
    2840:	bb 1b       	sub	r27, r27
    2842:	fd 01       	movw	r30, r26
    2844:	0d c0       	rjmp	.+26     	; 0x2860 <__udivmodsi4_ep>

00002846 <__udivmodsi4_loop>:
    2846:	aa 1f       	adc	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	ee 1f       	adc	r30, r30
    284c:	ff 1f       	adc	r31, r31
    284e:	a2 17       	cp	r26, r18
    2850:	b3 07       	cpc	r27, r19
    2852:	e4 07       	cpc	r30, r20
    2854:	f5 07       	cpc	r31, r21
    2856:	20 f0       	brcs	.+8      	; 0x2860 <__udivmodsi4_ep>
    2858:	a2 1b       	sub	r26, r18
    285a:	b3 0b       	sbc	r27, r19
    285c:	e4 0b       	sbc	r30, r20
    285e:	f5 0b       	sbc	r31, r21

00002860 <__udivmodsi4_ep>:
    2860:	66 1f       	adc	r22, r22
    2862:	77 1f       	adc	r23, r23
    2864:	88 1f       	adc	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	1a 94       	dec	r1
    286a:	69 f7       	brne	.-38     	; 0x2846 <__udivmodsi4_loop>
    286c:	60 95       	com	r22
    286e:	70 95       	com	r23
    2870:	80 95       	com	r24
    2872:	90 95       	com	r25
    2874:	9b 01       	movw	r18, r22
    2876:	ac 01       	movw	r20, r24
    2878:	bd 01       	movw	r22, r26
    287a:	cf 01       	movw	r24, r30
    287c:	08 95       	ret

0000287e <__prologue_saves__>:
    287e:	2f 92       	push	r2
    2880:	3f 92       	push	r3
    2882:	4f 92       	push	r4
    2884:	5f 92       	push	r5
    2886:	6f 92       	push	r6
    2888:	7f 92       	push	r7
    288a:	8f 92       	push	r8
    288c:	9f 92       	push	r9
    288e:	af 92       	push	r10
    2890:	bf 92       	push	r11
    2892:	cf 92       	push	r12
    2894:	df 92       	push	r13
    2896:	ef 92       	push	r14
    2898:	ff 92       	push	r15
    289a:	0f 93       	push	r16
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	ca 1b       	sub	r28, r26
    28a8:	db 0b       	sbc	r29, r27
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	09 94       	ijmp

000028b6 <__epilogue_restores__>:
    28b6:	2a 88       	ldd	r2, Y+18	; 0x12
    28b8:	39 88       	ldd	r3, Y+17	; 0x11
    28ba:	48 88       	ldd	r4, Y+16	; 0x10
    28bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    28be:	6e 84       	ldd	r6, Y+14	; 0x0e
    28c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c8:	b9 84       	ldd	r11, Y+9	; 0x09
    28ca:	c8 84       	ldd	r12, Y+8	; 0x08
    28cc:	df 80       	ldd	r13, Y+7	; 0x07
    28ce:	ee 80       	ldd	r14, Y+6	; 0x06
    28d0:	fd 80       	ldd	r15, Y+5	; 0x05
    28d2:	0c 81       	ldd	r16, Y+4	; 0x04
    28d4:	1b 81       	ldd	r17, Y+3	; 0x03
    28d6:	aa 81       	ldd	r26, Y+2	; 0x02
    28d8:	b9 81       	ldd	r27, Y+1	; 0x01
    28da:	ce 0f       	add	r28, r30
    28dc:	d1 1d       	adc	r29, r1
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	ed 01       	movw	r28, r26
    28ea:	08 95       	ret

000028ec <_exit>:
    28ec:	f8 94       	cli

000028ee <__stop_program>:
    28ee:	ff cf       	rjmp	.-2      	; 0x28ee <__stop_program>
