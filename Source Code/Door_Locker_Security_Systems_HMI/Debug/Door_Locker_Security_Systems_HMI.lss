
Door_Locker_Security_Systems_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003aba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00003aba  00003b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800144  00800144  00003c32  2**0
                  ALLOC
  3 .stab         0000399c  00000000  00000000  00003c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ca6  00000000  00000000  000075d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009276  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000093d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009565  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d630  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000da72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_6>
      1c:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_7>
      20:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 34       	cpi	r26, 0x47	; 71
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 1c 	call	0x38ca	; 0x38ca <main>
      8a:	0c 94 5b 1d 	jmp	0x3ab6	; 0x3ab6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e1       	ldi	r26, 0x1D	; 29
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e1       	ldi	r24, 0x1D	; 29
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e1       	ldi	r22, 0x1D	; 29
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_init>:

#include <util/delay.h>

#include "../../LIBRARIES/comman_macros.h"
void UART_init(UART_ConfigType* uart_config)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_init+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_init+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	19 82       	std	Y+1, r1	; 0x01
	/****************** UCSRA Description ******************************
	 * set U2X=1 for double transmission speed.
	 *******************************************************************/
	UCSRA = (1<<U2X);
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ******************************************************************/
	UCSRB = (1<<TXEN)|(1<<RXEN);
     cba:	ea e2       	ldi	r30, 0x2A	; 42
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	88 e1       	ldi	r24, 0x18	; 24
     cc0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (uart_config->N_StopBits<<USBS)|(uart_config->frame_type<<1)|(uart_config->parity_type<<4)|(1<<URSEL);
     cc2:	a0 e4       	ldi	r26, 0x40	; 64
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	86 81       	ldd	r24, Z+6	; 0x06
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	28 2f       	mov	r18, r24
     cde:	eb 81       	ldd	r30, Y+3	; 0x03
     ce0:	fc 81       	ldd	r31, Y+4	; 0x04
     ce2:	84 81       	ldd	r24, Z+4	; 0x04
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	28 2b       	or	r18, r24
     cee:	eb 81       	ldd	r30, Y+3	; 0x03
     cf0:	fc 81       	ldd	r31, Y+4	; 0x04
     cf2:	85 81       	ldd	r24, Z+5	; 0x05
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	82 95       	swap	r24
     cfa:	92 95       	swap	r25
     cfc:	90 7f       	andi	r25, 0xF0	; 240
     cfe:	98 27       	eor	r25, r24
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	98 27       	eor	r25, r24
     d04:	82 2b       	or	r24, r18
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	8c 93       	st	X, r24

	/* *************************************
	 * Calculate the UBRR register value
	 * *************************************/
	ubrr_value = (uint16)(((F_CPU)/(uart_config->baud_rate*8UL))-1);
     d0a:	eb 81       	ldd	r30, Y+3	; 0x03
     d0c:	fc 81       	ldd	r31, Y+4	; 0x04
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	a2 81       	ldd	r26, Z+2	; 0x02
     d14:	b3 81       	ldd	r27, Z+3	; 0x03
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	aa 1f       	adc	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	aa 1f       	adc	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	aa 1f       	adc	r26, r26
     d2c:	bb 1f       	adc	r27, r27
     d2e:	9c 01       	movw	r18, r24
     d30:	ad 01       	movw	r20, r26
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	92 e4       	ldi	r25, 0x42	; 66
     d36:	af e0       	ldi	r26, 0x0F	; 15
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 bd 1c 	call	0x397a	; 0x397a <__udivmodsi4>
     d42:	da 01       	movw	r26, r20
     d44:	c9 01       	movw	r24, r18
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01

	/****************************************************************************
	 * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 ****************************************************************************/
	UBRRH = (ubrr_value >> 8);
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	89 2f       	mov	r24, r25
     d56:	99 27       	eor	r25, r25
     d58:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     d5a:	e9 e2       	ldi	r30, 0x29	; 41
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 83       	st	Z, r24
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_sendByte>:

void UART_sendByte(uint8 a_data)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Poll until the USART data register empty flag is 1, to make sure the UDR has empty now and ready to transmit
	 *  a new data.
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     d7c:	eb e2       	ldi	r30, 0x2B	; 43
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	80 72       	andi	r24, 0x20	; 32
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	b9 f3       	breq	.-18     	; 0xd7c <UART_sendByte+0xc>
	/*
	 * Put the required data in UDR register
	 * It also clear the UDRE flag as the UDR register is not empty now.
	 */
	UDR = a_data;
     d8e:	ec e2       	ldi	r30, 0x2C	; 44
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 83       	st	Z, r24
}
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <UART_receiveByte>:


uint8 UART_receiveByte(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Poll until the receive complete flag is set, to make sure the UDR has an correctly unread data
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
     da6:	eb e2       	ldi	r30, 0x2B	; 43
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	dc f7       	brge	.-10     	; 0xda6 <UART_receiveByte+0x8>
	/* Read the unread data in the receive buffer register */
	return UDR;
     db0:	ec e2       	ldi	r30, 0x2C	; 44
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <GPT_startTimer>:
/*******************************************************************************
 * 						GPT Functions' Definition
 *******************************************************************************/

void GPT_startTimer(TimerType Tx)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
	if(Tx>=0 && Tx<=2)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	50 f4       	brcc	.+20     	; 0xde2 <GPT_startTimer+0x26>
	{
		switch(Tx)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	91 05       	cpc	r25, r1
     dd8:	21 f4       	brne	.+8      	; 0xde2 <GPT_startTimer+0x26>
			GPT_InitTimer0(&GPT_ConfigStructObj);
			break;
#endif
#if(GPT_T1_INT_ENABLE == ENABLE)
		case T1:
			GPT_InitTimer1(&GPT_ConfigStructObj);
     dda:	85 e2       	ldi	r24, 0x25	; 37
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	0e 94 20 07 	call	0xe40	; 0xe40 <GPT_InitTimer1>
	}
	else
	{
		/* Do Nothing... */
	}
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <GPT_stopTimer>:
	}
}
#endif
/*--------------------------------------- GPT_stopTimer ----------------------------------------------------------*/
void GPT_stopTimer(TimerType Tx)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <GPT_stopTimer+0x6>
     df0:	0f 92       	push	r0
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	89 83       	std	Y+1, r24	; 0x01
	switch(Tx)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	3b 83       	std	Y+3, r19	; 0x03
     e00:	2a 83       	std	Y+2, r18	; 0x02
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	9b 81       	ldd	r25, Y+3	; 0x03
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	91 05       	cpc	r25, r1
     e0a:	69 f0       	breq	.+26     	; 0xe26 <GPT_stopTimer+0x3c>
     e0c:	2a 81       	ldd	r18, Y+2	; 0x02
     e0e:	3b 81       	ldd	r19, Y+3	; 0x03
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	61 f0       	breq	.+24     	; 0xe2e <GPT_stopTimer+0x44>
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	59 f4       	brne	.+22     	; 0xe34 <GPT_stopTimer+0x4a>
	{
	case T0:
		TCCR0 = 0;
     e1e:	e3 e5       	ldi	r30, 0x53	; 83
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	10 82       	st	Z, r1
     e24:	07 c0       	rjmp	.+14     	; 0xe34 <GPT_stopTimer+0x4a>
		break;
	case T1:
		TCCR1B = 0;
     e26:	ee e4       	ldi	r30, 0x4E	; 78
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	10 82       	st	Z, r1
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <GPT_stopTimer+0x4a>
		break;
	case T2:
		TCCR2 = 0;
     e2e:	e5 e4       	ldi	r30, 0x45	; 69
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1
		break;
	default:
		/* Do Nothing...*/
		break;
	}
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <GPT_InitTimer1>:
}
#endif
/*------------------------------------------ GPT_InitTimer1 ------------------------------------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
static void GPT_InitTimer1(const GPT_ConfigType* Config_Ptr)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	00 d0       	rcall	.+0      	; 0xe46 <GPT_InitTimer1+0x6>
     e46:	00 d0       	rcall	.+0      	; 0xe48 <GPT_InitTimer1+0x8>
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	9a 83       	std	Y+2, r25	; 0x02
     e4e:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr != NULL_PTR)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	9a 81       	ldd	r25, Y+2	; 0x02
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	09 f4       	brne	.+2      	; 0xe5a <GPT_InitTimer1+0x1a>
     e58:	53 c0       	rjmp	.+166    	; 0xf00 <GPT_InitTimer1+0xc0>
	{
		/* Set an Initial Value for Timer1 */
		TCNT1 = Config_Ptr->GPT_Config[T1].TimerInitValue;
     e5a:	ac e4       	ldi	r26, 0x4C	; 76
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	84 85       	ldd	r24, Z+12	; 0x0c
     e64:	95 85       	ldd	r25, Z+13	; 0x0d
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	9c 93       	st	X, r25
     e6a:	8e 93       	st	-X, r24
		switch(Config_Ptr->GPT_Config[T1].mode)
     e6c:	e9 81       	ldd	r30, Y+1	; 0x01
     e6e:	fa 81       	ldd	r31, Y+2	; 0x02
     e70:	81 85       	ldd	r24, Z+9	; 0x09
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3c 83       	std	Y+4, r19	; 0x04
     e78:	2b 83       	std	Y+3, r18	; 0x03
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	31 f0       	breq	.+12     	; 0xe8e <GPT_InitTimer1+0x4e>
     e82:	2b 81       	ldd	r18, Y+3	; 0x03
     e84:	3c 81       	ldd	r19, Y+4	; 0x04
     e86:	22 30       	cpi	r18, 0x02	; 2
     e88:	31 05       	cpc	r19, r1
     e8a:	91 f0       	breq	.+36     	; 0xeb0 <GPT_InitTimer1+0x70>
     e8c:	39 c0       	rjmp	.+114    	; 0xf00 <GPT_InitTimer1+0xc0>
		{
		/*================================================= Normal Mode ===============================================*/
		case NORMAL:
			/* DISABLE PWM for Normal mode */
			TCCR1A = (1<<FOC1A)|(1<<FOC1B);
     e8e:	ef e4       	ldi	r30, 0x4F	; 79
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	8c e0       	ldi	r24, 0x0C	; 12
     e94:	80 83       	st	Z, r24
			/* Select the prescaler for Normal mode */
			TCCR1B = (TCCR1B & 0xF8)|(Config_Ptr->GPT_Config[T1].prescaler);
     e96:	ae e4       	ldi	r26, 0x4E	; 78
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ee e4       	ldi	r30, 0x4E	; 78
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	98 2f       	mov	r25, r24
     ea2:	98 7f       	andi	r25, 0xF8	; 248
     ea4:	e9 81       	ldd	r30, Y+1	; 0x01
     ea6:	fa 81       	ldd	r31, Y+2	; 0x02
     ea8:	82 85       	ldd	r24, Z+10	; 0x0a
     eaa:	89 2b       	or	r24, r25
     eac:	8c 93       	st	X, r24
     eae:	28 c0       	rjmp	.+80     	; 0xf00 <GPT_InitTimer1+0xc0>
			 */
			TCCR1B = (1<<WGM12)| (1<<WGM13)| ((TCCR1B & 0xF8) | (Config_Ptr->GPT_Config[T1].prescaler));

#elif(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_4)
			/* Initialize OCR1A = TOP ,for CTC Mode number (4)*/
			OCR1A = Config_Ptr->GPT_Config[T1].TimerCompValue;
     eb0:	aa e4       	ldi	r26, 0x4A	; 74
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	86 85       	ldd	r24, Z+14	; 0x0e
     eba:	97 85       	ldd	r25, Z+15	; 0x0f
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	9c 93       	st	X, r25
     ec0:	8e 93       	st	-X, r24
			 * |COM1A1|COM1A0|COM1B1|COM1B0|FOC1A|FOC1B|WGM11|WGM10|
			 * -----------------------------------------------------
			 * |CTC_waveForm |  0   |  0   |  1  |  1  |  0  |  0  |
			 * -----------------------------------------------------
			 */
			TCCR1A = (1<<FOC1A)|(1<<FOC1B)|(Config_Ptr->GPT_Config[T1].CTC_waveForm<<6);
     ec2:	af e4       	ldi	r26, 0x4F	; 79
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	83 85       	ldd	r24, Z+11	; 0x0b
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	00 24       	eor	r0, r0
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	07 94       	ror	r0
     ed8:	96 95       	lsr	r25
     eda:	87 95       	ror	r24
     edc:	07 94       	ror	r0
     ede:	98 2f       	mov	r25, r24
     ee0:	80 2d       	mov	r24, r0
     ee2:	8c 60       	ori	r24, 0x0C	; 12
     ee4:	8c 93       	st	X, r24
			 * |ICNC1 | ICES1 |  -  | WGM13 | WGM12 | CS12 | CS11 | CS10|
			 * ----------------------------------------------------------
			 * |  0   |   0   |  -  |   0   |   1   |  prescaler_value  |
			 * ----------------------------------------------------------
			 */
			TCCR1B = (1<<WGM12) | ((TCCR1B & 0xF8) | (Config_Ptr->GPT_Config[T1].prescaler));
     ee6:	ae e4       	ldi	r26, 0x4E	; 78
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ee e4       	ldi	r30, 0x4E	; 78
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	98 2f       	mov	r25, r24
     ef2:	98 7f       	andi	r25, 0xF8	; 248
     ef4:	e9 81       	ldd	r30, Y+1	; 0x01
     ef6:	fa 81       	ldd	r31, Y+2	; 0x02
     ef8:	82 85       	ldd	r24, Z+10	; 0x0a
     efa:	89 2b       	or	r24, r25
     efc:	88 60       	ori	r24, 0x08	; 8
     efe:	8c 93       	st	X, r24
	}
	else
	{
		/* Do Nothing...*/
	}
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <GPT_enableNotification>:
#endif
/*******************************************************************************
 * 						GPT Enable/Disable Notification Functions
 *******************************************************************************/
void GPT_enableNotification(TimerType Tx,GPT_ModeType mode)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2a 97       	sbiw	r28, 0x0a	; 10
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <GPT_enableNotification+0x20>
     f2c:	59 c0       	rjmp	.+178    	; 0xfe0 <GPT_enableNotification+0xd2>
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	88 23       	and	r24, r24
     f32:	21 f0       	breq	.+8      	; 0xf3c <GPT_enableNotification+0x2e>
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	82 30       	cpi	r24, 0x02	; 2
     f38:	09 f0       	breq	.+2      	; 0xf3c <GPT_enableNotification+0x2e>
     f3a:	52 c0       	rjmp	.+164    	; 0xfe0 <GPT_enableNotification+0xd2>
	{
		switch(Tx)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3a 87       	std	Y+10, r19	; 0x0a
     f44:	29 87       	std	Y+9, r18	; 0x09
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	f9 f0       	breq	.+62     	; 0xf8e <GPT_enableNotification+0x80>
     f50:	29 85       	ldd	r18, Y+9	; 0x09
     f52:	3a 85       	ldd	r19, Y+10	; 0x0a
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	79 f1       	breq	.+94     	; 0xfb8 <GPT_enableNotification+0xaa>
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	09 f0       	breq	.+2      	; 0xf64 <GPT_enableNotification+0x56>
     f62:	3e c0       	rjmp	.+124    	; 0xfe0 <GPT_enableNotification+0xd2>
		{
		case T0:
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE0):SET_BIT(TIMSK,OCIE0);
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 23       	and	r24, r24
     f68:	49 f4       	brne	.+18     	; 0xf7c <GPT_enableNotification+0x6e>
     f6a:	a9 e5       	ldi	r26, 0x59	; 89
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e9 e5       	ldi	r30, 0x59	; 89
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	81 60       	ori	r24, 0x01	; 1
     f76:	8c 93       	st	X, r24
     f78:	9c 91       	ld	r25, X
     f7a:	32 c0       	rjmp	.+100    	; 0xfe0 <GPT_enableNotification+0xd2>
     f7c:	a9 e5       	ldi	r26, 0x59	; 89
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 e5       	ldi	r30, 0x59	; 89
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	8c 93       	st	X, r24
     f8a:	2c 91       	ld	r18, X
     f8c:	29 c0       	rjmp	.+82     	; 0xfe0 <GPT_enableNotification+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE1):SET_BIT(TIMSK,TICIE1);

#else
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE1):SET_BIT(TIMSK,OCIE1A);
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	88 23       	and	r24, r24
     f92:	49 f4       	brne	.+18     	; 0xfa6 <GPT_enableNotification+0x98>
     f94:	a9 e5       	ldi	r26, 0x59	; 89
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e9 e5       	ldi	r30, 0x59	; 89
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	8c 93       	st	X, r24
     fa2:	3c 91       	ld	r19, X
     fa4:	1d c0       	rjmp	.+58     	; 0xfe0 <GPT_enableNotification+0xd2>
     fa6:	a9 e5       	ldi	r26, 0x59	; 89
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e9 e5       	ldi	r30, 0x59	; 89
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8c 93       	st	X, r24
     fb4:	8c 91       	ld	r24, X
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <GPT_enableNotification+0xd2>

#endif
			break;
		case T2:
			(mode == NORMAL)? SET_BIT(TIMSK,TOIE2):SET_BIT(TIMSK,OCIE2);
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	88 23       	and	r24, r24
     fbc:	49 f4       	brne	.+18     	; 0xfd0 <GPT_enableNotification+0xc2>
     fbe:	a9 e5       	ldi	r26, 0x59	; 89
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e9 e5       	ldi	r30, 0x59	; 89
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	8c 93       	st	X, r24
     fcc:	9c 91       	ld	r25, X
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <GPT_enableNotification+0xd2>
     fd0:	a9 e5       	ldi	r26, 0x59	; 89
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e9 e5       	ldi	r30, 0x59	; 89
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	8c 93       	st	X, r24
     fde:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
     fe0:	2a 96       	adiw	r28, 0x0a	; 10
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <GPT_disableNotification>:
/*------------------------------------------ GPT_disableNotification -------------------------------------------*/
void GPT_disableNotification(TimerType Tx,GPT_ModeType mode)
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	2a 97       	sbiw	r28, 0x0a	; 10
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	6a 83       	std	Y+2, r22	; 0x02
	if((Tx >= T0 && Tx <= T2) && (mode == NORMAL || mode == OUTPUT_COMPARE))
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	83 30       	cpi	r24, 0x03	; 3
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPT_disableNotification+0x20>
    1010:	59 c0       	rjmp	.+178    	; 0x10c4 <GPT_disableNotification+0xd2>
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	88 23       	and	r24, r24
    1016:	21 f0       	breq	.+8      	; 0x1020 <GPT_disableNotification+0x2e>
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	09 f0       	breq	.+2      	; 0x1020 <GPT_disableNotification+0x2e>
    101e:	52 c0       	rjmp	.+164    	; 0x10c4 <GPT_disableNotification+0xd2>
	{
		switch(Tx)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3a 87       	std	Y+10, r19	; 0x0a
    1028:	29 87       	std	Y+9, r18	; 0x09
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	f9 f0       	breq	.+62     	; 0x1072 <GPT_disableNotification+0x80>
    1034:	29 85       	ldd	r18, Y+9	; 0x09
    1036:	3a 85       	ldd	r19, Y+10	; 0x0a
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	79 f1       	breq	.+94     	; 0x109c <GPT_disableNotification+0xaa>
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	09 f0       	breq	.+2      	; 0x1048 <GPT_disableNotification+0x56>
    1046:	3e c0       	rjmp	.+124    	; 0x10c4 <GPT_disableNotification+0xd2>
		{
		case T0:
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE0):CLEAR_BIT(TIMSK,OCIE0);
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	88 23       	and	r24, r24
    104c:	49 f4       	brne	.+18     	; 0x1060 <GPT_disableNotification+0x6e>
    104e:	a9 e5       	ldi	r26, 0x59	; 89
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e9 e5       	ldi	r30, 0x59	; 89
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	8c 93       	st	X, r24
    105c:	9c 91       	ld	r25, X
    105e:	32 c0       	rjmp	.+100    	; 0x10c4 <GPT_disableNotification+0xd2>
    1060:	a9 e5       	ldi	r26, 0x59	; 89
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e9 e5       	ldi	r30, 0x59	; 89
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8d 7f       	andi	r24, 0xFD	; 253
    106c:	8c 93       	st	X, r24
    106e:	2c 91       	ld	r18, X
    1070:	29 c0       	rjmp	.+82     	; 0x10c4 <GPT_disableNotification+0xd2>
		case T1:
#if(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_12)
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE1):CLEAR_BIT(TIMSK,TICIE1);
			break;
#else
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE1):CLEAR_BIT(TIMSK,OCIE1A);
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	88 23       	and	r24, r24
    1076:	49 f4       	brne	.+18     	; 0x108a <GPT_disableNotification+0x98>
    1078:	a9 e5       	ldi	r26, 0x59	; 89
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e9 e5       	ldi	r30, 0x59	; 89
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8b 7f       	andi	r24, 0xFB	; 251
    1084:	8c 93       	st	X, r24
    1086:	3c 91       	ld	r19, X
    1088:	1d c0       	rjmp	.+58     	; 0x10c4 <GPT_disableNotification+0xd2>
    108a:	a9 e5       	ldi	r26, 0x59	; 89
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e9 e5       	ldi	r30, 0x59	; 89
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 7e       	andi	r24, 0xEF	; 239
    1096:	8c 93       	st	X, r24
    1098:	8c 91       	ld	r24, X
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <GPT_disableNotification+0xd2>
			break;
#endif
		case T2:
			(mode == NORMAL)? CLEAR_BIT(TIMSK,TOIE2):CLEAR_BIT(TIMSK,OCIE2);
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	88 23       	and	r24, r24
    10a0:	49 f4       	brne	.+18     	; 0x10b4 <GPT_disableNotification+0xc2>
    10a2:	a9 e5       	ldi	r26, 0x59	; 89
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e9 e5       	ldi	r30, 0x59	; 89
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8f 7b       	andi	r24, 0xBF	; 191
    10ae:	8c 93       	st	X, r24
    10b0:	9c 91       	ld	r25, X
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <GPT_disableNotification+0xd2>
    10b4:	a9 e5       	ldi	r26, 0x59	; 89
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 e5       	ldi	r30, 0x59	; 89
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 77       	andi	r24, 0x7F	; 127
    10c0:	8c 93       	st	X, r24
    10c2:	2c 91       	ld	r18, X
	}
	else
	{
		/* Do Nothing...*/
	}
}
    10c4:	2a 96       	adiw	r28, 0x0a	; 10
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <GPT_T1_setCallBack>:
}
#endif
/*--------------------------------------------------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
void GPT_T1_setCallBack(void (*a_Fun_Ptr)(void))
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPT_T1_setCallBack+0x6>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_callBack_Ptr = a_Fun_Ptr;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	9a 81       	ldd	r25, Y+2	; 0x02
    10e8:	90 93 45 01 	sts	0x0145, r25
    10ec:	80 93 44 01 	sts	0x0144, r24
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <__vector_8>:
}
#endif
/*-------------------------- TIMER1 ISR -------------------------*/
#if(GPT_T1_INT_ENABLE == ENABLE)
ISR(TIMER1_OVF_vect)
{
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	2f 93       	push	r18
    1106:	3f 93       	push	r19
    1108:	4f 93       	push	r20
    110a:	5f 93       	push	r21
    110c:	6f 93       	push	r22
    110e:	7f 93       	push	r23
    1110:	8f 93       	push	r24
    1112:	9f 93       	push	r25
    1114:	af 93       	push	r26
    1116:	bf 93       	push	r27
    1118:	ef 93       	push	r30
    111a:	ff 93       	push	r31
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    1124:	80 91 44 01 	lds	r24, 0x0144
    1128:	90 91 45 01 	lds	r25, 0x0145
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	29 f0       	breq	.+10     	; 0x113a <__vector_8+0x40>
		(*g_Timer1_callBack_Ptr)();
    1130:	e0 91 44 01 	lds	r30, 0x0144
    1134:	f0 91 45 01 	lds	r31, 0x0145
    1138:	09 95       	icall
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    118a:	80 91 44 01 	lds	r24, 0x0144
    118e:	90 91 45 01 	lds	r25, 0x0145
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	29 f0       	breq	.+10     	; 0x11a0 <__vector_6+0x40>
		(*g_Timer1_callBack_Ptr)();
    1196:	e0 91 44 01 	lds	r30, 0x0144
    119a:	f0 91 45 01 	lds	r31, 0x0145
    119e:	09 95       	icall
}
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	ff 91       	pop	r31
    11a6:	ef 91       	pop	r30
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    11f0:	80 91 44 01 	lds	r24, 0x0144
    11f4:	90 91 45 01 	lds	r25, 0x0145
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__vector_7+0x40>
		(*g_Timer1_callBack_Ptr)();
    11fc:	e0 91 44 01 	lds	r30, 0x0144
    1200:	f0 91 45 01 	lds	r31, 0x0145
    1204:	09 95       	icall
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 ----------------------------------------------------------------------------------------------*/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num, GPIO_PinDirectionType direction)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_setupPinDirection+0x6>
    1232:	00 d0       	rcall	.+0      	; 0x1234 <GPIO_setupPinDirection+0x8>
    1234:	0f 92       	push	r0
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
    123e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	08 f0       	brcs	.+2      	; 0x1248 <GPIO_setupPinDirection+0x1c>
    1246:	d5 c0       	rjmp	.+426    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	08 f0       	brcs	.+2      	; 0x1250 <GPIO_setupPinDirection+0x24>
    124e:	d1 c0       	rjmp	.+418    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3d 83       	std	Y+5, r19	; 0x05
    1258:	2c 83       	std	Y+4, r18	; 0x04
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <GPIO_setupPinDirection+0x3a>
    1264:	43 c0       	rjmp	.+134    	; 0x12ec <GPIO_setupPinDirection+0xc0>
    1266:	2c 81       	ldd	r18, Y+4	; 0x04
    1268:	3d 81       	ldd	r19, Y+5	; 0x05
    126a:	22 30       	cpi	r18, 0x02	; 2
    126c:	31 05       	cpc	r19, r1
    126e:	2c f4       	brge	.+10     	; 0x127a <GPIO_setupPinDirection+0x4e>
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	71 f0       	breq	.+28     	; 0x1294 <GPIO_setupPinDirection+0x68>
    1278:	bc c0       	rjmp	.+376    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
    127a:	2c 81       	ldd	r18, Y+4	; 0x04
    127c:	3d 81       	ldd	r19, Y+5	; 0x05
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <GPIO_setupPinDirection+0x5a>
    1284:	5f c0       	rjmp	.+190    	; 0x1344 <GPIO_setupPinDirection+0x118>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	09 f4       	brne	.+2      	; 0x1292 <GPIO_setupPinDirection+0x66>
    1290:	85 c0       	rjmp	.+266    	; 0x139c <GPIO_setupPinDirection+0x170>
    1292:	af c0       	rjmp	.+350    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	81 30       	cpi	r24, 0x01	; 1
    1298:	a1 f4       	brne	.+40     	; 0x12c2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    129a:	aa e3       	ldi	r26, 0x3A	; 58
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ea e3       	ldi	r30, 0x3A	; 58
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <GPIO_setupPinDirection+0x8c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <GPIO_setupPinDirection+0x88>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	98 c0       	rjmp	.+304    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    12c2:	aa e3       	ldi	r26, 0x3A	; 58
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ea e3       	ldi	r30, 0x3A	; 58
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <GPIO_setupPinDirection+0xb4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <GPIO_setupPinDirection+0xb0>
    12e4:	80 95       	com	r24
    12e6:	84 23       	and	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	83 c0       	rjmp	.+262    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12f2:	a7 e3       	ldi	r26, 0x37	; 55
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_setupPinDirection+0xe4>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_setupPinDirection+0xe0>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	6c c0       	rjmp	.+216    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    131a:	a7 e3       	ldi	r26, 0x37	; 55
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e7 e3       	ldi	r30, 0x37	; 55
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_setupPinDirection+0x10c>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_setupPinDirection+0x108>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	57 c0       	rjmp	.+174    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    134a:	a4 e3       	ldi	r26, 0x34	; 52
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e4 e3       	ldi	r30, 0x34	; 52
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_setupPinDirection+0x13c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_setupPinDirection+0x138>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	40 c0       	rjmp	.+128    	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1372:	a4 e3       	ldi	r26, 0x34	; 52
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e4 e3       	ldi	r30, 0x34	; 52
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_setupPinDirection+0x164>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_setupPinDirection+0x160>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	2b c0       	rjmp	.+86     	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13a2:	a1 e3       	ldi	r26, 0x31	; 49
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e1 e3       	ldi	r30, 0x31	; 49
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_setupPinDirection+0x194>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_setupPinDirection+0x190>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    13ca:	a1 e3       	ldi	r26, 0x31	; 49
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e1 e3       	ldi	r30, 0x31	; 49
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_setupPinDirection+0x1bc>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_setupPinDirection+0x1b8>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 ----------------------------------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num,uint8 pin_num, uint8 value)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GPIO_writePin+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <GPIO_writePin+0x8>
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	6a 83       	std	Y+2, r22	; 0x02
    1414:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num  >= NUM_OF_PORTS))
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	08 f0       	brcs	.+2      	; 0x141e <GPIO_writePin+0x1c>
    141c:	d5 c0       	rjmp	.+426    	; 0x15c8 <GPIO_writePin+0x1c6>
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	84 30       	cpi	r24, 0x04	; 4
    1422:	08 f0       	brcs	.+2      	; 0x1426 <GPIO_writePin+0x24>
    1424:	d1 c0       	rjmp	.+418    	; 0x15c8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3d 83       	std	Y+5, r19	; 0x05
    142e:	2c 83       	std	Y+4, r18	; 0x04
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
    1432:	9d 81       	ldd	r25, Y+5	; 0x05
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <GPIO_writePin+0x3a>
    143a:	43 c0       	rjmp	.+134    	; 0x14c2 <GPIO_writePin+0xc0>
    143c:	2c 81       	ldd	r18, Y+4	; 0x04
    143e:	3d 81       	ldd	r19, Y+5	; 0x05
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	2c f4       	brge	.+10     	; 0x1450 <GPIO_writePin+0x4e>
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	9d 81       	ldd	r25, Y+5	; 0x05
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	71 f0       	breq	.+28     	; 0x146a <GPIO_writePin+0x68>
    144e:	bc c0       	rjmp	.+376    	; 0x15c8 <GPIO_writePin+0x1c6>
    1450:	2c 81       	ldd	r18, Y+4	; 0x04
    1452:	3d 81       	ldd	r19, Y+5	; 0x05
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <GPIO_writePin+0x5a>
    145a:	5f c0       	rjmp	.+190    	; 0x151a <GPIO_writePin+0x118>
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	9d 81       	ldd	r25, Y+5	; 0x05
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	91 05       	cpc	r25, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <GPIO_writePin+0x66>
    1466:	85 c0       	rjmp	.+266    	; 0x1572 <GPIO_writePin+0x170>
    1468:	af c0       	rjmp	.+350    	; 0x15c8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	a1 f4       	brne	.+40     	; 0x1498 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1470:	ab e3       	ldi	r26, 0x3B	; 59
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	eb e3       	ldi	r30, 0x3B	; 59
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <GPIO_writePin+0x8c>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <GPIO_writePin+0x88>
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
    1496:	98 c0       	rjmp	.+304    	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1498:	ab e3       	ldi	r26, 0x3B	; 59
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <GPIO_writePin+0xb4>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <GPIO_writePin+0xb0>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	83 c0       	rjmp	.+262    	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    14c8:	a8 e3       	ldi	r26, 0x38	; 56
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e8 e3       	ldi	r30, 0x38	; 56
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_writePin+0xe4>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_writePin+0xe0>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	6c c0       	rjmp	.+216    	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    14f0:	a8 e3       	ldi	r26, 0x38	; 56
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e8 e3       	ldi	r30, 0x38	; 56
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_writePin+0x10c>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_writePin+0x108>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	57 c0       	rjmp	.+174    	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	a1 f4       	brne	.+40     	; 0x1548 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1520:	a5 e3       	ldi	r26, 0x35	; 53
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e3       	ldi	r30, 0x35	; 53
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_writePin+0x13c>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_writePin+0x138>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	40 c0       	rjmp	.+128    	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1548:	a5 e3       	ldi	r26, 0x35	; 53
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_writePin+0x164>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_writePin+0x160>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	2b c0       	rjmp	.+86     	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1578:	a2 e3       	ldi	r26, 0x32	; 50
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e2 e3       	ldi	r30, 0x32	; 50
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0x194>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0x190>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	14 c0       	rjmp	.+40     	; 0x15c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    15a0:	a2 e3       	ldi	r26, 0x32	; 50
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e2 e3       	ldi	r30, 0x32	; 50
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_writePin+0x1bc>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_writePin+0x1b8>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 ----------------------------------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <GPIO_readPin+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <GPIO_readPin+0x8>
    15e0:	0f 92       	push	r0
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	8a 83       	std	Y+2, r24	; 0x02
    15e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pin_value = LOGIC_LOW;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	88 30       	cpi	r24, 0x08	; 8
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <GPIO_readPin+0x1c>
    15f2:	84 c0       	rjmp	.+264    	; 0x16fc <GPIO_readPin+0x124>
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	84 30       	cpi	r24, 0x04	; 4
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <GPIO_readPin+0x24>
    15fa:	80 c0       	rjmp	.+256    	; 0x16fc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3d 83       	std	Y+5, r19	; 0x05
    1604:	2c 83       	std	Y+4, r18	; 0x04
    1606:	4c 81       	ldd	r20, Y+4	; 0x04
    1608:	5d 81       	ldd	r21, Y+5	; 0x05
    160a:	41 30       	cpi	r20, 0x01	; 1
    160c:	51 05       	cpc	r21, r1
    160e:	79 f1       	breq	.+94     	; 0x166e <GPIO_readPin+0x96>
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	9d 81       	ldd	r25, Y+5	; 0x05
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	91 05       	cpc	r25, r1
    1618:	34 f4       	brge	.+12     	; 0x1626 <GPIO_readPin+0x4e>
    161a:	2c 81       	ldd	r18, Y+4	; 0x04
    161c:	3d 81       	ldd	r19, Y+5	; 0x05
    161e:	21 15       	cp	r18, r1
    1620:	31 05       	cpc	r19, r1
    1622:	69 f0       	breq	.+26     	; 0x163e <GPIO_readPin+0x66>
    1624:	6b c0       	rjmp	.+214    	; 0x16fc <GPIO_readPin+0x124>
    1626:	4c 81       	ldd	r20, Y+4	; 0x04
    1628:	5d 81       	ldd	r21, Y+5	; 0x05
    162a:	42 30       	cpi	r20, 0x02	; 2
    162c:	51 05       	cpc	r21, r1
    162e:	b9 f1       	breq	.+110    	; 0x169e <GPIO_readPin+0xc6>
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <GPIO_readPin+0x64>
    163a:	49 c0       	rjmp	.+146    	; 0x16ce <GPIO_readPin+0xf6>
    163c:	5f c0       	rjmp	.+190    	; 0x16fc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    163e:	e9 e3       	ldi	r30, 0x39	; 57
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	a9 01       	movw	r20, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <GPIO_readPin+0x7e>
    1652:	55 95       	asr	r21
    1654:	47 95       	ror	r20
    1656:	8a 95       	dec	r24
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <GPIO_readPin+0x7a>
    165a:	ca 01       	movw	r24, r20
    165c:	81 70       	andi	r24, 0x01	; 1
    165e:	90 70       	andi	r25, 0x00	; 0
    1660:	88 23       	and	r24, r24
    1662:	19 f0       	breq	.+6      	; 0x166a <GPIO_readPin+0x92>
			{
				a_pin_value = LOGIC_HIGH;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	49 c0       	rjmp	.+146    	; 0x16fc <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    166a:	19 82       	std	Y+1, r1	; 0x01
    166c:	47 c0       	rjmp	.+142    	; 0x16fc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    166e:	e6 e3       	ldi	r30, 0x36	; 54
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a9 01       	movw	r20, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <GPIO_readPin+0xae>
    1682:	55 95       	asr	r21
    1684:	47 95       	ror	r20
    1686:	8a 95       	dec	r24
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <GPIO_readPin+0xaa>
    168a:	ca 01       	movw	r24, r20
    168c:	81 70       	andi	r24, 0x01	; 1
    168e:	90 70       	andi	r25, 0x00	; 0
    1690:	88 23       	and	r24, r24
    1692:	19 f0       	breq	.+6      	; 0x169a <GPIO_readPin+0xc2>
			{
				a_pin_value = LOGIC_HIGH;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	31 c0       	rjmp	.+98     	; 0x16fc <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	2f c0       	rjmp	.+94     	; 0x16fc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    169e:	e3 e3       	ldi	r30, 0x33	; 51
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <GPIO_readPin+0xde>
    16b2:	55 95       	asr	r21
    16b4:	47 95       	ror	r20
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <GPIO_readPin+0xda>
    16ba:	ca 01       	movw	r24, r20
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	90 70       	andi	r25, 0x00	; 0
    16c0:	88 23       	and	r24, r24
    16c2:	19 f0       	breq	.+6      	; 0x16ca <GPIO_readPin+0xf2>
			{
				a_pin_value = LOGIC_HIGH;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	19 c0       	rjmp	.+50     	; 0x16fc <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	17 c0       	rjmp	.+46     	; 0x16fc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    16ce:	e0 e3       	ldi	r30, 0x30	; 48
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a9 01       	movw	r20, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <GPIO_readPin+0x10e>
    16e2:	55 95       	asr	r21
    16e4:	47 95       	ror	r20
    16e6:	8a 95       	dec	r24
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <GPIO_readPin+0x10a>
    16ea:	ca 01       	movw	r24, r20
    16ec:	81 70       	andi	r24, 0x01	; 1
    16ee:	90 70       	andi	r25, 0x00	; 0
    16f0:	88 23       	and	r24, r24
    16f2:	19 f0       	breq	.+6      	; 0x16fa <GPIO_readPin+0x122>
			{
				a_pin_value = LOGIC_HIGH;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	01 c0       	rjmp	.+2      	; 0x16fc <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    16fa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return a_pin_value;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
------------------------------------------------------------------------------------------------ */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <GPIO_setupPortDirection+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <GPIO_setupPortDirection+0x8>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	90 f5       	brcc	.+100    	; 0x1788 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3c 83       	std	Y+4, r19	; 0x04
    172c:	2b 83       	std	Y+3, r18	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	d1 f0       	breq	.+52     	; 0x176c <GPIO_setupPortDirection+0x5e>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <GPIO_setupPortDirection+0x3e>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	61 f0       	breq	.+24     	; 0x1762 <GPIO_setupPortDirection+0x54>
    174a:	1e c0       	rjmp	.+60     	; 0x1788 <GPIO_setupPortDirection+0x7a>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	81 f0       	breq	.+32     	; 0x1776 <GPIO_setupPortDirection+0x68>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <GPIO_setupPortDirection+0x72>
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1762:	ea e3       	ldi	r30, 0x3A	; 58
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	80 83       	st	Z, r24
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    176c:	e7 e3       	ldi	r30, 0x37	; 55
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	80 83       	st	Z, r24
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	80 83       	st	Z, r24
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1780:	e1 e3       	ldi	r30, 0x31	; 49
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 83       	st	Z, r24
			break;
		}
	}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 --------------------------------------------------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <GPIO_writePort+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <GPIO_writePort+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	84 30       	cpi	r24, 0x04	; 4
    17aa:	90 f5       	brcc	.+100    	; 0x1810 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3c 83       	std	Y+4, r19	; 0x04
    17b4:	2b 83       	std	Y+3, r18	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	d1 f0       	breq	.+52     	; 0x17f4 <GPIO_writePort+0x5e>
    17c0:	2b 81       	ldd	r18, Y+3	; 0x03
    17c2:	3c 81       	ldd	r19, Y+4	; 0x04
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <GPIO_writePort+0x3e>
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	61 f0       	breq	.+24     	; 0x17ea <GPIO_writePort+0x54>
    17d2:	1e c0       	rjmp	.+60     	; 0x1810 <GPIO_writePort+0x7a>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	81 f0       	breq	.+32     	; 0x17fe <GPIO_writePort+0x68>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	83 30       	cpi	r24, 0x03	; 3
    17e4:	91 05       	cpc	r25, r1
    17e6:	81 f0       	breq	.+32     	; 0x1808 <GPIO_writePort+0x72>
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    17ea:	eb e3       	ldi	r30, 0x3B	; 59
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	80 83       	st	Z, r24
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17f4:	e8 e3       	ldi	r30, 0x38	; 56
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	80 83       	st	Z, r24
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17fe:	e5 e3       	ldi	r30, 0x35	; 53
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	80 83       	st	Z, r24
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1808:	e2 e3       	ldi	r30, 0x32	; 50
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 --------------------------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_readPort+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_readPort+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_value = LOGIC_LOW;
    182c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	84 30       	cpi	r24, 0x04	; 4
    1832:	90 f5       	brcc	.+100    	; 0x1898 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port a_value as required */
		switch(port_num)
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	d1 f0       	breq	.+52     	; 0x187c <GPIO_readPort+0x5e>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	2c f4       	brge	.+10     	; 0x185c <GPIO_readPort+0x3e>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 f0       	breq	.+24     	; 0x1872 <GPIO_readPort+0x54>
    185a:	1e c0       	rjmp	.+60     	; 0x1898 <GPIO_readPort+0x7a>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	81 f0       	breq	.+32     	; 0x1886 <GPIO_readPort+0x68>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <GPIO_readPort+0x72>
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_value = PINA;
    1872:	e9 e3       	ldi	r30, 0x39	; 57
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_value = PINB;
    187c:	e6 e3       	ldi	r30, 0x36	; 54
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_value = PINC;
    1886:	e3 e3       	ldi	r30, 0x33	; 51
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_value = PIND;
    1890:	e0 e3       	ldi	r30, 0x30	; 48
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_value;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <HMI_Init>:
 * 								Functions' Definitions
 *************************************************************************************************/

/*==================================== HMI_init ===============================================*/
void HMI_Init(void)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	2c 97       	sbiw	r28, 0x0c	; 12
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
//	T1_ConfigObj.mode = CTC;
//	T1_ConfigObj.TimerInitValue = 0;
//	T1_ConfigObj.TimerCompValue = 7811;
//	T1_ConfigObj.prescaler = PRESCALER_1024;
//	TIMER1_init(&T1_ConfigObj);
	GPT_startTimer(T1);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	0e 94 de 06 	call	0xdbc	; 0xdbc <GPT_startTimer>
	GPT_T1_setCallBack(HMI_callBack);
    18c2:	8c e5       	ldi	r24, 0x5C	; 92
    18c4:	91 e1       	ldi	r25, 0x11	; 17
    18c6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <GPT_T1_setCallBack>
	LCD_init();
    18ca:	0e 94 dd 16 	call	0x2dba	; 0x2dba <LCD_init>
	UART_ConfigType uart_configObj = {9600,EIGHT_BITS,DISABLE_PARITY,ONE_STOP_BIT};
    18ce:	ce 01       	movw	r24, r28
    18d0:	01 96       	adiw	r24, 0x01	; 1
    18d2:	99 87       	std	Y+9, r25	; 0x09
    18d4:	88 87       	std	Y+8, r24	; 0x08
    18d6:	ed e3       	ldi	r30, 0x3D	; 61
    18d8:	f1 e0       	ldi	r31, 0x01	; 1
    18da:	fb 87       	std	Y+11, r31	; 0x0b
    18dc:	ea 87       	std	Y+10, r30	; 0x0a
    18de:	f7 e0       	ldi	r31, 0x07	; 7
    18e0:	fc 87       	std	Y+12, r31	; 0x0c
    18e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    18e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    18e6:	00 80       	ld	r0, Z
    18e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	9b 87       	std	Y+11, r25	; 0x0b
    18f0:	8a 87       	std	Y+10, r24	; 0x0a
    18f2:	e8 85       	ldd	r30, Y+8	; 0x08
    18f4:	f9 85       	ldd	r31, Y+9	; 0x09
    18f6:	00 82       	st	Z, r0
    18f8:	88 85       	ldd	r24, Y+8	; 0x08
    18fa:	99 85       	ldd	r25, Y+9	; 0x09
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	99 87       	std	Y+9, r25	; 0x09
    1900:	88 87       	std	Y+8, r24	; 0x08
    1902:	9c 85       	ldd	r25, Y+12	; 0x0c
    1904:	91 50       	subi	r25, 0x01	; 1
    1906:	9c 87       	std	Y+12, r25	; 0x0c
    1908:	ec 85       	ldd	r30, Y+12	; 0x0c
    190a:	ee 23       	and	r30, r30
    190c:	51 f7       	brne	.-44     	; 0x18e2 <HMI_Init+0x3a>
	UART_init(&uart_configObj);
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_init>
	GPT_enableNotification(T1, OUTPUT_COMPARE);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	62 e0       	ldi	r22, 0x02	; 2
    191a:	0e 94 87 07 	call	0xf0e	; 0xf0e <GPT_enableNotification>
}
    191e:	2c 96       	adiw	r28, 0x0c	; 12
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <HMI_enterPassword>:

/*==================================== get_password ============================================*/
void HMI_enterPassword(void)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	65 97       	sbiw	r28, 0x15	; 21
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
	uint8 a_pass_array[NUMBER_OF_DIGITS_IN_PASSWORD],key,i=0;
    1944:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("Enter Your Pass");
    1946:	80 e6       	ldi	r24, 0x60	; 96
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
	LCD_moveCursor(1, 5);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	65 e0       	ldi	r22, 0x05	; 5
    1952:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_moveCursor>
    1956:	8c c0       	rjmp	.+280    	; 0x1a70 <HMI_enterPassword+0x140>
	while(i<5)
		{
			key = KEYPAD_getPressedKey();
    1958:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <KEYPAD_getPressedKey>
    195c:	88 8b       	std	Y+16, r24	; 0x10
			if(key >= 0 && key <= 9)
    195e:	88 89       	ldd	r24, Y+16	; 0x10
    1960:	8a 30       	cpi	r24, 0x0A	; 10
    1962:	70 f4       	brcc	.+28     	; 0x1980 <HMI_enterPassword+0x50>
			{
				a_pass_array[i] = key;
    1964:	8f 85       	ldd	r24, Y+15	; 0x0f
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	ce 01       	movw	r24, r28
    196c:	41 96       	adiw	r24, 0x11	; 17
    196e:	fc 01       	movw	r30, r24
    1970:	e2 0f       	add	r30, r18
    1972:	f3 1f       	adc	r31, r19
    1974:	88 89       	ldd	r24, Y+16	; 0x10
    1976:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    1978:	8a e2       	ldi	r24, 0x2A	; 42
    197a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayCharacter>
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <HMI_enterPassword+0x56>
			}
			else
			{
				--i;
    1980:	8f 85       	ldd	r24, Y+15	; 0x0f
    1982:	81 50       	subi	r24, 0x01	; 1
    1984:	8f 87       	std	Y+15, r24	; 0x0f
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	aa ef       	ldi	r26, 0xFA	; 250
    198c:	b3 e4       	ldi	r27, 0x43	; 67
    198e:	8b 87       	std	Y+11, r24	; 0x0b
    1990:	9c 87       	std	Y+12, r25	; 0x0c
    1992:	ad 87       	std	Y+13, r26	; 0x0d
    1994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	6b 85       	ldd	r22, Y+11	; 0x0b
    1998:	7c 85       	ldd	r23, Y+12	; 0x0c
    199a:	8d 85       	ldd	r24, Y+13	; 0x0d
    199c:	9e 85       	ldd	r25, Y+14	; 0x0e
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a ef       	ldi	r20, 0xFA	; 250
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	8f 83       	std	Y+7, r24	; 0x07
    19b0:	98 87       	std	Y+8, r25	; 0x08
    19b2:	a9 87       	std	Y+9, r26	; 0x09
    19b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <HMI_enterPassword+0xa8>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <HMI_enterPassword+0x126>
	else if (__tmp > 65535)
    19d8:	6f 81       	ldd	r22, Y+7	; 0x07
    19da:	78 85       	ldd	r23, Y+8	; 0x08
    19dc:	89 85       	ldd	r24, Y+9	; 0x09
    19de:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <HMI_enterPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <HMI_enterPassword+0x108>
    1a1a:	88 ec       	ldi	r24, 0xC8	; 200
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <HMI_enterPassword+0xf6>
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <HMI_enterPassword+0xea>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <HMI_enterPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <HMI_enterPassword+0x132>
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
			}

			_delay_ms(500);
			i++;
    1a6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6c:	8f 5f       	subi	r24, 0xFF	; 255
    1a6e:	8f 87       	std	Y+15, r24	; 0x0f
void HMI_enterPassword(void)
{
	uint8 a_pass_array[NUMBER_OF_DIGITS_IN_PASSWORD],key,i=0;
	LCD_displayString("Enter Your Pass");
	LCD_moveCursor(1, 5);
	while(i<5)
    1a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a72:	85 30       	cpi	r24, 0x05	; 5
    1a74:	08 f4       	brcc	.+2      	; 0x1a78 <HMI_enterPassword+0x148>
    1a76:	70 cf       	rjmp	.-288    	; 0x1958 <HMI_enterPassword+0x28>
			}

			_delay_ms(500);
			i++;
		}
	while(KEYPAD_getPressedKey() != ENTER);
    1a78:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <KEYPAD_getPressedKey>
    1a7c:	8d 30       	cpi	r24, 0x0D	; 13
    1a7e:	e1 f7       	brne	.-8      	; 0x1a78 <HMI_enterPassword+0x148>
	UART_sendByte(READY);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
	while(UART_receiveByte() != READY);
    1a86:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <HMI_enterPassword+0x156>
	HMI_sendPassword(a_pass_array);
    1a8e:	ce 01       	movw	r24, r28
    1a90:	41 96       	adiw	r24, 0x11	; 17
    1a92:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <HMI_sendPassword>
}
    1a96:	65 96       	adiw	r28, 0x15	; 21
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <HMI_enterConfirmPassword>:
/*==================================== get_confirmPassword =======================================*/
void HMI_enterConfirmPassword(void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	65 97       	sbiw	r28, 0x15	; 21
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
	uint8 key,i=0, a_confim_array[NUMBER_OF_DIGITS_IN_PASSWORD];
    1abc:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("Reenter The Pass");
    1abe:	80 e7       	ldi	r24, 0x70	; 112
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
	LCD_moveCursor(1, 5);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	65 e0       	ldi	r22, 0x05	; 5
    1aca:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_moveCursor>
    1ace:	8c c0       	rjmp	.+280    	; 0x1be8 <HMI_enterConfirmPassword+0x140>
	while(i<5)
		{
			key = KEYPAD_getPressedKey();
    1ad0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <KEYPAD_getPressedKey>
    1ad4:	88 8b       	std	Y+16, r24	; 0x10
			if(key >= 0 && key <= 9)
    1ad6:	88 89       	ldd	r24, Y+16	; 0x10
    1ad8:	8a 30       	cpi	r24, 0x0A	; 10
    1ada:	70 f4       	brcc	.+28     	; 0x1af8 <HMI_enterConfirmPassword+0x50>
			{
				a_confim_array[i] = key;
    1adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	41 96       	adiw	r24, 0x11	; 17
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	e2 0f       	add	r30, r18
    1aea:	f3 1f       	adc	r31, r19
    1aec:	88 89       	ldd	r24, Y+16	; 0x10
    1aee:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    1af0:	8a e2       	ldi	r24, 0x2A	; 42
    1af2:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayCharacter>
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <HMI_enterConfirmPassword+0x56>
			}
			else
			{
				--i;
    1af8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afa:	81 50       	subi	r24, 0x01	; 1
    1afc:	8f 87       	std	Y+15, r24	; 0x0f
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	aa ef       	ldi	r26, 0xFA	; 250
    1b04:	b3 e4       	ldi	r27, 0x43	; 67
    1b06:	8b 87       	std	Y+11, r24	; 0x0b
    1b08:	9c 87       	std	Y+12, r25	; 0x0c
    1b0a:	ad 87       	std	Y+13, r26	; 0x0d
    1b0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a ef       	ldi	r20, 0xFA	; 250
    1b1c:	54 e4       	ldi	r21, 0x44	; 68
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8f 83       	std	Y+7, r24	; 0x07
    1b28:	98 87       	std	Y+8, r25	; 0x08
    1b2a:	a9 87       	std	Y+9, r26	; 0x09
    1b2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b30:	78 85       	ldd	r23, Y+8	; 0x08
    1b32:	89 85       	ldd	r24, Y+9	; 0x09
    1b34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <HMI_enterConfirmPassword+0xa8>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9e 83       	std	Y+6, r25	; 0x06
    1b4c:	8d 83       	std	Y+5, r24	; 0x05
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <HMI_enterConfirmPassword+0x126>
	else if (__tmp > 65535)
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	57 e4       	ldi	r21, 0x47	; 71
    1b60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	4c f5       	brge	.+82     	; 0x1bba <HMI_enterConfirmPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <HMI_enterConfirmPassword+0x108>
    1b92:	88 ec       	ldi	r24, 0xC8	; 200
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 83       	std	Y+4, r25	; 0x04
    1b98:	8b 83       	std	Y+3, r24	; 0x03
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <HMI_enterConfirmPassword+0xf6>
    1ba2:	9c 83       	std	Y+4, r25	; 0x04
    1ba4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f7       	brne	.-38     	; 0x1b92 <HMI_enterConfirmPassword+0xea>
    1bb8:	14 c0       	rjmp	.+40     	; 0x1be2 <HMI_enterConfirmPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <HMI_enterConfirmPassword+0x132>
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(500);
			i++;
    1be2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be4:	8f 5f       	subi	r24, 0xFF	; 255
    1be6:	8f 87       	std	Y+15, r24	; 0x0f
void HMI_enterConfirmPassword(void)
{
	uint8 key,i=0, a_confim_array[NUMBER_OF_DIGITS_IN_PASSWORD];
	LCD_displayString("Reenter The Pass");
	LCD_moveCursor(1, 5);
	while(i<5)
    1be8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bea:	85 30       	cpi	r24, 0x05	; 5
    1bec:	08 f4       	brcc	.+2      	; 0x1bf0 <HMI_enterConfirmPassword+0x148>
    1bee:	70 cf       	rjmp	.-288    	; 0x1ad0 <HMI_enterConfirmPassword+0x28>
				--i;
			}
			_delay_ms(500);
			i++;
		}
	while(KEYPAD_getPressedKey() != ENTER);
    1bf0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <KEYPAD_getPressedKey>
    1bf4:	8d 30       	cpi	r24, 0x0D	; 13
    1bf6:	e1 f7       	brne	.-8      	; 0x1bf0 <HMI_enterConfirmPassword+0x148>
	UART_sendByte(READY);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
	while(UART_receiveByte() != READY);
    1bfe:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	e1 f7       	brne	.-8      	; 0x1bfe <HMI_enterConfirmPassword+0x156>
	HMI_sendPassword(a_confim_array);
    1c06:	ce 01       	movw	r24, r28
    1c08:	41 96       	adiw	r24, 0x11	; 17
    1c0a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <HMI_sendPassword>
}
    1c0e:	65 96       	adiw	r28, 0x15	; 21
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <HMI_passwordInputOperation>:
/*================================= displayChecknessResult =======================================*/
void HMI_passwordInputOperation(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	6f 97       	sbiw	r28, 0x1f	; 31
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
	uint8 a_password = 0;
    1c34:	1d 8e       	std	Y+29, r1	; 0x1d
	 * 	8-5. clear the screen.
	 * 9. loop until the user enter a matched passwords.
	 *******************************************************************************************************/
		do
		{
			HMI_enterPassword();
    1c36:	0e 94 98 0c 	call	0x1930	; 0x1930 <HMI_enterPassword>
			LCD_clearScreen();
    1c3a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
			HMI_enterConfirmPassword();
    1c3e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <HMI_enterConfirmPassword>
			LCD_clearScreen();
    1c42:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
			HMI_receiveACK();
    1c46:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HMI_receiveACK>
			a_password = UART_receiveByte();
    1c4a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    1c4e:	8d 8f       	std	Y+29, r24	; 0x1d
			switch(a_password)
    1c50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	3f 8f       	std	Y+31, r19	; 0x1f
    1c58:	2e 8f       	std	Y+30, r18	; 0x1e
    1c5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <HMI_passwordInputOperation+0x44>
    1c62:	8b c0       	rjmp	.+278    	; 0x1d7a <HMI_passwordInputOperation+0x15a>
    1c64:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1c66:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1c68:	21 30       	cpi	r18, 0x01	; 1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <HMI_passwordInputOperation+0x50>
    1c6e:	0a c1       	rjmp	.+532    	; 0x1e84 <HMI_passwordInputOperation+0x264>
			{
			case MATCHED:
				LCD_clearScreen();
    1c70:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 5, "MATCHED");
    1c74:	21 e8       	ldi	r18, 0x81	; 129
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	65 e0       	ldi	r22, 0x05	; 5
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 2, "Password Saved");
    1c82:	29 e8       	ldi	r18, 0x89	; 137
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	a9 01       	movw	r20, r18
    1c8c:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_displayStringRowColumn>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	aa ef       	ldi	r26, 0xFA	; 250
    1c96:	b3 e4       	ldi	r27, 0x43	; 67
    1c98:	89 8f       	std	Y+25, r24	; 0x19
    1c9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a ef       	ldi	r20, 0xFA	; 250
    1cae:	54 e4       	ldi	r21, 0x44	; 68
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	8d 8b       	std	Y+21, r24	; 0x15
    1cba:	9e 8b       	std	Y+22, r25	; 0x16
    1cbc:	af 8b       	std	Y+23, r26	; 0x17
    1cbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <HMI_passwordInputOperation+0xc2>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <HMI_passwordInputOperation+0x140>
	else if (__tmp > 65535)
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <HMI_passwordInputOperation+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9c 8b       	std	Y+20, r25	; 0x14
    1d20:	8b 8b       	std	Y+19, r24	; 0x13
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <HMI_passwordInputOperation+0x122>
    1d24:	88 ec       	ldi	r24, 0xC8	; 200
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9a 8b       	std	Y+18, r25	; 0x12
    1d2a:	89 8b       	std	Y+17, r24	; 0x11
    1d2c:	89 89       	ldd	r24, Y+17	; 0x11
    1d2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <HMI_passwordInputOperation+0x110>
    1d34:	9a 8b       	std	Y+18, r25	; 0x12
    1d36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	9c 8b       	std	Y+20, r25	; 0x14
    1d40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8b 89       	ldd	r24, Y+19	; 0x13
    1d44:	9c 89       	ldd	r25, Y+20	; 0x14
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <HMI_passwordInputOperation+0x104>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <HMI_passwordInputOperation+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d50:	8f 89       	ldd	r24, Y+23	; 0x17
    1d52:	98 8d       	ldd	r25, Y+24	; 0x18
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9c 8b       	std	Y+20, r25	; 0x14
    1d5e:	8b 8b       	std	Y+19, r24	; 0x13
    1d60:	8b 89       	ldd	r24, Y+19	; 0x13
    1d62:	9c 89       	ldd	r25, Y+20	; 0x14
    1d64:	98 8b       	std	Y+16, r25	; 0x10
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	98 89       	ldd	r25, Y+16	; 0x10
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <HMI_passwordInputOperation+0x14c>
    1d70:	98 8b       	std	Y+16, r25	; 0x10
    1d72:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
    1d74:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
    1d78:	85 c0       	rjmp	.+266    	; 0x1e84 <HMI_passwordInputOperation+0x264>
				break;
			case MISMATCHED:
				LCD_clearScreen();
    1d7a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
				LCD_moveCursor(0, 3);
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	63 e0       	ldi	r22, 0x03	; 3
    1d82:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_moveCursor>
				LCD_displayString("MISMATCHED");
    1d86:	88 e9       	ldi	r24, 0x98	; 152
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
				LCD_displayStringRowColumn(1, 3, "TRY AGAIN");
    1d8e:	23 ea       	ldi	r18, 0xA3	; 163
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	63 e0       	ldi	r22, 0x03	; 3
    1d96:	a9 01       	movw	r20, r18
    1d98:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_displayStringRowColumn>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	aa ef       	ldi	r26, 0xFA	; 250
    1da2:	b3 e4       	ldi	r27, 0x43	; 67
    1da4:	8b 87       	std	Y+11, r24	; 0x0b
    1da6:	9c 87       	std	Y+12, r25	; 0x0c
    1da8:	ad 87       	std	Y+13, r26	; 0x0d
    1daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a ef       	ldi	r20, 0xFA	; 250
    1dba:	54 e4       	ldi	r21, 0x44	; 68
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8f 83       	std	Y+7, r24	; 0x07
    1dc6:	98 87       	std	Y+8, r25	; 0x08
    1dc8:	a9 87       	std	Y+9, r26	; 0x09
    1dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dce:	78 85       	ldd	r23, Y+8	; 0x08
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	2c f4       	brge	.+10     	; 0x1dee <HMI_passwordInputOperation+0x1ce>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	8d 83       	std	Y+5, r24	; 0x05
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <HMI_passwordInputOperation+0x24c>
	else if (__tmp > 65535)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	4c f5       	brge	.+82     	; 0x1e58 <HMI_passwordInputOperation+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9e 83       	std	Y+6, r25	; 0x06
    1e2c:	8d 83       	std	Y+5, r24	; 0x05
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <HMI_passwordInputOperation+0x22e>
    1e30:	88 ec       	ldi	r24, 0xC8	; 200
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <HMI_passwordInputOperation+0x21c>
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	9e 83       	std	Y+6, r25	; 0x06
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f7       	brne	.-38     	; 0x1e30 <HMI_passwordInputOperation+0x210>
    1e56:	14 c0       	rjmp	.+40     	; 0x1e80 <HMI_passwordInputOperation+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5a:	78 85       	ldd	r23, Y+8	; 0x08
    1e5c:	89 85       	ldd	r24, Y+9	; 0x09
    1e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	9a 81       	ldd	r25, Y+2	; 0x02
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <HMI_passwordInputOperation+0x258>
    1e7c:	9a 83       	std	Y+2, r25	; 0x02
    1e7e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_clearScreen();
    1e80:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
//				LCD_displayString("MISMATCHED");
//				LCD_displayStringRowColumn(1, 3, "TRY AGAIN");
//				_delay_ms(500);
//				LCD_clearScreen();
//			}
		}while(a_password == MISMATCHED);
    1e84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e86:	88 23       	and	r24, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <HMI_passwordInputOperation+0x26c>
    1e8a:	d5 ce       	rjmp	.-598    	; 0x1c36 <HMI_passwordInputOperation+0x16>
}
    1e8c:	6f 96       	adiw	r28, 0x1f	; 31
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <HMI_getChosenOption>:
/*==================================== HMI_getChosenOption ================================*/
uint8 HMI_getChosenOption(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	0f 92       	push	r0
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	uint8 a_option = 0;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		LCD_displayString("+:Open Door");
    1eaa:	8d ea       	ldi	r24, 0xAD	; 173
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "-:Change Pass");
    1eb2:	29 eb       	ldi	r18, 0xB9	; 185
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	a9 01       	movw	r20, r18
    1ebc:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_displayStringRowColumn>
		a_option = KEYPAD_getPressedKey();
    1ec0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <KEYPAD_getPressedKey>
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	}while((a_option != OPEN_DOOR_OPTION && a_option != CHANGE_PASSWORD_OPTION));
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	8b 32       	cpi	r24, 0x2B	; 43
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <HMI_getChosenOption+0x34>
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	8d 32       	cpi	r24, 0x2D	; 45
    1ed0:	61 f7       	brne	.-40     	; 0x1eaa <HMI_getChosenOption+0xc>
	return a_option;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <HMI_sendPassword>:
/*==================================== sendPassword =======================================*/
void HMI_sendPassword(uint8 *a_password)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	61 97       	sbiw	r28, 0x11	; 17
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	99 8b       	std	Y+17, r25	; 0x11
    1ef2:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    1ef4:	1f 86       	std	Y+15, r1	; 0x0f
    1ef6:	80 c0       	rjmp	.+256    	; 0x1ff8 <HMI_sendPassword+0x11c>
	{
		UART_sendByte(a_password[i]);
    1ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	88 89       	ldd	r24, Y+16	; 0x10
    1f00:	99 89       	ldd	r25, Y+17	; 0x11
    1f02:	fc 01       	movw	r30, r24
    1f04:	e2 0f       	add	r30, r18
    1f06:	f3 1f       	adc	r31, r19
    1f08:	80 81       	ld	r24, Z
    1f0a:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a8 e4       	ldi	r26, 0x48	; 72
    1f14:	b2 e4       	ldi	r27, 0x42	; 66
    1f16:	8b 87       	std	Y+11, r24	; 0x0b
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	ad 87       	std	Y+13, r26	; 0x0d
    1f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a ef       	ldi	r20, 0xFA	; 250
    1f2c:	54 e4       	ldi	r21, 0x44	; 68
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	98 87       	std	Y+8, r25	; 0x08
    1f3a:	a9 87       	std	Y+9, r26	; 0x09
    1f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <HMI_sendPassword+0x84>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <HMI_sendPassword+0x102>
	else if (__tmp > 65535)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <HMI_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <HMI_sendPassword+0xe4>
    1fa2:	88 ec       	ldi	r24, 0xC8	; 200
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <HMI_sendPassword+0xd2>
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <HMI_sendPassword+0xc6>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <HMI_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <HMI_sendPassword+0x10e>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== sendPassword =======================================*/
void HMI_sendPassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    1ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
    1ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ffa:	85 30       	cpi	r24, 0x05	; 5
    1ffc:	08 f4       	brcc	.+2      	; 0x2000 <HMI_sendPassword+0x124>
    1ffe:	7c cf       	rjmp	.-264    	; 0x1ef8 <HMI_sendPassword+0x1c>
	{
		UART_sendByte(a_password[i]);
		_delay_ms(50);
	}
}
    2000:	61 96       	adiw	r28, 0x11	; 17
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <HMI_readPassword>:
/*==================================== readPassword =======================================*/
void HMI_readPassword(uint8 *a_password)
{
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	61 97       	sbiw	r28, 0x11	; 17
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	99 8b       	std	Y+17, r25	; 0x11
    202c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    202e:	1f 86       	std	Y+15, r1	; 0x0f
    2030:	81 c0       	rjmp	.+258    	; 0x2134 <HMI_readPassword+0x122>
	{
		a_password[i] = UART_receiveByte();
    2032:	8f 85       	ldd	r24, Y+15	; 0x0f
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	88 89       	ldd	r24, Y+16	; 0x10
    203a:	99 89       	ldd	r25, Y+17	; 0x11
    203c:	8c 01       	movw	r16, r24
    203e:	02 0f       	add	r16, r18
    2040:	13 1f       	adc	r17, r19
    2042:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    2046:	f8 01       	movw	r30, r16
    2048:	80 83       	st	Z, r24
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a8 e4       	ldi	r26, 0x48	; 72
    2050:	b2 e4       	ldi	r27, 0x42	; 66
    2052:	8b 87       	std	Y+11, r24	; 0x0b
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	ad 87       	std	Y+13, r26	; 0x0d
    2058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8f 83       	std	Y+7, r24	; 0x07
    2074:	98 87       	std	Y+8, r25	; 0x08
    2076:	a9 87       	std	Y+9, r26	; 0x09
    2078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <HMI_readPassword+0x8a>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	3f c0       	rjmp	.+126    	; 0x211a <HMI_readPassword+0x108>
	else if (__tmp > 65535)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <HMI_readPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <HMI_readPassword+0xea>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <HMI_readPassword+0xd8>
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <HMI_readPassword+0xcc>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <HMI_readPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <HMI_readPassword+0x114>
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== readPassword =======================================*/
void HMI_readPassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	8f 87       	std	Y+15, r24	; 0x0f
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	85 30       	cpi	r24, 0x05	; 5
    2138:	08 f4       	brcc	.+2      	; 0x213c <HMI_readPassword+0x12a>
    213a:	7b cf       	rjmp	.-266    	; 0x2032 <HMI_readPassword+0x20>
	{
		a_password[i] = UART_receiveByte();
		_delay_ms(50);
	}
}
    213c:	61 96       	adiw	r28, 0x11	; 17
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	08 95       	ret

00002152 <HMI_displayDoorAction>:
	LCD_displayStringRowColumn(1, 0, "-:Change Pass");
}
#endif
/*======================================== Door_action ==========================================*/
void HMI_displayDoorAction(void)
{
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	2e 97       	sbiw	r28, 0x0e	; 14
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	f8 94       	cli
    2160:	de bf       	out	0x3e, r29	; 62
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	cd bf       	out	0x3d, r28	; 61
	 * 10. wait for 15 seconds.
	 * 11. clear screen.
	 * 12. display "Door close" for 100 msec.
	 * 13. clear the screen.
	 **************************************************/
	g_seconds = 0;
    2166:	10 92 46 01 	sts	0x0146, r1
	LCD_clearScreen();
    216a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door Is Opening");
    216e:	27 ec       	ldi	r18, 0xC7	; 199
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	a9 01       	movw	r20, r18
    2178:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_displayStringRowColumn>
	while(g_seconds < TIME_OF_DOOR_OPEN);
    217c:	80 91 46 01 	lds	r24, 0x0146
    2180:	8f 30       	cpi	r24, 0x0F	; 15
    2182:	e0 f3       	brcs	.-8      	; 0x217c <HMI_displayDoorAction+0x2a>
	LCD_clearScreen();
    2184:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door Open..");
    2188:	27 ed       	ldi	r18, 0xD7	; 215
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	a9 01       	movw	r20, r18
    2192:	0e 94 47 1b 	call	0x368e	; 0x368e <LCD_displayStringRowColumn>
	while(g_seconds < (TIME_OF_DOOR_STOP+TIME_OF_DOOR_OPEN));
    2196:	80 91 46 01 	lds	r24, 0x0146
    219a:	82 31       	cpi	r24, 0x12	; 18
    219c:	e0 f3       	brcs	.-8      	; 0x2196 <HMI_displayDoorAction+0x44>
	LCD_clearScreen();
    219e:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	LCD_displayString("Door Is Closing");
    21a2:	83 ee       	ldi	r24, 0xE3	; 227
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
	while(g_seconds < (TIME_OF_DOOR_STOP+TIME_OF_DOOR_OPEN+TIME_OF_DOOR_CLOSE));
    21aa:	80 91 46 01 	lds	r24, 0x0146
    21ae:	81 32       	cpi	r24, 0x21	; 33
    21b0:	e0 f3       	brcs	.-8      	; 0x21aa <HMI_displayDoorAction+0x58>
	LCD_clearScreen();
    21b2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	LCD_displayString("Door close");
    21b6:	83 ef       	ldi	r24, 0xF3	; 243
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a8 ec       	ldi	r26, 0xC8	; 200
    21c4:	b2 e4       	ldi	r27, 0x42	; 66
    21c6:	8b 87       	std	Y+11, r24	; 0x0b
    21c8:	9c 87       	std	Y+12, r25	; 0x0c
    21ca:	ad 87       	std	Y+13, r26	; 0x0d
    21cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a ef       	ldi	r20, 0xFA	; 250
    21dc:	54 e4       	ldi	r21, 0x44	; 68
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8f 83       	std	Y+7, r24	; 0x07
    21e8:	98 87       	std	Y+8, r25	; 0x08
    21ea:	a9 87       	std	Y+9, r26	; 0x09
    21ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <HMI_displayDoorAction+0xbe>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	3f c0       	rjmp	.+126    	; 0x228e <HMI_displayDoorAction+0x13c>
	else if (__tmp > 65535)
    2210:	6f 81       	ldd	r22, Y+7	; 0x07
    2212:	78 85       	ldd	r23, Y+8	; 0x08
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <HMI_displayDoorAction+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <HMI_displayDoorAction+0x11e>
    2252:	88 ec       	ldi	r24, 0xC8	; 200
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	8b 83       	std	Y+3, r24	; 0x03
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <HMI_displayDoorAction+0x10c>
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <HMI_displayDoorAction+0x100>
    2278:	14 c0       	rjmp	.+40     	; 0x22a2 <HMI_displayDoorAction+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <HMI_displayDoorAction+0x148>
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	LCD_clearScreen();
    22a2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
}
    22a6:	2e 96       	adiw	r28, 0x0e	; 14
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	de bf       	out	0x3e, r29	; 62
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <HMI_callBack>:
/*======================================== implementOptionMenu ==========================================*/
void HMI_callBack(void)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    22c0:	80 91 46 01 	lds	r24, 0x0146
    22c4:	8f 5f       	subi	r24, 0xFF	; 255
    22c6:	80 93 46 01 	sts	0x0146, r24
}
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <HMI_receiveACK>:

/*======================================== HMI_receiveACK ==========================================*/
void HMI_receiveACK(void)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the control ECU check the password*/
	while(UART_receiveByte() != READY);
    22d8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    22dc:	81 30       	cpi	r24, 0x01	; 1
    22de:	e1 f7       	brne	.-8      	; 0x22d8 <HMI_receiveACK+0x8>
	UART_sendByte(READY);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <HMI_sendACK>:
/*======================================== HMI_sendACK ==========================================*/
void HMI_sendACK(void)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
	while(UART_receiveByte() != READY);
    22fa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	e1 f7       	brne	.-8      	; 0x22fa <HMI_sendACK+0xe>
}
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <HMI_displayAlarmAction>:
/*======================================== HMI_displayAlarmAction =======================================*/
void HMI_displayAlarmAction(void)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    2310:	10 92 46 01 	sts	0x0146, r1
	LCD_clearScreen();
    2314:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	LCD_displayString("ERROR OPERATION");
    2318:	8e ef       	ldi	r24, 0xFE	; 254
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
	while(g_seconds < TIME_OF_ALARM);
    2320:	80 91 46 01 	lds	r24, 0x0146
    2324:	8c 33       	cpi	r24, 0x3C	; 60
    2326:	e0 f3       	brcs	.-8      	; 0x2320 <HMI_displayAlarmAction+0x18>
	LCD_clearScreen();
    2328:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
}
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <HMI_openDoorWrongPassword>:
/*======================================== HMI_openDoorCheckPassword =====================================*/
void HMI_openDoorWrongPassword(uint8 *a_NumberOfWrongPasswords)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	60 97       	sbiw	r28, 0x10	; 16
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	98 8b       	std	Y+16, r25	; 0x10
    2348:	8f 87       	std	Y+15, r24	; 0x0f
    234a:	8f c0       	rjmp	.+286    	; 0x246a <HMI_openDoorWrongPassword+0x138>
	 * 	10-2. reset the number of wrong passwords to 0.
	 * 	10-3. display the alarm message.
	 *************************************************************************************************/
	while((*a_NumberOfWrongPasswords)< MAX_NUM_OF_WRONG_PASS_ENTERED)
	{
	(*a_NumberOfWrongPasswords)++;
    234c:	ef 85       	ldd	r30, Y+15	; 0x0f
    234e:	f8 89       	ldd	r31, Y+16	; 0x10
    2350:	80 81       	ld	r24, Z
    2352:	8f 5f       	subi	r24, 0xFF	; 255
    2354:	ef 85       	ldd	r30, Y+15	; 0x0f
    2356:	f8 89       	ldd	r31, Y+16	; 0x10
    2358:	80 83       	st	Z, r24
	LCD_clearScreen();
    235a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	LCD_displayString("Wrong Password");
    235e:	8e e0       	ldi	r24, 0x0E	; 14
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	aa ef       	ldi	r26, 0xFA	; 250
    236c:	b3 e4       	ldi	r27, 0x43	; 67
    236e:	8b 87       	std	Y+11, r24	; 0x0b
    2370:	9c 87       	std	Y+12, r25	; 0x0c
    2372:	ad 87       	std	Y+13, r26	; 0x0d
    2374:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	4a ef       	ldi	r20, 0xFA	; 250
    2384:	54 e4       	ldi	r21, 0x44	; 68
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	8f 83       	std	Y+7, r24	; 0x07
    2390:	98 87       	std	Y+8, r25	; 0x08
    2392:	a9 87       	std	Y+9, r26	; 0x09
    2394:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2396:	6f 81       	ldd	r22, Y+7	; 0x07
    2398:	78 85       	ldd	r23, Y+8	; 0x08
    239a:	89 85       	ldd	r24, Y+9	; 0x09
    239c:	9a 85       	ldd	r25, Y+10	; 0x0a
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	5f e3       	ldi	r21, 0x3F	; 63
    23a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	2c f4       	brge	.+10     	; 0x23b8 <HMI_openDoorWrongPassword+0x86>
		__ticks = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9e 83       	std	Y+6, r25	; 0x06
    23b4:	8d 83       	std	Y+5, r24	; 0x05
    23b6:	3f c0       	rjmp	.+126    	; 0x2436 <HMI_openDoorWrongPassword+0x104>
	else if (__tmp > 65535)
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	3f ef       	ldi	r19, 0xFF	; 255
    23c4:	4f e7       	ldi	r20, 0x7F	; 127
    23c6:	57 e4       	ldi	r21, 0x47	; 71
    23c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23cc:	18 16       	cp	r1, r24
    23ce:	4c f5       	brge	.+82     	; 0x2422 <HMI_openDoorWrongPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e2       	ldi	r20, 0x20	; 32
    23de:	51 e4       	ldi	r21, 0x41	; 65
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	bc 01       	movw	r22, r24
    23ea:	cd 01       	movw	r24, r26
    23ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	8d 83       	std	Y+5, r24	; 0x05
    23f8:	0f c0       	rjmp	.+30     	; 0x2418 <HMI_openDoorWrongPassword+0xe6>
    23fa:	88 ec       	ldi	r24, 0xC8	; 200
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	01 97       	sbiw	r24, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <HMI_openDoorWrongPassword+0xd4>
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240e:	8d 81       	ldd	r24, Y+5	; 0x05
    2410:	9e 81       	ldd	r25, Y+6	; 0x06
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	00 97       	sbiw	r24, 0x00	; 0
    241e:	69 f7       	brne	.-38     	; 0x23fa <HMI_openDoorWrongPassword+0xc8>
    2420:	14 c0       	rjmp	.+40     	; 0x244a <HMI_openDoorWrongPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2422:	6f 81       	ldd	r22, Y+7	; 0x07
    2424:	78 85       	ldd	r23, Y+8	; 0x08
    2426:	89 85       	ldd	r24, Y+9	; 0x09
    2428:	9a 85       	ldd	r25, Y+10	; 0x0a
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	9e 81       	ldd	r25, Y+6	; 0x06
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <HMI_openDoorWrongPassword+0x110>
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen();
    244a:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	/* enter the password again from user */
	HMI_enterPassword();
    244e:	0e 94 98 0c 	call	0x1930	; 0x1930 <HMI_enterPassword>
	/* check if CONTROL ECU had finished its task and ready for communicate */
	HMI_receiveACK();
    2452:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HMI_receiveACK>
	/* receive the result of comparsion between the two passwords */
	//a_verification_message = UART_receiveByte();
	if(UART_receiveByte() == MATCHED)
    2456:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	31 f4       	brne	.+12     	; 0x246a <HMI_openDoorWrongPassword+0x138>
	{
		(*a_NumberOfWrongPasswords) = 0;
    245e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2460:	f8 89       	ldd	r31, Y+16	; 0x10
    2462:	10 82       	st	Z, r1
		HMI_displayDoorAction();
    2464:	0e 94 a9 10 	call	0x2152	; 0x2152 <HMI_displayDoorAction>
    2468:	06 c0       	rjmp	.+12     	; 0x2476 <HMI_openDoorWrongPassword+0x144>
	 * 10. if the number of wrong passwords reaches its maximum value (3):
	 * 	10-1. exit from the loop.
	 * 	10-2. reset the number of wrong passwords to 0.
	 * 	10-3. display the alarm message.
	 *************************************************************************************************/
	while((*a_NumberOfWrongPasswords)< MAX_NUM_OF_WRONG_PASS_ENTERED)
    246a:	ef 85       	ldd	r30, Y+15	; 0x0f
    246c:	f8 89       	ldd	r31, Y+16	; 0x10
    246e:	80 81       	ld	r24, Z
    2470:	83 30       	cpi	r24, 0x03	; 3
    2472:	08 f4       	brcc	.+2      	; 0x2476 <HMI_openDoorWrongPassword+0x144>
    2474:	6b cf       	rjmp	.-298    	; 0x234c <HMI_openDoorWrongPassword+0x1a>
		(*a_NumberOfWrongPasswords) = 0;
		HMI_displayDoorAction();
		break;  /* exit the while loop */
	}
	}
	if((*a_NumberOfWrongPasswords) == MAX_NUM_OF_WRONG_PASS_ENTERED)
    2476:	ef 85       	ldd	r30, Y+15	; 0x0f
    2478:	f8 89       	ldd	r31, Y+16	; 0x10
    247a:	80 81       	ld	r24, Z
    247c:	83 30       	cpi	r24, 0x03	; 3
    247e:	29 f4       	brne	.+10     	; 0x248a <HMI_openDoorWrongPassword+0x158>
	{
		(*a_NumberOfWrongPasswords) = 0;
    2480:	ef 85       	ldd	r30, Y+15	; 0x0f
    2482:	f8 89       	ldd	r31, Y+16	; 0x10
    2484:	10 82       	st	Z, r1
		HMI_displayAlarmAction();
    2486:	0e 94 84 11 	call	0x2308	; 0x2308 <HMI_displayAlarmAction>
	}
}
    248a:	60 96       	adiw	r28, 0x10	; 16
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <HMI_changePassword>:
/*================================= HMI_changePassword ======================================*/
void HMI_changePassword(uint8 *a_NumberOfWrongPasswords)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	60 97       	sbiw	r28, 0x10	; 16
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	98 8b       	std	Y+16, r25	; 0x10
    24b2:	8f 87       	std	Y+15, r24	; 0x0f
	 * 	8-11. if the number of wrong passwords == 3:
	 * 		8-11-1. reset the value of number of wrong passwords.
	 * 		8-11-2. display the alarm action.
	 * 9. clear the screen.
	 *********************************************************************************************************************************/
 	LCD_clearScreen();
    24b4:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>

 	HMI_sendACK();
    24b8:	0e 94 76 11 	call	0x22ec	; 0x22ec <HMI_sendACK>
	UART_sendByte(CHANGE_PASSWORD_OPTION);
    24bc:	8d e2       	ldi	r24, 0x2D	; 45
    24be:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>

	/************** Actualy start ***********************/
	HMI_enterPassword();
    24c2:	0e 94 98 0c 	call	0x1930	; 0x1930 <HMI_enterPassword>
	HMI_receiveACK();
    24c6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HMI_receiveACK>
	//a_verificationMessage = UART_receiveByte();

	if(UART_receiveByte() == CHANGE_PASSWORD)
    24ca:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    24ce:	8c 32       	cpi	r24, 0x2C	; 44
    24d0:	41 f4       	brne	.+16     	; 0x24e2 <HMI_changePassword+0x46>
	{
	 	LCD_clearScreen();
    24d2:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
	 	HMI_passwordInputOperation();
    24d6:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <HMI_passwordInputOperation>
		(*a_NumberOfWrongPasswords) = 0;
    24da:	ef 85       	ldd	r30, Y+15	; 0x0f
    24dc:	f8 89       	ldd	r31, Y+16	; 0x10
    24de:	10 82       	st	Z, r1
    24e0:	a7 c0       	rjmp	.+334    	; 0x2630 <HMI_changePassword+0x194>
	}
	else if(UART_receiveByte() == MISMATCHED)
    24e2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    24e6:	88 23       	and	r24, r24
    24e8:	09 f0       	breq	.+2      	; 0x24ec <HMI_changePassword+0x50>
    24ea:	a2 c0       	rjmp	.+324    	; 0x2630 <HMI_changePassword+0x194>
    24ec:	91 c0       	rjmp	.+290    	; 0x2610 <HMI_changePassword+0x174>
	{
		while((*a_NumberOfWrongPasswords) < MAX_NUM_OF_WRONG_PASS_ENTERED)
		{
			(*a_NumberOfWrongPasswords)++;
    24ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    24f0:	f8 89       	ldd	r31, Y+16	; 0x10
    24f2:	80 81       	ld	r24, Z
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    24f8:	f8 89       	ldd	r31, Y+16	; 0x10
    24fa:	80 83       	st	Z, r24
			LCD_clearScreen();
    24fc:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    2500:	8e e0       	ldi	r24, 0x0E	; 14
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	aa ef       	ldi	r26, 0xFA	; 250
    250e:	b3 e4       	ldi	r27, 0x43	; 67
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a ef       	ldi	r20, 0xFA	; 250
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <HMI_changePassword+0xbe>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <HMI_changePassword+0x13c>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <HMI_changePassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <HMI_changePassword+0x11e>
    259c:	88 ec       	ldi	r24, 0xC8	; 200
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <HMI_changePassword+0x10c>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <HMI_changePassword+0x100>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <HMI_changePassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <HMI_changePassword+0x148>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    25ec:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
			HMI_enterPassword();
    25f0:	0e 94 98 0c 	call	0x1930	; 0x1930 <HMI_enterPassword>
			HMI_receiveACK();
    25f4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HMI_receiveACK>
			//a_verificationMessage = UART_receiveByte();

			if(UART_receiveByte() == CHANGE_PASSWORD)
    25f8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    25fc:	8c 32       	cpi	r24, 0x2C	; 44
    25fe:	41 f4       	brne	.+16     	; 0x2610 <HMI_changePassword+0x174>
			{
				LCD_clearScreen();
    2600:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
				(*a_NumberOfWrongPasswords) = 0;
    2604:	ef 85       	ldd	r30, Y+15	; 0x0f
    2606:	f8 89       	ldd	r31, Y+16	; 0x10
    2608:	10 82       	st	Z, r1
				HMI_passwordInputOperation();
    260a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <HMI_passwordInputOperation>
    260e:	06 c0       	rjmp	.+12     	; 0x261c <HMI_changePassword+0x180>
	 	HMI_passwordInputOperation();
		(*a_NumberOfWrongPasswords) = 0;
	}
	else if(UART_receiveByte() == MISMATCHED)
	{
		while((*a_NumberOfWrongPasswords) < MAX_NUM_OF_WRONG_PASS_ENTERED)
    2610:	ef 85       	ldd	r30, Y+15	; 0x0f
    2612:	f8 89       	ldd	r31, Y+16	; 0x10
    2614:	80 81       	ld	r24, Z
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	08 f4       	brcc	.+2      	; 0x261c <HMI_changePassword+0x180>
    261a:	69 cf       	rjmp	.-302    	; 0x24ee <HMI_changePassword+0x52>
				(*a_NumberOfWrongPasswords) = 0;
				HMI_passwordInputOperation();
				break;
			}
		}
		if((*a_NumberOfWrongPasswords) == MAX_NUM_OF_WRONG_PASS_ENTERED)
    261c:	ef 85       	ldd	r30, Y+15	; 0x0f
    261e:	f8 89       	ldd	r31, Y+16	; 0x10
    2620:	80 81       	ld	r24, Z
    2622:	83 30       	cpi	r24, 0x03	; 3
    2624:	29 f4       	brne	.+10     	; 0x2630 <HMI_changePassword+0x194>
		{
			(*a_NumberOfWrongPasswords) = 0;
    2626:	ef 85       	ldd	r30, Y+15	; 0x0f
    2628:	f8 89       	ldd	r31, Y+16	; 0x10
    262a:	10 82       	st	Z, r1
			HMI_displayAlarmAction();
    262c:	0e 94 84 11 	call	0x2308	; 0x2308 <HMI_displayAlarmAction>
		}
	}
	LCD_clearScreen();
    2630:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
}
    2634:	60 96       	adiw	r28, 0x10	; 16
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	cf 91       	pop	r28
    2642:	df 91       	pop	r29
    2644:	08 95       	ret

00002646 <LCD_sendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_sendCommand(uint8 command)
{
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	c1 56       	subi	r28, 0x61	; 97
    2654:	d0 40       	sbci	r29, 0x00	; 0
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	cd bf       	out	0x3d, r28	; 61
    2660:	fe 01       	movw	r30, r28
    2662:	ef 59       	subi	r30, 0x9F	; 159
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 83       	st	Z, r24
	 * send command
	 * wait
	 * Active E pin LOW
	 * wait
	 ************************************************/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	61 e0       	ldi	r22, 0x01	; 1
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
    267c:	fe 01       	movw	r30, r28
    267e:	e3 5a       	subi	r30, 0xA3	; 163
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a8 e4       	ldi	r26, 0x48	; 72
    2688:	b2 e4       	ldi	r27, 0x42	; 66
    268a:	80 83       	st	Z, r24
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	a2 83       	std	Z+2, r26	; 0x02
    2690:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2692:	8e 01       	movw	r16, r28
    2694:	07 5a       	subi	r16, 0xA7	; 167
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	fe 01       	movw	r30, r28
    269a:	e3 5a       	subi	r30, 0xA3	; 163
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	2b ea       	ldi	r18, 0xAB	; 171
    26a8:	3a ea       	ldi	r19, 0xAA	; 170
    26aa:	4a ea       	ldi	r20, 0xAA	; 170
    26ac:	5e e3       	ldi	r21, 0x3E	; 62
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	f8 01       	movw	r30, r16
    26b8:	80 83       	st	Z, r24
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	a2 83       	std	Z+2, r26	; 0x02
    26be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c0:	fe 01       	movw	r30, r28
    26c2:	e7 5a       	subi	r30, 0xA7	; 167
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e8       	ldi	r20, 0x80	; 128
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26da:	88 23       	and	r24, r24
    26dc:	34 f4       	brge	.+12     	; 0x26ea <LCD_sendCommand+0xa4>
		__ticks = 1;
    26de:	fe 01       	movw	r30, r28
    26e0:	e8 5a       	subi	r30, 0xA8	; 168
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	80 83       	st	Z, r24
    26e8:	e0 c0       	rjmp	.+448    	; 0x28aa <LCD_sendCommand+0x264>
	else if (__tmp > 255)
    26ea:	fe 01       	movw	r30, r28
    26ec:	e7 5a       	subi	r30, 0xA7	; 167
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	53 e4       	ldi	r21, 0x43	; 67
    2700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	0c f0       	brlt	.+2      	; 0x270a <LCD_sendCommand+0xc4>
    2708:	c0 c0       	rjmp	.+384    	; 0x288a <LCD_sendCommand+0x244>
	{
		_delay_ms(__us / 1000.0);
    270a:	fe 01       	movw	r30, r28
    270c:	e3 5a       	subi	r30, 0xA3	; 163
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	60 81       	ld	r22, Z
    2712:	71 81       	ldd	r23, Z+1	; 0x01
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a e7       	ldi	r20, 0x7A	; 122
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	fe 01       	movw	r30, r28
    272a:	ec 5a       	subi	r30, 0xAC	; 172
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 83       	st	Z, r24
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	a2 83       	std	Z+2, r26	; 0x02
    2734:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	8e 01       	movw	r16, r28
    2738:	00 5b       	subi	r16, 0xB0	; 176
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	fe 01       	movw	r30, r28
    273e:	ec 5a       	subi	r30, 0xAC	; 172
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	82 81       	ldd	r24, Z+2	; 0x02
    2748:	93 81       	ldd	r25, Z+3	; 0x03
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a e7       	ldi	r20, 0x7A	; 122
    2750:	53 e4       	ldi	r21, 0x43	; 67
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	f8 01       	movw	r30, r16
    275c:	80 83       	st	Z, r24
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	a2 83       	std	Z+2, r26	; 0x02
    2762:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2764:	fe 01       	movw	r30, r28
    2766:	e0 5b       	subi	r30, 0xB0	; 176
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	44 f4       	brge	.+16     	; 0x2792 <LCD_sendCommand+0x14c>
		__ticks = 1;
    2782:	fe 01       	movw	r30, r28
    2784:	e2 5b       	subi	r30, 0xB2	; 178
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	64 c0       	rjmp	.+200    	; 0x285a <LCD_sendCommand+0x214>
	else if (__tmp > 65535)
    2792:	fe 01       	movw	r30, r28
    2794:	e0 5b       	subi	r30, 0xB0	; 176
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	60 81       	ld	r22, Z
    279a:	71 81       	ldd	r23, Z+1	; 0x01
    279c:	82 81       	ldd	r24, Z+2	; 0x02
    279e:	93 81       	ldd	r25, Z+3	; 0x03
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	0c f0       	brlt	.+2      	; 0x27b2 <LCD_sendCommand+0x16c>
    27b0:	43 c0       	rjmp	.+134    	; 0x2838 <LCD_sendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	fe 01       	movw	r30, r28
    27b4:	ec 5a       	subi	r30, 0xAC	; 172
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8e 01       	movw	r16, r28
    27d2:	02 5b       	subi	r16, 0xB2	; 178
    27d4:	1f 4f       	sbci	r17, 0xFF	; 255
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	f8 01       	movw	r30, r16
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
    27e8:	1f c0       	rjmp	.+62     	; 0x2828 <LCD_sendCommand+0x1e2>
    27ea:	fe 01       	movw	r30, r28
    27ec:	e4 5b       	subi	r30, 0xB4	; 180
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	89 e1       	ldi	r24, 0x19	; 25
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
    27f8:	fe 01       	movw	r30, r28
    27fa:	e4 5b       	subi	r30, 0xB4	; 180
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	80 81       	ld	r24, Z
    2800:	91 81       	ldd	r25, Z+1	; 0x01
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_sendCommand+0x1bc>
    2806:	fe 01       	movw	r30, r28
    2808:	e4 5b       	subi	r30, 0xB4	; 180
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	91 83       	std	Z+1, r25	; 0x01
    280e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2810:	de 01       	movw	r26, r28
    2812:	a2 5b       	subi	r26, 0xB2	; 178
    2814:	bf 4f       	sbci	r27, 0xFF	; 255
    2816:	fe 01       	movw	r30, r28
    2818:	e2 5b       	subi	r30, 0xB2	; 178
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	11 96       	adiw	r26, 0x01	; 1
    2824:	9c 93       	st	X, r25
    2826:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2828:	fe 01       	movw	r30, r28
    282a:	e2 5b       	subi	r30, 0xB2	; 178
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	d1 f6       	brne	.-76     	; 0x27ea <LCD_sendCommand+0x1a4>
    2836:	4b c0       	rjmp	.+150    	; 0x28ce <LCD_sendCommand+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	8e 01       	movw	r16, r28
    283a:	02 5b       	subi	r16, 0xB2	; 178
    283c:	1f 4f       	sbci	r17, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	e0 5b       	subi	r30, 0xB0	; 176
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	f8 01       	movw	r30, r16
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	80 83       	st	Z, r24
    285a:	de 01       	movw	r26, r28
    285c:	a6 5b       	subi	r26, 0xB6	; 182
    285e:	bf 4f       	sbci	r27, 0xFF	; 255
    2860:	fe 01       	movw	r30, r28
    2862:	e2 5b       	subi	r30, 0xB2	; 178
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	11 96       	adiw	r26, 0x01	; 1
    286c:	9c 93       	st	X, r25
    286e:	8e 93       	st	-X, r24
    2870:	fe 01       	movw	r30, r28
    2872:	e6 5b       	subi	r30, 0xB6	; 182
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	80 81       	ld	r24, Z
    2878:	91 81       	ldd	r25, Z+1	; 0x01
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_sendCommand+0x234>
    287e:	fe 01       	movw	r30, r28
    2880:	e6 5b       	subi	r30, 0xB6	; 182
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	91 83       	std	Z+1, r25	; 0x01
    2886:	80 83       	st	Z, r24
    2888:	22 c0       	rjmp	.+68     	; 0x28ce <LCD_sendCommand+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    288a:	8e 01       	movw	r16, r28
    288c:	08 5a       	subi	r16, 0xA8	; 168
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	e7 5a       	subi	r30, 0xA7	; 167
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	f8 01       	movw	r30, r16
    28a8:	80 83       	st	Z, r24
    28aa:	de 01       	movw	r26, r28
    28ac:	a7 5b       	subi	r26, 0xB7	; 183
    28ae:	bf 4f       	sbci	r27, 0xFF	; 255
    28b0:	fe 01       	movw	r30, r28
    28b2:	e8 5a       	subi	r30, 0xA8	; 168
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28ba:	fe 01       	movw	r30, r28
    28bc:	e7 5b       	subi	r30, 0xB7	; 183
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 81       	ld	r24, Z
    28c2:	8a 95       	dec	r24
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_sendCommand+0x27c>
    28c6:	fe 01       	movw	r30, r28
    28c8:	e7 5b       	subi	r30, 0xB7	; 183
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	62 e0       	ldi	r22, 0x02	; 2
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
    28d8:	fe 01       	movw	r30, r28
    28da:	eb 5b       	subi	r30, 0xBB	; 187
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a8 e4       	ldi	r26, 0x48	; 72
    28e4:	b3 e4       	ldi	r27, 0x43	; 67
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28ee:	8e 01       	movw	r16, r28
    28f0:	0f 5b       	subi	r16, 0xBF	; 191
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	eb 5b       	subi	r30, 0xBB	; 187
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	2b ea       	ldi	r18, 0xAB	; 171
    2904:	3a ea       	ldi	r19, 0xAA	; 170
    2906:	4a ea       	ldi	r20, 0xAA	; 170
    2908:	5e e3       	ldi	r21, 0x3E	; 62
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291c:	fe 01       	movw	r30, r28
    291e:	ef 5b       	subi	r30, 0xBF	; 191
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	34 f4       	brge	.+12     	; 0x2946 <LCD_sendCommand+0x300>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	fe 01       	movw	r30, r28
    293e:	e0 5c       	subi	r30, 0xC0	; 192
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	80 83       	st	Z, r24
    2944:	9d c0       	rjmp	.+314    	; 0x2a80 <LCD_sendCommand+0x43a>
	else if (__tmp > 255)
    2946:	fe 01       	movw	r30, r28
    2948:	ef 5b       	subi	r30, 0xBF	; 191
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4f e7       	ldi	r20, 0x7F	; 127
    295a:	53 e4       	ldi	r21, 0x43	; 67
    295c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2960:	18 16       	cp	r1, r24
    2962:	0c f0       	brlt	.+2      	; 0x2966 <LCD_sendCommand+0x320>
    2964:	7e c0       	rjmp	.+252    	; 0x2a62 <LCD_sendCommand+0x41c>
	{
		_delay_ms(__us / 1000.0);
    2966:	fe 01       	movw	r30, r28
    2968:	eb 5b       	subi	r30, 0xBB	; 187
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	60 81       	ld	r22, Z
    296e:	71 81       	ldd	r23, Z+1	; 0x01
    2970:	82 81       	ldd	r24, Z+2	; 0x02
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	4a e7       	ldi	r20, 0x7A	; 122
    297a:	54 e4       	ldi	r21, 0x44	; 68
    297c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	8c af       	std	Y+60, r24	; 0x3c
    2986:	9d af       	std	Y+61, r25	; 0x3d
    2988:	ae af       	std	Y+62, r26	; 0x3e
    298a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298c:	6c ad       	ldd	r22, Y+60	; 0x3c
    298e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2990:	8e ad       	ldd	r24, Y+62	; 0x3e
    2992:	9f ad       	ldd	r25, Y+63	; 0x3f
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a e7       	ldi	r20, 0x7A	; 122
    299a:	53 e4       	ldi	r21, 0x43	; 67
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	88 af       	std	Y+56, r24	; 0x38
    29a6:	99 af       	std	Y+57, r25	; 0x39
    29a8:	aa af       	std	Y+58, r26	; 0x3a
    29aa:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    29ac:	68 ad       	ldd	r22, Y+56	; 0x38
    29ae:	79 ad       	ldd	r23, Y+57	; 0x39
    29b0:	8a ad       	ldd	r24, Y+58	; 0x3a
    29b2:	9b ad       	ldd	r25, Y+59	; 0x3b
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	2c f4       	brge	.+10     	; 0x29ce <LCD_sendCommand+0x388>
		__ticks = 1;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9f ab       	std	Y+55, r25	; 0x37
    29ca:	8e ab       	std	Y+54, r24	; 0x36
    29cc:	3f c0       	rjmp	.+126    	; 0x2a4c <LCD_sendCommand+0x406>
	else if (__tmp > 65535)
    29ce:	68 ad       	ldd	r22, Y+56	; 0x38
    29d0:	79 ad       	ldd	r23, Y+57	; 0x39
    29d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    29d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	4c f5       	brge	.+82     	; 0x2a38 <LCD_sendCommand+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    29e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    29ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    29ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9f ab       	std	Y+55, r25	; 0x37
    2a0c:	8e ab       	std	Y+54, r24	; 0x36
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <LCD_sendCommand+0x3e8>
    2a10:	89 e1       	ldi	r24, 0x19	; 25
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9d ab       	std	Y+53, r25	; 0x35
    2a16:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a18:	8c a9       	ldd	r24, Y+52	; 0x34
    2a1a:	9d a9       	ldd	r25, Y+53	; 0x35
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <LCD_sendCommand+0x3d6>
    2a20:	9d ab       	std	Y+53, r25	; 0x35
    2a22:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	8e a9       	ldd	r24, Y+54	; 0x36
    2a26:	9f a9       	ldd	r25, Y+55	; 0x37
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	9f ab       	std	Y+55, r25	; 0x37
    2a2c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	8e a9       	ldd	r24, Y+54	; 0x36
    2a30:	9f a9       	ldd	r25, Y+55	; 0x37
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	69 f7       	brne	.-38     	; 0x2a10 <LCD_sendCommand+0x3ca>
    2a36:	2d c0       	rjmp	.+90     	; 0x2a92 <LCD_sendCommand+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a38:	68 ad       	ldd	r22, Y+56	; 0x38
    2a3a:	79 ad       	ldd	r23, Y+57	; 0x39
    2a3c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a3e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9f ab       	std	Y+55, r25	; 0x37
    2a4a:	8e ab       	std	Y+54, r24	; 0x36
    2a4c:	8e a9       	ldd	r24, Y+54	; 0x36
    2a4e:	9f a9       	ldd	r25, Y+55	; 0x37
    2a50:	9b ab       	std	Y+51, r25	; 0x33
    2a52:	8a ab       	std	Y+50, r24	; 0x32
    2a54:	8a a9       	ldd	r24, Y+50	; 0x32
    2a56:	9b a9       	ldd	r25, Y+51	; 0x33
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <LCD_sendCommand+0x412>
    2a5c:	9b ab       	std	Y+51, r25	; 0x33
    2a5e:	8a ab       	std	Y+50, r24	; 0x32
    2a60:	18 c0       	rjmp	.+48     	; 0x2a92 <LCD_sendCommand+0x44c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a62:	fe 01       	movw	r30, r28
    2a64:	ef 5b       	subi	r30, 0xBF	; 191
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	60 81       	ld	r22, Z
    2a6a:	71 81       	ldd	r23, Z+1	; 0x01
    2a6c:	82 81       	ldd	r24, Z+2	; 0x02
    2a6e:	93 81       	ldd	r25, Z+3	; 0x03
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e0 5c       	subi	r30, 0xC0	; 192
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 83       	st	Z, r24
    2a80:	fe 01       	movw	r30, r28
    2a82:	e0 5c       	subi	r30, 0xC0	; 192
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a8a:	89 a9       	ldd	r24, Y+49	; 0x31
    2a8c:	8a 95       	dec	r24
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <LCD_sendCommand+0x446>
    2a90:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    2a92:	fe 01       	movw	r30, r28
    2a94:	ef 59       	subi	r30, 0x9F	; 159
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	60 81       	ld	r22, Z
    2a9c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <GPIO_writePort>
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a8 ec       	ldi	r26, 0xC8	; 200
    2aa6:	b2 e4       	ldi	r27, 0x42	; 66
    2aa8:	8d a7       	std	Y+45, r24	; 0x2d
    2aaa:	9e a7       	std	Y+46, r25	; 0x2e
    2aac:	af a7       	std	Y+47, r26	; 0x2f
    2aae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ab0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ab2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab8:	2b ea       	ldi	r18, 0xAB	; 171
    2aba:	3a ea       	ldi	r19, 0xAA	; 170
    2abc:	4a ea       	ldi	r20, 0xAA	; 170
    2abe:	5e e3       	ldi	r21, 0x3E	; 62
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	89 a7       	std	Y+41, r24	; 0x29
    2aca:	9a a7       	std	Y+42, r25	; 0x2a
    2acc:	ab a7       	std	Y+43, r26	; 0x2b
    2ace:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ad0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ad2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	1c f4       	brge	.+6      	; 0x2aee <LCD_sendCommand+0x4a8>
		__ticks = 1;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	88 a7       	std	Y+40, r24	; 0x28
    2aec:	91 c0       	rjmp	.+290    	; 0x2c10 <LCD_sendCommand+0x5ca>
	else if (__tmp > 255)
    2aee:	69 a5       	ldd	r22, Y+41	; 0x29
    2af0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2af2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	53 e4       	ldi	r21, 0x43	; 67
    2afe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	0c f0       	brlt	.+2      	; 0x2b08 <LCD_sendCommand+0x4c2>
    2b06:	7b c0       	rjmp	.+246    	; 0x2bfe <LCD_sendCommand+0x5b8>
	{
		_delay_ms(__us / 1000.0);
    2b08:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b0a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4a e7       	ldi	r20, 0x7A	; 122
    2b16:	54 e4       	ldi	r21, 0x44	; 68
    2b18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8c a3       	std	Y+36, r24	; 0x24
    2b22:	9d a3       	std	Y+37, r25	; 0x25
    2b24:	ae a3       	std	Y+38, r26	; 0x26
    2b26:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	6c a1       	ldd	r22, Y+36	; 0x24
    2b2a:	7d a1       	ldd	r23, Y+37	; 0x25
    2b2c:	8e a1       	ldd	r24, Y+38	; 0x26
    2b2e:	9f a1       	ldd	r25, Y+39	; 0x27
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4a e7       	ldi	r20, 0x7A	; 122
    2b36:	53 e4       	ldi	r21, 0x43	; 67
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	88 a3       	std	Y+32, r24	; 0x20
    2b42:	99 a3       	std	Y+33, r25	; 0x21
    2b44:	aa a3       	std	Y+34, r26	; 0x22
    2b46:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2b48:	68 a1       	ldd	r22, Y+32	; 0x20
    2b4a:	79 a1       	ldd	r23, Y+33	; 0x21
    2b4c:	8a a1       	ldd	r24, Y+34	; 0x22
    2b4e:	9b a1       	ldd	r25, Y+35	; 0x23
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e8       	ldi	r20, 0x80	; 128
    2b56:	5f e3       	ldi	r21, 0x3F	; 63
    2b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b5c:	88 23       	and	r24, r24
    2b5e:	2c f4       	brge	.+10     	; 0x2b6a <LCD_sendCommand+0x524>
		__ticks = 1;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9f 8f       	std	Y+31, r25	; 0x1f
    2b66:	8e 8f       	std	Y+30, r24	; 0x1e
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <LCD_sendCommand+0x5a2>
	else if (__tmp > 65535)
    2b6a:	68 a1       	ldd	r22, Y+32	; 0x20
    2b6c:	79 a1       	ldd	r23, Y+33	; 0x21
    2b6e:	8a a1       	ldd	r24, Y+34	; 0x22
    2b70:	9b a1       	ldd	r25, Y+35	; 0x23
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	4c f5       	brge	.+82     	; 0x2bd4 <LCD_sendCommand+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b82:	6c a1       	ldd	r22, Y+36	; 0x24
    2b84:	7d a1       	ldd	r23, Y+37	; 0x25
    2b86:	8e a1       	ldd	r24, Y+38	; 0x26
    2b88:	9f a1       	ldd	r25, Y+39	; 0x27
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e2       	ldi	r20, 0x20	; 32
    2b90:	51 e4       	ldi	r21, 0x41	; 65
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	cd 01       	movw	r24, r26
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9f 8f       	std	Y+31, r25	; 0x1f
    2ba8:	8e 8f       	std	Y+30, r24	; 0x1e
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <LCD_sendCommand+0x584>
    2bac:	89 e1       	ldi	r24, 0x19	; 25
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	9d 8f       	std	Y+29, r25	; 0x1d
    2bb2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <LCD_sendCommand+0x572>
    2bbc:	9d 8f       	std	Y+29, r25	; 0x1d
    2bbe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	9f 8f       	std	Y+31, r25	; 0x1f
    2bc8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	69 f7       	brne	.-38     	; 0x2bac <LCD_sendCommand+0x566>
    2bd2:	24 c0       	rjmp	.+72     	; 0x2c1c <LCD_sendCommand+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd4:	68 a1       	ldd	r22, Y+32	; 0x20
    2bd6:	79 a1       	ldd	r23, Y+33	; 0x21
    2bd8:	8a a1       	ldd	r24, Y+34	; 0x22
    2bda:	9b a1       	ldd	r25, Y+35	; 0x23
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9f 8f       	std	Y+31, r25	; 0x1f
    2be6:	8e 8f       	std	Y+30, r24	; 0x1e
    2be8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2bea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2bec:	9b 8f       	std	Y+27, r25	; 0x1b
    2bee:	8a 8f       	std	Y+26, r24	; 0x1a
    2bf0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bf2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <LCD_sendCommand+0x5ae>
    2bf8:	9b 8f       	std	Y+27, r25	; 0x1b
    2bfa:	8a 8f       	std	Y+26, r24	; 0x1a
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <LCD_sendCommand+0x5d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bfe:	69 a5       	ldd	r22, Y+41	; 0x29
    2c00:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c02:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c04:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	88 a7       	std	Y+40, r24	; 0x28
    2c10:	88 a5       	ldd	r24, Y+40	; 0x28
    2c12:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c14:	89 8d       	ldd	r24, Y+25	; 0x19
    2c16:	8a 95       	dec	r24
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_sendCommand+0x5d0>
    2c1a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	62 e0       	ldi	r22, 0x02	; 2
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e7       	ldi	r26, 0x70	; 112
    2c2c:	b1 e4       	ldi	r27, 0x41	; 65
    2c2e:	8d 8b       	std	Y+21, r24	; 0x15
    2c30:	9e 8b       	std	Y+22, r25	; 0x16
    2c32:	af 8b       	std	Y+23, r26	; 0x17
    2c34:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c36:	6d 89       	ldd	r22, Y+21	; 0x15
    2c38:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3e:	2b ea       	ldi	r18, 0xAB	; 171
    2c40:	3a ea       	ldi	r19, 0xAA	; 170
    2c42:	4a ea       	ldi	r20, 0xAA	; 170
    2c44:	5e e3       	ldi	r21, 0x3E	; 62
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	89 8b       	std	Y+17, r24	; 0x11
    2c50:	9a 8b       	std	Y+18, r25	; 0x12
    2c52:	ab 8b       	std	Y+19, r26	; 0x13
    2c54:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c56:	69 89       	ldd	r22, Y+17	; 0x11
    2c58:	7a 89       	ldd	r23, Y+18	; 0x12
    2c5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	1c f4       	brge	.+6      	; 0x2c74 <LCD_sendCommand+0x62e>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	88 8b       	std	Y+16, r24	; 0x10
    2c72:	91 c0       	rjmp	.+290    	; 0x2d96 <LCD_sendCommand+0x750>
	else if (__tmp > 255)
    2c74:	69 89       	ldd	r22, Y+17	; 0x11
    2c76:	7a 89       	ldd	r23, Y+18	; 0x12
    2c78:	8b 89       	ldd	r24, Y+19	; 0x13
    2c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4f e7       	ldi	r20, 0x7F	; 127
    2c82:	53 e4       	ldi	r21, 0x43	; 67
    2c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c88:	18 16       	cp	r1, r24
    2c8a:	0c f0       	brlt	.+2      	; 0x2c8e <LCD_sendCommand+0x648>
    2c8c:	7b c0       	rjmp	.+246    	; 0x2d84 <LCD_sendCommand+0x73e>
	{
		_delay_ms(__us / 1000.0);
    2c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c90:	7e 89       	ldd	r23, Y+22	; 0x16
    2c92:	8f 89       	ldd	r24, Y+23	; 0x17
    2c94:	98 8d       	ldd	r25, Y+24	; 0x18
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	4a e7       	ldi	r20, 0x7A	; 122
    2c9c:	54 e4       	ldi	r21, 0x44	; 68
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	8c 87       	std	Y+12, r24	; 0x0c
    2ca8:	9d 87       	std	Y+13, r25	; 0x0d
    2caa:	ae 87       	std	Y+14, r26	; 0x0e
    2cac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a e7       	ldi	r20, 0x7A	; 122
    2cbc:	53 e4       	ldi	r21, 0x43	; 67
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	88 87       	std	Y+8, r24	; 0x08
    2cc8:	99 87       	std	Y+9, r25	; 0x09
    2cca:	aa 87       	std	Y+10, r26	; 0x0a
    2ccc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cce:	68 85       	ldd	r22, Y+8	; 0x08
    2cd0:	79 85       	ldd	r23, Y+9	; 0x09
    2cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <LCD_sendCommand+0x6aa>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9f 83       	std	Y+7, r25	; 0x07
    2cec:	8e 83       	std	Y+6, r24	; 0x06
    2cee:	3f c0       	rjmp	.+126    	; 0x2d6e <LCD_sendCommand+0x728>
	else if (__tmp > 65535)
    2cf0:	68 85       	ldd	r22, Y+8	; 0x08
    2cf2:	79 85       	ldd	r23, Y+9	; 0x09
    2cf4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cf6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	4c f5       	brge	.+82     	; 0x2d5a <LCD_sendCommand+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d0a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d0c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d0e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9f 83       	std	Y+7, r25	; 0x07
    2d2e:	8e 83       	std	Y+6, r24	; 0x06
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <LCD_sendCommand+0x70a>
    2d32:	89 e1       	ldi	r24, 0x19	; 25
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9d 83       	std	Y+5, r25	; 0x05
    2d38:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_sendCommand+0x6f8>
    2d42:	9d 83       	std	Y+5, r25	; 0x05
    2d44:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	8e 81       	ldd	r24, Y+6	; 0x06
    2d48:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	9f 83       	std	Y+7, r25	; 0x07
    2d4e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d50:	8e 81       	ldd	r24, Y+6	; 0x06
    2d52:	9f 81       	ldd	r25, Y+7	; 0x07
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	69 f7       	brne	.-38     	; 0x2d32 <LCD_sendCommand+0x6ec>
    2d58:	24 c0       	rjmp	.+72     	; 0x2da2 <LCD_sendCommand+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	68 85       	ldd	r22, Y+8	; 0x08
    2d5c:	79 85       	ldd	r23, Y+9	; 0x09
    2d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9f 83       	std	Y+7, r25	; 0x07
    2d6c:	8e 83       	std	Y+6, r24	; 0x06
    2d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d70:	9f 81       	ldd	r25, Y+7	; 0x07
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <LCD_sendCommand+0x734>
    2d7e:	9b 83       	std	Y+3, r25	; 0x03
    2d80:	8a 83       	std	Y+2, r24	; 0x02
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <LCD_sendCommand+0x75c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d84:	69 89       	ldd	r22, Y+17	; 0x11
    2d86:	7a 89       	ldd	r23, Y+18	; 0x12
    2d88:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	88 8b       	std	Y+16, r24	; 0x10
    2d96:	88 89       	ldd	r24, Y+16	; 0x10
    2d98:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d9a:	89 81       	ldd	r24, Y+1	; 0x01
    2d9c:	8a 95       	dec	r24
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_sendCommand+0x756>
    2da0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_us(15);
#endif
}
    2da2:	cf 59       	subi	r28, 0x9F	; 159
    2da4:	df 4f       	sbci	r29, 0xFF	; 255
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	08 95       	ret

00002dba <LCD_init>:

void LCD_init(void)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
	 * initialize LCD_E_PIN
	 * set LCD configuration. 2lines,8bit mode
	 * clear screen
	 * turn on display
	 ************************************************/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	61 e0       	ldi	r22, 0x01	; 1
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	62 e0       	ldi	r22, 0x02	; 2
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
	LCD_sendCommand(LCD_GO_TO_HOME_POSITION);
	LCD_sendCommand(LCD_2LINES_4BIT_MODE);
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	6f ef       	ldi	r22, 0xFF	; 255
    2de4:	0e 94 87 0b 	call	0x170e	; 0x170e <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_GO_TO_HOME_POSITION);
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_8BIT_MODE);
    2dee:	88 e3       	ldi	r24, 0x38	; 56
    2df0:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    2dfa:	8c e0       	ldi	r24, 0x0C	; 12
    2dfc:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_sendCommand>
}
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character)
{
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	c1 56       	subi	r28, 0x61	; 97
    2e14:	d0 40       	sbci	r29, 0x00	; 0
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	fe 01       	movw	r30, r28
    2e22:	ef 59       	subi	r30, 0x9F	; 159
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 83       	st	Z, r24
	 * send data
	 * wait
	 * Active E pin LOW
	 * wait
	 *************************************************/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	60 e0       	ldi	r22, 0x00	; 0
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	61 e0       	ldi	r22, 0x01	; 1
    2e36:	40 e0       	ldi	r20, 0x00	; 0
    2e38:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e3 5a       	subi	r30, 0xA3	; 163
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a8 e4       	ldi	r26, 0x48	; 72
    2e48:	b2 e4       	ldi	r27, 0x42	; 66
    2e4a:	80 83       	st	Z, r24
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	a2 83       	std	Z+2, r26	; 0x02
    2e50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e52:	8e 01       	movw	r16, r28
    2e54:	07 5a       	subi	r16, 0xA7	; 167
    2e56:	1f 4f       	sbci	r17, 0xFF	; 255
    2e58:	fe 01       	movw	r30, r28
    2e5a:	e3 5a       	subi	r30, 0xA3	; 163
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	60 81       	ld	r22, Z
    2e60:	71 81       	ldd	r23, Z+1	; 0x01
    2e62:	82 81       	ldd	r24, Z+2	; 0x02
    2e64:	93 81       	ldd	r25, Z+3	; 0x03
    2e66:	2b ea       	ldi	r18, 0xAB	; 171
    2e68:	3a ea       	ldi	r19, 0xAA	; 170
    2e6a:	4a ea       	ldi	r20, 0xAA	; 170
    2e6c:	5e e3       	ldi	r21, 0x3E	; 62
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	f8 01       	movw	r30, r16
    2e78:	80 83       	st	Z, r24
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	a2 83       	std	Z+2, r26	; 0x02
    2e7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e80:	fe 01       	movw	r30, r28
    2e82:	e7 5a       	subi	r30, 0xA7	; 167
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	93 81       	ldd	r25, Z+3	; 0x03
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e8       	ldi	r20, 0x80	; 128
    2e94:	5f e3       	ldi	r21, 0x3F	; 63
    2e96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9a:	88 23       	and	r24, r24
    2e9c:	34 f4       	brge	.+12     	; 0x2eaa <LCD_displayCharacter+0xa4>
		__ticks = 1;
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e8 5a       	subi	r30, 0xA8	; 168
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 83       	st	Z, r24
    2ea8:	e0 c0       	rjmp	.+448    	; 0x306a <LCD_displayCharacter+0x264>
	else if (__tmp > 255)
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e7 5a       	subi	r30, 0xA7	; 167
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	53 e4       	ldi	r21, 0x43	; 67
    2ec0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	0c f0       	brlt	.+2      	; 0x2eca <LCD_displayCharacter+0xc4>
    2ec8:	c0 c0       	rjmp	.+384    	; 0x304a <LCD_displayCharacter+0x244>
	{
		_delay_ms(__us / 1000.0);
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e3 5a       	subi	r30, 0xA3	; 163
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4a e7       	ldi	r20, 0x7A	; 122
    2ede:	54 e4       	ldi	r21, 0x44	; 68
    2ee0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ec 5a       	subi	r30, 0xAC	; 172
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 83       	st	Z, r24
    2ef0:	91 83       	std	Z+1, r25	; 0x01
    2ef2:	a2 83       	std	Z+2, r26	; 0x02
    2ef4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef6:	8e 01       	movw	r16, r28
    2ef8:	00 5b       	subi	r16, 0xB0	; 176
    2efa:	1f 4f       	sbci	r17, 0xFF	; 255
    2efc:	fe 01       	movw	r30, r28
    2efe:	ec 5a       	subi	r30, 0xAC	; 172
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a e7       	ldi	r20, 0x7A	; 122
    2f10:	53 e4       	ldi	r21, 0x43	; 67
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	80 83       	st	Z, r24
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	a2 83       	std	Z+2, r26	; 0x02
    2f22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f24:	fe 01       	movw	r30, r28
    2f26:	e0 5b       	subi	r30, 0xB0	; 176
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	60 81       	ld	r22, Z
    2f2c:	71 81       	ldd	r23, Z+1	; 0x01
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	44 f4       	brge	.+16     	; 0x2f52 <LCD_displayCharacter+0x14c>
		__ticks = 1;
    2f42:	fe 01       	movw	r30, r28
    2f44:	e2 5b       	subi	r30, 0xB2	; 178
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	91 83       	std	Z+1, r25	; 0x01
    2f4e:	80 83       	st	Z, r24
    2f50:	64 c0       	rjmp	.+200    	; 0x301a <LCD_displayCharacter+0x214>
	else if (__tmp > 65535)
    2f52:	fe 01       	movw	r30, r28
    2f54:	e0 5b       	subi	r30, 0xB0	; 176
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	3f ef       	ldi	r19, 0xFF	; 255
    2f64:	4f e7       	ldi	r20, 0x7F	; 127
    2f66:	57 e4       	ldi	r21, 0x47	; 71
    2f68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f6c:	18 16       	cp	r1, r24
    2f6e:	0c f0       	brlt	.+2      	; 0x2f72 <LCD_displayCharacter+0x16c>
    2f70:	43 c0       	rjmp	.+134    	; 0x2ff8 <LCD_displayCharacter+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f72:	fe 01       	movw	r30, r28
    2f74:	ec 5a       	subi	r30, 0xAC	; 172
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	8e 01       	movw	r16, r28
    2f92:	02 5b       	subi	r16, 0xB2	; 178
    2f94:	1f 4f       	sbci	r17, 0xFF	; 255
    2f96:	bc 01       	movw	r22, r24
    2f98:	cd 01       	movw	r24, r26
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	91 83       	std	Z+1, r25	; 0x01
    2fa6:	80 83       	st	Z, r24
    2fa8:	1f c0       	rjmp	.+62     	; 0x2fe8 <LCD_displayCharacter+0x1e2>
    2faa:	fe 01       	movw	r30, r28
    2fac:	e4 5b       	subi	r30, 0xB4	; 180
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	89 e1       	ldi	r24, 0x19	; 25
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e4 5b       	subi	r30, 0xB4	; 180
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	91 81       	ldd	r25, Z+1	; 0x01
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <LCD_displayCharacter+0x1bc>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e4 5b       	subi	r30, 0xB4	; 180
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd0:	de 01       	movw	r26, r28
    2fd2:	a2 5b       	subi	r26, 0xB2	; 178
    2fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	e2 5b       	subi	r30, 0xB2	; 178
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	80 81       	ld	r24, Z
    2fde:	91 81       	ldd	r25, Z+1	; 0x01
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	11 96       	adiw	r26, 0x01	; 1
    2fe4:	9c 93       	st	X, r25
    2fe6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e2 5b       	subi	r30, 0xB2	; 178
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	d1 f6       	brne	.-76     	; 0x2faa <LCD_displayCharacter+0x1a4>
    2ff6:	4b c0       	rjmp	.+150    	; 0x308e <LCD_displayCharacter+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff8:	8e 01       	movw	r16, r28
    2ffa:	02 5b       	subi	r16, 0xB2	; 178
    2ffc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffe:	fe 01       	movw	r30, r28
    3000:	e0 5b       	subi	r30, 0xB0	; 176
    3002:	ff 4f       	sbci	r31, 0xFF	; 255
    3004:	60 81       	ld	r22, Z
    3006:	71 81       	ldd	r23, Z+1	; 0x01
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	93 81       	ldd	r25, Z+3	; 0x03
    300c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	f8 01       	movw	r30, r16
    3016:	91 83       	std	Z+1, r25	; 0x01
    3018:	80 83       	st	Z, r24
    301a:	de 01       	movw	r26, r28
    301c:	a6 5b       	subi	r26, 0xB6	; 182
    301e:	bf 4f       	sbci	r27, 0xFF	; 255
    3020:	fe 01       	movw	r30, r28
    3022:	e2 5b       	subi	r30, 0xB2	; 178
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	9c 93       	st	X, r25
    302e:	8e 93       	st	-X, r24
    3030:	fe 01       	movw	r30, r28
    3032:	e6 5b       	subi	r30, 0xB6	; 182
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	80 81       	ld	r24, Z
    3038:	91 81       	ldd	r25, Z+1	; 0x01
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <LCD_displayCharacter+0x234>
    303e:	fe 01       	movw	r30, r28
    3040:	e6 5b       	subi	r30, 0xB6	; 182
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
    3048:	22 c0       	rjmp	.+68     	; 0x308e <LCD_displayCharacter+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    304a:	8e 01       	movw	r16, r28
    304c:	08 5a       	subi	r16, 0xA8	; 168
    304e:	1f 4f       	sbci	r17, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	e7 5a       	subi	r30, 0xA7	; 167
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	f8 01       	movw	r30, r16
    3068:	80 83       	st	Z, r24
    306a:	de 01       	movw	r26, r28
    306c:	a7 5b       	subi	r26, 0xB7	; 183
    306e:	bf 4f       	sbci	r27, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	e8 5a       	subi	r30, 0xA8	; 168
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 81       	ld	r24, Z
    3078:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    307a:	fe 01       	movw	r30, r28
    307c:	e7 5b       	subi	r30, 0xB7	; 183
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 81       	ld	r24, Z
    3082:	8a 95       	dec	r24
    3084:	f1 f7       	brne	.-4      	; 0x3082 <LCD_displayCharacter+0x27c>
    3086:	fe 01       	movw	r30, r28
    3088:	e7 5b       	subi	r30, 0xB7	; 183
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	62 e0       	ldi	r22, 0x02	; 2
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
    3098:	fe 01       	movw	r30, r28
    309a:	eb 5b       	subi	r30, 0xBB	; 187
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a8 e4       	ldi	r26, 0x48	; 72
    30a4:	b3 e4       	ldi	r27, 0x43	; 67
    30a6:	80 83       	st	Z, r24
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	a2 83       	std	Z+2, r26	; 0x02
    30ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30ae:	8e 01       	movw	r16, r28
    30b0:	0f 5b       	subi	r16, 0xBF	; 191
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	fe 01       	movw	r30, r28
    30b6:	eb 5b       	subi	r30, 0xBB	; 187
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	2b ea       	ldi	r18, 0xAB	; 171
    30c4:	3a ea       	ldi	r19, 0xAA	; 170
    30c6:	4a ea       	ldi	r20, 0xAA	; 170
    30c8:	5e e3       	ldi	r21, 0x3E	; 62
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	f8 01       	movw	r30, r16
    30d4:	80 83       	st	Z, r24
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	a2 83       	std	Z+2, r26	; 0x02
    30da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30dc:	fe 01       	movw	r30, r28
    30de:	ef 5b       	subi	r30, 0xBF	; 191
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	60 81       	ld	r22, Z
    30e4:	71 81       	ldd	r23, Z+1	; 0x01
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	20 e0       	ldi	r18, 0x00	; 0
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	40 e8       	ldi	r20, 0x80	; 128
    30f0:	5f e3       	ldi	r21, 0x3F	; 63
    30f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f6:	88 23       	and	r24, r24
    30f8:	34 f4       	brge	.+12     	; 0x3106 <LCD_displayCharacter+0x300>
		__ticks = 1;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	fe 01       	movw	r30, r28
    30fe:	e0 5c       	subi	r30, 0xC0	; 192
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	80 83       	st	Z, r24
    3104:	9d c0       	rjmp	.+314    	; 0x3240 <LCD_displayCharacter+0x43a>
	else if (__tmp > 255)
    3106:	fe 01       	movw	r30, r28
    3108:	ef 5b       	subi	r30, 0xBF	; 191
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4f e7       	ldi	r20, 0x7F	; 127
    311a:	53 e4       	ldi	r21, 0x43	; 67
    311c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3120:	18 16       	cp	r1, r24
    3122:	0c f0       	brlt	.+2      	; 0x3126 <LCD_displayCharacter+0x320>
    3124:	7e c0       	rjmp	.+252    	; 0x3222 <LCD_displayCharacter+0x41c>
	{
		_delay_ms(__us / 1000.0);
    3126:	fe 01       	movw	r30, r28
    3128:	eb 5b       	subi	r30, 0xBB	; 187
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a e7       	ldi	r20, 0x7A	; 122
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	8c af       	std	Y+60, r24	; 0x3c
    3146:	9d af       	std	Y+61, r25	; 0x3d
    3148:	ae af       	std	Y+62, r26	; 0x3e
    314a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314c:	6c ad       	ldd	r22, Y+60	; 0x3c
    314e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3150:	8e ad       	ldd	r24, Y+62	; 0x3e
    3152:	9f ad       	ldd	r25, Y+63	; 0x3f
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4a e7       	ldi	r20, 0x7A	; 122
    315a:	53 e4       	ldi	r21, 0x43	; 67
    315c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	88 af       	std	Y+56, r24	; 0x38
    3166:	99 af       	std	Y+57, r25	; 0x39
    3168:	aa af       	std	Y+58, r26	; 0x3a
    316a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    316c:	68 ad       	ldd	r22, Y+56	; 0x38
    316e:	79 ad       	ldd	r23, Y+57	; 0x39
    3170:	8a ad       	ldd	r24, Y+58	; 0x3a
    3172:	9b ad       	ldd	r25, Y+59	; 0x3b
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e8       	ldi	r20, 0x80	; 128
    317a:	5f e3       	ldi	r21, 0x3F	; 63
    317c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3180:	88 23       	and	r24, r24
    3182:	2c f4       	brge	.+10     	; 0x318e <LCD_displayCharacter+0x388>
		__ticks = 1;
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	9f ab       	std	Y+55, r25	; 0x37
    318a:	8e ab       	std	Y+54, r24	; 0x36
    318c:	3f c0       	rjmp	.+126    	; 0x320c <LCD_displayCharacter+0x406>
	else if (__tmp > 65535)
    318e:	68 ad       	ldd	r22, Y+56	; 0x38
    3190:	79 ad       	ldd	r23, Y+57	; 0x39
    3192:	8a ad       	ldd	r24, Y+58	; 0x3a
    3194:	9b ad       	ldd	r25, Y+59	; 0x3b
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	3f ef       	ldi	r19, 0xFF	; 255
    319a:	4f e7       	ldi	r20, 0x7F	; 127
    319c:	57 e4       	ldi	r21, 0x47	; 71
    319e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a2:	18 16       	cp	r1, r24
    31a4:	4c f5       	brge	.+82     	; 0x31f8 <LCD_displayCharacter+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a6:	6c ad       	ldd	r22, Y+60	; 0x3c
    31a8:	7d ad       	ldd	r23, Y+61	; 0x3d
    31aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    31ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e2       	ldi	r20, 0x20	; 32
    31b4:	51 e4       	ldi	r21, 0x41	; 65
    31b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	bc 01       	movw	r22, r24
    31c0:	cd 01       	movw	r24, r26
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9f ab       	std	Y+55, r25	; 0x37
    31cc:	8e ab       	std	Y+54, r24	; 0x36
    31ce:	0f c0       	rjmp	.+30     	; 0x31ee <LCD_displayCharacter+0x3e8>
    31d0:	89 e1       	ldi	r24, 0x19	; 25
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	9d ab       	std	Y+53, r25	; 0x35
    31d6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31d8:	8c a9       	ldd	r24, Y+52	; 0x34
    31da:	9d a9       	ldd	r25, Y+53	; 0x35
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <LCD_displayCharacter+0x3d6>
    31e0:	9d ab       	std	Y+53, r25	; 0x35
    31e2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e4:	8e a9       	ldd	r24, Y+54	; 0x36
    31e6:	9f a9       	ldd	r25, Y+55	; 0x37
    31e8:	01 97       	sbiw	r24, 0x01	; 1
    31ea:	9f ab       	std	Y+55, r25	; 0x37
    31ec:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	8e a9       	ldd	r24, Y+54	; 0x36
    31f0:	9f a9       	ldd	r25, Y+55	; 0x37
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	69 f7       	brne	.-38     	; 0x31d0 <LCD_displayCharacter+0x3ca>
    31f6:	2d c0       	rjmp	.+90     	; 0x3252 <LCD_displayCharacter+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f8:	68 ad       	ldd	r22, Y+56	; 0x38
    31fa:	79 ad       	ldd	r23, Y+57	; 0x39
    31fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    31fe:	9b ad       	ldd	r25, Y+59	; 0x3b
    3200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3204:	dc 01       	movw	r26, r24
    3206:	cb 01       	movw	r24, r22
    3208:	9f ab       	std	Y+55, r25	; 0x37
    320a:	8e ab       	std	Y+54, r24	; 0x36
    320c:	8e a9       	ldd	r24, Y+54	; 0x36
    320e:	9f a9       	ldd	r25, Y+55	; 0x37
    3210:	9b ab       	std	Y+51, r25	; 0x33
    3212:	8a ab       	std	Y+50, r24	; 0x32
    3214:	8a a9       	ldd	r24, Y+50	; 0x32
    3216:	9b a9       	ldd	r25, Y+51	; 0x33
    3218:	01 97       	sbiw	r24, 0x01	; 1
    321a:	f1 f7       	brne	.-4      	; 0x3218 <LCD_displayCharacter+0x412>
    321c:	9b ab       	std	Y+51, r25	; 0x33
    321e:	8a ab       	std	Y+50, r24	; 0x32
    3220:	18 c0       	rjmp	.+48     	; 0x3252 <LCD_displayCharacter+0x44c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3222:	fe 01       	movw	r30, r28
    3224:	ef 5b       	subi	r30, 0xBF	; 191
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	fe 01       	movw	r30, r28
    323a:	e0 5c       	subi	r30, 0xC0	; 192
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	80 83       	st	Z, r24
    3240:	fe 01       	movw	r30, r28
    3242:	e0 5c       	subi	r30, 0xC0	; 192
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    324a:	89 a9       	ldd	r24, Y+49	; 0x31
    324c:	8a 95       	dec	r24
    324e:	f1 f7       	brne	.-4      	; 0x324c <LCD_displayCharacter+0x446>
    3250:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    3252:	fe 01       	movw	r30, r28
    3254:	ef 59       	subi	r30, 0x9F	; 159
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	60 81       	ld	r22, Z
    325c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <GPIO_writePort>
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	a8 ec       	ldi	r26, 0xC8	; 200
    3266:	b2 e4       	ldi	r27, 0x42	; 66
    3268:	8d a7       	std	Y+45, r24	; 0x2d
    326a:	9e a7       	std	Y+46, r25	; 0x2e
    326c:	af a7       	std	Y+47, r26	; 0x2f
    326e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3270:	6d a5       	ldd	r22, Y+45	; 0x2d
    3272:	7e a5       	ldd	r23, Y+46	; 0x2e
    3274:	8f a5       	ldd	r24, Y+47	; 0x2f
    3276:	98 a9       	ldd	r25, Y+48	; 0x30
    3278:	2b ea       	ldi	r18, 0xAB	; 171
    327a:	3a ea       	ldi	r19, 0xAA	; 170
    327c:	4a ea       	ldi	r20, 0xAA	; 170
    327e:	5e e3       	ldi	r21, 0x3E	; 62
    3280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	89 a7       	std	Y+41, r24	; 0x29
    328a:	9a a7       	std	Y+42, r25	; 0x2a
    328c:	ab a7       	std	Y+43, r26	; 0x2b
    328e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3290:	69 a5       	ldd	r22, Y+41	; 0x29
    3292:	7a a5       	ldd	r23, Y+42	; 0x2a
    3294:	8b a5       	ldd	r24, Y+43	; 0x2b
    3296:	9c a5       	ldd	r25, Y+44	; 0x2c
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	40 e8       	ldi	r20, 0x80	; 128
    329e:	5f e3       	ldi	r21, 0x3F	; 63
    32a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	1c f4       	brge	.+6      	; 0x32ae <LCD_displayCharacter+0x4a8>
		__ticks = 1;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	88 a7       	std	Y+40, r24	; 0x28
    32ac:	91 c0       	rjmp	.+290    	; 0x33d0 <LCD_displayCharacter+0x5ca>
	else if (__tmp > 255)
    32ae:	69 a5       	ldd	r22, Y+41	; 0x29
    32b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    32b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4f e7       	ldi	r20, 0x7F	; 127
    32bc:	53 e4       	ldi	r21, 0x43	; 67
    32be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c2:	18 16       	cp	r1, r24
    32c4:	0c f0       	brlt	.+2      	; 0x32c8 <LCD_displayCharacter+0x4c2>
    32c6:	7b c0       	rjmp	.+246    	; 0x33be <LCD_displayCharacter+0x5b8>
	{
		_delay_ms(__us / 1000.0);
    32c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    32ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    32cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ce:	98 a9       	ldd	r25, Y+48	; 0x30
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a e7       	ldi	r20, 0x7A	; 122
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	8c a3       	std	Y+36, r24	; 0x24
    32e2:	9d a3       	std	Y+37, r25	; 0x25
    32e4:	ae a3       	std	Y+38, r26	; 0x26
    32e6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e8:	6c a1       	ldd	r22, Y+36	; 0x24
    32ea:	7d a1       	ldd	r23, Y+37	; 0x25
    32ec:	8e a1       	ldd	r24, Y+38	; 0x26
    32ee:	9f a1       	ldd	r25, Y+39	; 0x27
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	4a e7       	ldi	r20, 0x7A	; 122
    32f6:	53 e4       	ldi	r21, 0x43	; 67
    32f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	88 a3       	std	Y+32, r24	; 0x20
    3302:	99 a3       	std	Y+33, r25	; 0x21
    3304:	aa a3       	std	Y+34, r26	; 0x22
    3306:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3308:	68 a1       	ldd	r22, Y+32	; 0x20
    330a:	79 a1       	ldd	r23, Y+33	; 0x21
    330c:	8a a1       	ldd	r24, Y+34	; 0x22
    330e:	9b a1       	ldd	r25, Y+35	; 0x23
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e8       	ldi	r20, 0x80	; 128
    3316:	5f e3       	ldi	r21, 0x3F	; 63
    3318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331c:	88 23       	and	r24, r24
    331e:	2c f4       	brge	.+10     	; 0x332a <LCD_displayCharacter+0x524>
		__ticks = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	9f 8f       	std	Y+31, r25	; 0x1f
    3326:	8e 8f       	std	Y+30, r24	; 0x1e
    3328:	3f c0       	rjmp	.+126    	; 0x33a8 <LCD_displayCharacter+0x5a2>
	else if (__tmp > 65535)
    332a:	68 a1       	ldd	r22, Y+32	; 0x20
    332c:	79 a1       	ldd	r23, Y+33	; 0x21
    332e:	8a a1       	ldd	r24, Y+34	; 0x22
    3330:	9b a1       	ldd	r25, Y+35	; 0x23
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	3f ef       	ldi	r19, 0xFF	; 255
    3336:	4f e7       	ldi	r20, 0x7F	; 127
    3338:	57 e4       	ldi	r21, 0x47	; 71
    333a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    333e:	18 16       	cp	r1, r24
    3340:	4c f5       	brge	.+82     	; 0x3394 <LCD_displayCharacter+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3342:	6c a1       	ldd	r22, Y+36	; 0x24
    3344:	7d a1       	ldd	r23, Y+37	; 0x25
    3346:	8e a1       	ldd	r24, Y+38	; 0x26
    3348:	9f a1       	ldd	r25, Y+39	; 0x27
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	40 e2       	ldi	r20, 0x20	; 32
    3350:	51 e4       	ldi	r21, 0x41	; 65
    3352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9f 8f       	std	Y+31, r25	; 0x1f
    3368:	8e 8f       	std	Y+30, r24	; 0x1e
    336a:	0f c0       	rjmp	.+30     	; 0x338a <LCD_displayCharacter+0x584>
    336c:	89 e1       	ldi	r24, 0x19	; 25
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	9d 8f       	std	Y+29, r25	; 0x1d
    3372:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3374:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3376:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <LCD_displayCharacter+0x572>
    337c:	9d 8f       	std	Y+29, r25	; 0x1d
    337e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3382:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	9f 8f       	std	Y+31, r25	; 0x1f
    3388:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    338c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	69 f7       	brne	.-38     	; 0x336c <LCD_displayCharacter+0x566>
    3392:	24 c0       	rjmp	.+72     	; 0x33dc <LCD_displayCharacter+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3394:	68 a1       	ldd	r22, Y+32	; 0x20
    3396:	79 a1       	ldd	r23, Y+33	; 0x21
    3398:	8a a1       	ldd	r24, Y+34	; 0x22
    339a:	9b a1       	ldd	r25, Y+35	; 0x23
    339c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9f 8f       	std	Y+31, r25	; 0x1f
    33a6:	8e 8f       	std	Y+30, r24	; 0x1e
    33a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33ac:	9b 8f       	std	Y+27, r25	; 0x1b
    33ae:	8a 8f       	std	Y+26, r24	; 0x1a
    33b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <LCD_displayCharacter+0x5ae>
    33b8:	9b 8f       	std	Y+27, r25	; 0x1b
    33ba:	8a 8f       	std	Y+26, r24	; 0x1a
    33bc:	0f c0       	rjmp	.+30     	; 0x33dc <LCD_displayCharacter+0x5d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33be:	69 a5       	ldd	r22, Y+41	; 0x29
    33c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    33c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	88 a7       	std	Y+40, r24	; 0x28
    33d0:	88 a5       	ldd	r24, Y+40	; 0x28
    33d2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33d4:	89 8d       	ldd	r24, Y+25	; 0x19
    33d6:	8a 95       	dec	r24
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <LCD_displayCharacter+0x5d0>
    33da:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	62 e0       	ldi	r22, 0x02	; 2
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	0e 94 01 0a 	call	0x1402	; 0x1402 <GPIO_writePin>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 e7       	ldi	r26, 0x70	; 112
    33ec:	b1 e4       	ldi	r27, 0x41	; 65
    33ee:	8d 8b       	std	Y+21, r24	; 0x15
    33f0:	9e 8b       	std	Y+22, r25	; 0x16
    33f2:	af 8b       	std	Y+23, r26	; 0x17
    33f4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33f6:	6d 89       	ldd	r22, Y+21	; 0x15
    33f8:	7e 89       	ldd	r23, Y+22	; 0x16
    33fa:	8f 89       	ldd	r24, Y+23	; 0x17
    33fc:	98 8d       	ldd	r25, Y+24	; 0x18
    33fe:	2b ea       	ldi	r18, 0xAB	; 171
    3400:	3a ea       	ldi	r19, 0xAA	; 170
    3402:	4a ea       	ldi	r20, 0xAA	; 170
    3404:	5e e3       	ldi	r21, 0x3E	; 62
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	89 8b       	std	Y+17, r24	; 0x11
    3410:	9a 8b       	std	Y+18, r25	; 0x12
    3412:	ab 8b       	std	Y+19, r26	; 0x13
    3414:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3416:	69 89       	ldd	r22, Y+17	; 0x11
    3418:	7a 89       	ldd	r23, Y+18	; 0x12
    341a:	8b 89       	ldd	r24, Y+19	; 0x13
    341c:	9c 89       	ldd	r25, Y+20	; 0x14
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	1c f4       	brge	.+6      	; 0x3434 <LCD_displayCharacter+0x62e>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	88 8b       	std	Y+16, r24	; 0x10
    3432:	91 c0       	rjmp	.+290    	; 0x3556 <LCD_displayCharacter+0x750>
	else if (__tmp > 255)
    3434:	69 89       	ldd	r22, Y+17	; 0x11
    3436:	7a 89       	ldd	r23, Y+18	; 0x12
    3438:	8b 89       	ldd	r24, Y+19	; 0x13
    343a:	9c 89       	ldd	r25, Y+20	; 0x14
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	53 e4       	ldi	r21, 0x43	; 67
    3444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	0c f0       	brlt	.+2      	; 0x344e <LCD_displayCharacter+0x648>
    344c:	7b c0       	rjmp	.+246    	; 0x3544 <LCD_displayCharacter+0x73e>
	{
		_delay_ms(__us / 1000.0);
    344e:	6d 89       	ldd	r22, Y+21	; 0x15
    3450:	7e 89       	ldd	r23, Y+22	; 0x16
    3452:	8f 89       	ldd	r24, Y+23	; 0x17
    3454:	98 8d       	ldd	r25, Y+24	; 0x18
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a e7       	ldi	r20, 0x7A	; 122
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	8c 87       	std	Y+12, r24	; 0x0c
    3468:	9d 87       	std	Y+13, r25	; 0x0d
    346a:	ae 87       	std	Y+14, r26	; 0x0e
    346c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3470:	7d 85       	ldd	r23, Y+13	; 0x0d
    3472:	8e 85       	ldd	r24, Y+14	; 0x0e
    3474:	9f 85       	ldd	r25, Y+15	; 0x0f
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a e7       	ldi	r20, 0x7A	; 122
    347c:	53 e4       	ldi	r21, 0x43	; 67
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	88 87       	std	Y+8, r24	; 0x08
    3488:	99 87       	std	Y+9, r25	; 0x09
    348a:	aa 87       	std	Y+10, r26	; 0x0a
    348c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    348e:	68 85       	ldd	r22, Y+8	; 0x08
    3490:	79 85       	ldd	r23, Y+9	; 0x09
    3492:	8a 85       	ldd	r24, Y+10	; 0x0a
    3494:	9b 85       	ldd	r25, Y+11	; 0x0b
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <LCD_displayCharacter+0x6aa>
		__ticks = 1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9f 83       	std	Y+7, r25	; 0x07
    34ac:	8e 83       	std	Y+6, r24	; 0x06
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <LCD_displayCharacter+0x728>
	else if (__tmp > 65535)
    34b0:	68 85       	ldd	r22, Y+8	; 0x08
    34b2:	79 85       	ldd	r23, Y+9	; 0x09
    34b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	4c f5       	brge	.+82     	; 0x351a <LCD_displayCharacter+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    34ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    34cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9f 83       	std	Y+7, r25	; 0x07
    34ee:	8e 83       	std	Y+6, r24	; 0x06
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <LCD_displayCharacter+0x70a>
    34f2:	89 e1       	ldi	r24, 0x19	; 25
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9d 83       	std	Y+5, r25	; 0x05
    34f8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34fa:	8c 81       	ldd	r24, Y+4	; 0x04
    34fc:	9d 81       	ldd	r25, Y+5	; 0x05
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <LCD_displayCharacter+0x6f8>
    3502:	9d 83       	std	Y+5, r25	; 0x05
    3504:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3506:	8e 81       	ldd	r24, Y+6	; 0x06
    3508:	9f 81       	ldd	r25, Y+7	; 0x07
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9f 83       	std	Y+7, r25	; 0x07
    350e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3510:	8e 81       	ldd	r24, Y+6	; 0x06
    3512:	9f 81       	ldd	r25, Y+7	; 0x07
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	69 f7       	brne	.-38     	; 0x34f2 <LCD_displayCharacter+0x6ec>
    3518:	24 c0       	rjmp	.+72     	; 0x3562 <LCD_displayCharacter+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	68 85       	ldd	r22, Y+8	; 0x08
    351c:	79 85       	ldd	r23, Y+9	; 0x09
    351e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3520:	9b 85       	ldd	r25, Y+11	; 0x0b
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9f 83       	std	Y+7, r25	; 0x07
    352c:	8e 83       	std	Y+6, r24	; 0x06
    352e:	8e 81       	ldd	r24, Y+6	; 0x06
    3530:	9f 81       	ldd	r25, Y+7	; 0x07
    3532:	9b 83       	std	Y+3, r25	; 0x03
    3534:	8a 83       	std	Y+2, r24	; 0x02
    3536:	8a 81       	ldd	r24, Y+2	; 0x02
    3538:	9b 81       	ldd	r25, Y+3	; 0x03
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <LCD_displayCharacter+0x734>
    353e:	9b 83       	std	Y+3, r25	; 0x03
    3540:	8a 83       	std	Y+2, r24	; 0x02
    3542:	0f c0       	rjmp	.+30     	; 0x3562 <LCD_displayCharacter+0x75c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3544:	69 89       	ldd	r22, Y+17	; 0x11
    3546:	7a 89       	ldd	r23, Y+18	; 0x12
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	88 8b       	std	Y+16, r24	; 0x10
    3556:	88 89       	ldd	r24, Y+16	; 0x10
    3558:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	8a 95       	dec	r24
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_displayCharacter+0x756>
    3560:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_us(15);
#endif
}
    3562:	cf 59       	subi	r28, 0x9F	; 159
    3564:	df 4f       	sbci	r29, 0xFF	; 255
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	cf 91       	pop	r28
    3572:	df 91       	pop	r29
    3574:	1f 91       	pop	r17
    3576:	0f 91       	pop	r16
    3578:	08 95       	ret

0000357a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	00 d0       	rcall	.+0      	; 0x3580 <LCD_displayString+0x6>
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
    3584:	9a 83       	std	Y+2, r25	; 0x02
    3586:	89 83       	std	Y+1, r24	; 0x01
    3588:	0a c0       	rjmp	.+20     	; 0x359e <LCD_displayString+0x24>
	 * display each character of the string
	 * increment the pointer.
	 **************************************************/
	while(*Str != '\0')
	{
		LCD_displayCharacter(*Str);
    358a:	e9 81       	ldd	r30, Y+1	; 0x01
    358c:	fa 81       	ldd	r31, Y+2	; 0x02
    358e:	80 81       	ld	r24, Z
    3590:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayCharacter>
		++Str;
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	9a 81       	ldd	r25, Y+2	; 0x02
    3598:	01 96       	adiw	r24, 0x01	; 1
    359a:	9a 83       	std	Y+2, r25	; 0x02
    359c:	89 83       	std	Y+1, r24	; 0x01
	/**************************************************
	 * loop on Str until reach '\0'
	 * display each character of the string
	 * increment the pointer.
	 **************************************************/
	while(*Str != '\0')
    359e:	e9 81       	ldd	r30, Y+1	; 0x01
    35a0:	fa 81       	ldd	r31, Y+2	; 0x02
    35a2:	80 81       	ld	r24, Z
    35a4:	88 23       	and	r24, r24
    35a6:	89 f7       	brne	.-30     	; 0x358a <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		++Str;
	}
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <LCD_integerToString>:

void LCD_integerToString(int num)
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	62 97       	sbiw	r28, 0x12	; 18
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	9a 8b       	std	Y+18, r25	; 0x12
    35c8:	89 8b       	std	Y+17, r24	; 0x11
	 * int num: the integer needed to be converted.
	 * char *str: the string contains the ASCII of the integer.
	 * base : the base of the number (Decimal(10),Binary(2),Octal(8),Hex(16)).
	 ***************************************************************************/
	char String[16];
	itoa(num,String,10);
    35ca:	89 89       	ldd	r24, Y+17	; 0x11
    35cc:	9a 89       	ldd	r25, Y+18	; 0x12
    35ce:	9e 01       	movw	r18, r28
    35d0:	2f 5f       	subi	r18, 0xFF	; 255
    35d2:	3f 4f       	sbci	r19, 0xFF	; 255
    35d4:	b9 01       	movw	r22, r18
    35d6:	4a e0       	ldi	r20, 0x0A	; 10
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <itoa>
	LCD_displayString(String);
    35de:	ce 01       	movw	r24, r28
    35e0:	01 96       	adiw	r24, 0x01	; 1
    35e2:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
}
    35e6:	62 96       	adiw	r28, 0x12	; 18
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row_index,uint8 col_index)
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <LCD_moveCursor+0x6>
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <LCD_moveCursor+0x8>
    3600:	0f 92       	push	r0
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	8a 83       	std	Y+2, r24	; 0x02
    3608:	6b 83       	std	Y+3, r22	; 0x03
	 * 1. column index.
	 * 2. address of the first column in the row.
	 * add the final address to the address of the origin(0,0) to..
	 * calculate the address referred to the origin.
	 *************************************************************/
	uint8 a_lcd_col_address = LCD_FIRST_LINE_FIRST_COL_ADDRESS;
    360a:	19 82       	std	Y+1, r1	; 0x01
	switch(row_index)
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	3d 83       	std	Y+5, r19	; 0x05
    3614:	2c 83       	std	Y+4, r18	; 0x04
    3616:	8c 81       	ldd	r24, Y+4	; 0x04
    3618:	9d 81       	ldd	r25, Y+5	; 0x05
    361a:	81 30       	cpi	r24, 0x01	; 1
    361c:	91 05       	cpc	r25, r1
    361e:	d1 f0       	breq	.+52     	; 0x3654 <LCD_moveCursor+0x5c>
    3620:	2c 81       	ldd	r18, Y+4	; 0x04
    3622:	3d 81       	ldd	r19, Y+5	; 0x05
    3624:	22 30       	cpi	r18, 0x02	; 2
    3626:	31 05       	cpc	r19, r1
    3628:	2c f4       	brge	.+10     	; 0x3634 <LCD_moveCursor+0x3c>
    362a:	8c 81       	ldd	r24, Y+4	; 0x04
    362c:	9d 81       	ldd	r25, Y+5	; 0x05
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	61 f0       	breq	.+24     	; 0x364a <LCD_moveCursor+0x52>
    3632:	21 c0       	rjmp	.+66     	; 0x3676 <LCD_moveCursor+0x7e>
    3634:	2c 81       	ldd	r18, Y+4	; 0x04
    3636:	3d 81       	ldd	r19, Y+5	; 0x05
    3638:	22 30       	cpi	r18, 0x02	; 2
    363a:	31 05       	cpc	r19, r1
    363c:	89 f0       	breq	.+34     	; 0x3660 <LCD_moveCursor+0x68>
    363e:	8c 81       	ldd	r24, Y+4	; 0x04
    3640:	9d 81       	ldd	r25, Y+5	; 0x05
    3642:	83 30       	cpi	r24, 0x03	; 3
    3644:	91 05       	cpc	r25, r1
    3646:	91 f0       	breq	.+36     	; 0x366c <LCD_moveCursor+0x74>
    3648:	16 c0       	rjmp	.+44     	; 0x3676 <LCD_moveCursor+0x7e>
	{
	case 0:
		a_lcd_col_address += col_index;
    364a:	89 81       	ldd	r24, Y+1	; 0x01
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	89 0f       	add	r24, r25
    3650:	89 83       	std	Y+1, r24	; 0x01
    3652:	11 c0       	rjmp	.+34     	; 0x3676 <LCD_moveCursor+0x7e>
		break;
	case 1:
		a_lcd_col_address += (col_index+LCD_SECOND_LINE_FIRST_COL_ADDRESS);
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	89 0f       	add	r24, r25
    365a:	80 5c       	subi	r24, 0xC0	; 192
    365c:	89 83       	std	Y+1, r24	; 0x01
    365e:	0b c0       	rjmp	.+22     	; 0x3676 <LCD_moveCursor+0x7e>
		break;
	case 2:
		a_lcd_col_address += (col_index+LCD_THIRD_LINE_FIRST_COL_ADDRESS);
    3660:	9b 81       	ldd	r25, Y+3	; 0x03
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	89 0f       	add	r24, r25
    3666:	80 5f       	subi	r24, 0xF0	; 240
    3668:	89 83       	std	Y+1, r24	; 0x01
    366a:	05 c0       	rjmp	.+10     	; 0x3676 <LCD_moveCursor+0x7e>
		break;
	case 3:
		a_lcd_col_address += (col_index+LCD_FOURTH_LINE_FIRST_COL_ADDRESS);
    366c:	9b 81       	ldd	r25, Y+3	; 0x03
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	89 0f       	add	r24, r25
    3672:	80 5b       	subi	r24, 0xB0	; 176
    3674:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(a_lcd_col_address|LCD_SET_CURSOR_POSITION);
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	80 68       	ori	r24, 0x80	; 128
    367a:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_sendCommand>
}
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	00 d0       	rcall	.+0      	; 0x3694 <LCD_displayStringRowColumn+0x6>
    3694:	00 d0       	rcall	.+0      	; 0x3696 <LCD_displayStringRowColumn+0x8>
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	6a 83       	std	Y+2, r22	; 0x02
    369e:	5c 83       	std	Y+4, r21	; 0x04
    36a0:	4b 83       	std	Y+3, r20	; 0x03
	/**********************************************
	 * move to the desired position.
	 * display the string.
	 **********************************************/
	LCD_moveCursor(row, col);
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	6a 81       	ldd	r22, Y+2	; 0x02
    36a6:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_moveCursor>
	LCD_displayString(Str);
    36aa:	8b 81       	ldd	r24, Y+3	; 0x03
    36ac:	9c 81       	ldd	r25, Y+4	; 0x04
    36ae:	0e 94 bd 1a 	call	0x357a	; 0x357a <LCD_displayString>
}
    36b2:	0f 90       	pop	r0
    36b4:	0f 90       	pop	r0
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	cf 91       	pop	r28
    36bc:	df 91       	pop	r29
    36be:	08 95       	ret

000036c0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	0e 94 23 13 	call	0x2646	; 0x2646 <LCD_sendCommand>
}
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	00 d0       	rcall	.+0      	; 0x36da <KEYPAD_getPressedKey+0x6>
    36da:	0f 92       	push	r0
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    36e0:	19 82       	std	Y+1, r1	; 0x01
	GPIO_setupPortDirection(KEYPAD_ROWS_PORT_ID, PORT_INPUT);
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	60 e0       	ldi	r22, 0x00	; 0
    36e6:	0e 94 87 0b 	call	0x170e	; 0x170e <GPIO_setupPortDirection>
	GPIO_setupPortDirection(KEYPAD_COLS_PORT_ID, PORT_INPUT);
    36ea:	82 e0       	ldi	r24, 0x02	; 2
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	0e 94 87 0b 	call	0x170e	; 0x170e <GPIO_setupPortDirection>
	while(1)
	{
		for(col=0; col< KEYPAD_NUM_OF_COLS; col++)
    36f2:	1b 82       	std	Y+3, r1	; 0x03
    36f4:	3f c0       	rjmp	.+126    	; 0x3774 <KEYPAD_getPressedKey+0xa0>
		{
			GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID+col, PIN_OUTPUT);
    36f6:	8b 81       	ldd	r24, Y+3	; 0x03
    36f8:	98 2f       	mov	r25, r24
    36fa:	9c 5f       	subi	r25, 0xFC	; 252
    36fc:	82 e0       	ldi	r24, 0x02	; 2
    36fe:	69 2f       	mov	r22, r25
    3700:	41 e0       	ldi	r20, 0x01	; 1
    3702:	0e 94 16 09 	call	0x122c	; 0x122c <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    3706:	8b 81       	ldd	r24, Y+3	; 0x03
    3708:	88 2f       	mov	r24, r24
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9c 01       	movw	r18, r24
    370e:	2c 5f       	subi	r18, 0xFC	; 252
    3710:	3f 4f       	sbci	r19, 0xFF	; 255
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	02 c0       	rjmp	.+4      	; 0x371c <KEYPAD_getPressedKey+0x48>
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	2a 95       	dec	r18
    371e:	e2 f7       	brpl	.-8      	; 0x3718 <KEYPAD_getPressedKey+0x44>
    3720:	80 95       	com	r24
    3722:	89 83       	std	Y+1, r24	; 0x01
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_COLS_PORT_ID,keypad_port_value);
    3724:	82 e0       	ldi	r24, 0x02	; 2
    3726:	69 81       	ldd	r22, Y+1	; 0x01
    3728:	0e 94 cb 0b 	call	0x1796	; 0x1796 <GPIO_writePort>
			for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    372c:	1a 82       	std	Y+2, r1	; 0x02
    372e:	1c c0       	rjmp	.+56     	; 0x3768 <KEYPAD_getPressedKey+0x94>
			{
				if(GPIO_readPin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row) == KEYPAD_BUTTON_PRESSED)
    3730:	82 e0       	ldi	r24, 0x02	; 2
    3732:	6a 81       	ldd	r22, Y+2	; 0x02
    3734:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <GPIO_readPin>
    3738:	88 23       	and	r24, r24
    373a:	99 f4       	brne	.+38     	; 0x3762 <KEYPAD_getPressedKey+0x8e>
				{
#if(KEYPAD_NUM_OF_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_OF_COLS)+col+1);
#elif(KEYPAD_NUM_OF_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_OF_COLS)+col+1);
    373c:	8a 81       	ldd	r24, Y+2	; 0x02
    373e:	88 2f       	mov	r24, r24
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	88 0f       	add	r24, r24
    3748:	99 1f       	adc	r25, r25
    374a:	98 2f       	mov	r25, r24
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	89 0f       	add	r24, r25
    3750:	8f 5f       	subi	r24, 0xFF	; 255
    3752:	0e 94 bf 1b 	call	0x377e	; 0x377e <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_COLS_PORT_ID,keypad_port_value);
			for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    3762:	8a 81       	ldd	r24, Y+2	; 0x02
    3764:	8f 5f       	subi	r24, 0xFF	; 255
    3766:	8a 83       	std	Y+2, r24	; 0x02
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	84 30       	cpi	r24, 0x04	; 4
    376c:	08 f3       	brcs	.-62     	; 0x3730 <KEYPAD_getPressedKey+0x5c>
	uint8 keypad_port_value = 0;
	GPIO_setupPortDirection(KEYPAD_ROWS_PORT_ID, PORT_INPUT);
	GPIO_setupPortDirection(KEYPAD_COLS_PORT_ID, PORT_INPUT);
	while(1)
	{
		for(col=0; col< KEYPAD_NUM_OF_COLS; col++)
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	8f 5f       	subi	r24, 0xFF	; 255
    3772:	8b 83       	std	Y+3, r24	; 0x03
    3774:	8b 81       	ldd	r24, Y+3	; 0x03
    3776:	84 30       	cpi	r24, 0x04	; 4
    3778:	08 f4       	brcc	.+2      	; 0x377c <KEYPAD_getPressedKey+0xa8>
    377a:	bd cf       	rjmp	.-134    	; 0x36f6 <KEYPAD_getPressedKey+0x22>
    377c:	ba cf       	rjmp	.-140    	; 0x36f2 <KEYPAD_getPressedKey+0x1e>

0000377e <KEYPAD_4x4_adjustKeyNumber>:
	}

#elif(KEYPAD_NUM_OF_COLS == 4)

	static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_num)
	{
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	00 d0       	rcall	.+0      	; 0x3784 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3784:	00 d0       	rcall	.+0      	; 0x3786 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	8a 83       	std	Y+2, r24	; 0x02
		uint8 keypad_button = 0;
    378c:	19 82       	std	Y+1, r1	; 0x01
		switch(button_num)
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	28 2f       	mov	r18, r24
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	3c 83       	std	Y+4, r19	; 0x04
    3796:	2b 83       	std	Y+3, r18	; 0x03
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
    379a:	9c 81       	ldd	r25, Y+4	; 0x04
    379c:	88 30       	cpi	r24, 0x08	; 8
    379e:	91 05       	cpc	r25, r1
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    37a2:	72 c0       	rjmp	.+228    	; 0x3888 <KEYPAD_4x4_adjustKeyNumber+0x10a>
    37a4:	2b 81       	ldd	r18, Y+3	; 0x03
    37a6:	3c 81       	ldd	r19, Y+4	; 0x04
    37a8:	29 30       	cpi	r18, 0x09	; 9
    37aa:	31 05       	cpc	r19, r1
    37ac:	5c f5       	brge	.+86     	; 0x3804 <KEYPAD_4x4_adjustKeyNumber+0x86>
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	9c 81       	ldd	r25, Y+4	; 0x04
    37b2:	84 30       	cpi	r24, 0x04	; 4
    37b4:	91 05       	cpc	r25, r1
    37b6:	09 f4       	brne	.+2      	; 0x37ba <KEYPAD_4x4_adjustKeyNumber+0x3c>
    37b8:	5b c0       	rjmp	.+182    	; 0x3870 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    37ba:	2b 81       	ldd	r18, Y+3	; 0x03
    37bc:	3c 81       	ldd	r19, Y+4	; 0x04
    37be:	25 30       	cpi	r18, 0x05	; 5
    37c0:	31 05       	cpc	r19, r1
    37c2:	9c f4       	brge	.+38     	; 0x37ea <KEYPAD_4x4_adjustKeyNumber+0x6c>
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
    37c6:	9c 81       	ldd	r25, Y+4	; 0x04
    37c8:	82 30       	cpi	r24, 0x02	; 2
    37ca:	91 05       	cpc	r25, r1
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <KEYPAD_4x4_adjustKeyNumber+0x52>
    37ce:	4a c0       	rjmp	.+148    	; 0x3864 <KEYPAD_4x4_adjustKeyNumber+0xe6>
    37d0:	2b 81       	ldd	r18, Y+3	; 0x03
    37d2:	3c 81       	ldd	r19, Y+4	; 0x04
    37d4:	23 30       	cpi	r18, 0x03	; 3
    37d6:	31 05       	cpc	r19, r1
    37d8:	0c f0       	brlt	.+2      	; 0x37dc <KEYPAD_4x4_adjustKeyNumber+0x5e>
    37da:	47 c0       	rjmp	.+142    	; 0x386a <KEYPAD_4x4_adjustKeyNumber+0xec>
    37dc:	8b 81       	ldd	r24, Y+3	; 0x03
    37de:	9c 81       	ldd	r25, Y+4	; 0x04
    37e0:	81 30       	cpi	r24, 0x01	; 1
    37e2:	91 05       	cpc	r25, r1
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    37e6:	3b c0       	rjmp	.+118    	; 0x385e <KEYPAD_4x4_adjustKeyNumber+0xe0>
    37e8:	37 c0       	rjmp	.+110    	; 0x3858 <KEYPAD_4x4_adjustKeyNumber+0xda>
    37ea:	2b 81       	ldd	r18, Y+3	; 0x03
    37ec:	3c 81       	ldd	r19, Y+4	; 0x04
    37ee:	26 30       	cpi	r18, 0x06	; 6
    37f0:	31 05       	cpc	r19, r1
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <KEYPAD_4x4_adjustKeyNumber+0x78>
    37f4:	43 c0       	rjmp	.+134    	; 0x387c <KEYPAD_4x4_adjustKeyNumber+0xfe>
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	9c 81       	ldd	r25, Y+4	; 0x04
    37fa:	87 30       	cpi	r24, 0x07	; 7
    37fc:	91 05       	cpc	r25, r1
    37fe:	0c f0       	brlt	.+2      	; 0x3802 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3800:	40 c0       	rjmp	.+128    	; 0x3882 <KEYPAD_4x4_adjustKeyNumber+0x104>
    3802:	39 c0       	rjmp	.+114    	; 0x3876 <KEYPAD_4x4_adjustKeyNumber+0xf8>
    3804:	2b 81       	ldd	r18, Y+3	; 0x03
    3806:	3c 81       	ldd	r19, Y+4	; 0x04
    3808:	2c 30       	cpi	r18, 0x0C	; 12
    380a:	31 05       	cpc	r19, r1
    380c:	09 f4       	brne	.+2      	; 0x3810 <KEYPAD_4x4_adjustKeyNumber+0x92>
    380e:	48 c0       	rjmp	.+144    	; 0x38a0 <KEYPAD_4x4_adjustKeyNumber+0x122>
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	9c 81       	ldd	r25, Y+4	; 0x04
    3814:	8d 30       	cpi	r24, 0x0D	; 13
    3816:	91 05       	cpc	r25, r1
    3818:	5c f4       	brge	.+22     	; 0x3830 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    381a:	2b 81       	ldd	r18, Y+3	; 0x03
    381c:	3c 81       	ldd	r19, Y+4	; 0x04
    381e:	2a 30       	cpi	r18, 0x0A	; 10
    3820:	31 05       	cpc	r19, r1
    3822:	c1 f1       	breq	.+112    	; 0x3894 <KEYPAD_4x4_adjustKeyNumber+0x116>
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	9c 81       	ldd	r25, Y+4	; 0x04
    3828:	8b 30       	cpi	r24, 0x0B	; 11
    382a:	91 05       	cpc	r25, r1
    382c:	b4 f5       	brge	.+108    	; 0x389a <KEYPAD_4x4_adjustKeyNumber+0x11c>
    382e:	2f c0       	rjmp	.+94     	; 0x388e <KEYPAD_4x4_adjustKeyNumber+0x110>
    3830:	2b 81       	ldd	r18, Y+3	; 0x03
    3832:	3c 81       	ldd	r19, Y+4	; 0x04
    3834:	2e 30       	cpi	r18, 0x0E	; 14
    3836:	31 05       	cpc	r19, r1
    3838:	c9 f1       	breq	.+114    	; 0x38ac <KEYPAD_4x4_adjustKeyNumber+0x12e>
    383a:	8b 81       	ldd	r24, Y+3	; 0x03
    383c:	9c 81       	ldd	r25, Y+4	; 0x04
    383e:	8e 30       	cpi	r24, 0x0E	; 14
    3840:	91 05       	cpc	r25, r1
    3842:	8c f1       	brlt	.+98     	; 0x38a6 <KEYPAD_4x4_adjustKeyNumber+0x128>
    3844:	2b 81       	ldd	r18, Y+3	; 0x03
    3846:	3c 81       	ldd	r19, Y+4	; 0x04
    3848:	2f 30       	cpi	r18, 0x0F	; 15
    384a:	31 05       	cpc	r19, r1
    384c:	89 f1       	breq	.+98     	; 0x38b0 <KEYPAD_4x4_adjustKeyNumber+0x132>
    384e:	8b 81       	ldd	r24, Y+3	; 0x03
    3850:	9c 81       	ldd	r25, Y+4	; 0x04
    3852:	80 31       	cpi	r24, 0x10	; 16
    3854:	91 05       	cpc	r25, r1
    3856:	79 f1       	breq	.+94     	; 0x38b6 <KEYPAD_4x4_adjustKeyNumber+0x138>
		{
		default:
			keypad_button = button_num;
    3858:	8a 81       	ldd	r24, Y+2	; 0x02
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	2e c0       	rjmp	.+92     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 1:
			keypad_button = 7;
    385e:	87 e0       	ldi	r24, 0x07	; 7
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	2b c0       	rjmp	.+86     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 2:
			keypad_button = 8;
    3864:	88 e0       	ldi	r24, 0x08	; 8
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	28 c0       	rjmp	.+80     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 3:
			keypad_button = 9;
    386a:	89 e0       	ldi	r24, 0x09	; 9
    386c:	89 83       	std	Y+1, r24	; 0x01
    386e:	25 c0       	rjmp	.+74     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 4:
			keypad_button = '/';
    3870:	8f e2       	ldi	r24, 0x2F	; 47
    3872:	89 83       	std	Y+1, r24	; 0x01
    3874:	22 c0       	rjmp	.+68     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 5:
			keypad_button = 4;
    3876:	84 e0       	ldi	r24, 0x04	; 4
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	1f c0       	rjmp	.+62     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 6:
			keypad_button = 5;
    387c:	85 e0       	ldi	r24, 0x05	; 5
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	1c c0       	rjmp	.+56     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 7:
			keypad_button = 6;
    3882:	86 e0       	ldi	r24, 0x06	; 6
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	19 c0       	rjmp	.+50     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 8:
			keypad_button = '*';
    3888:	8a e2       	ldi	r24, 0x2A	; 42
    388a:	89 83       	std	Y+1, r24	; 0x01
    388c:	16 c0       	rjmp	.+44     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 9:
			keypad_button = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	13 c0       	rjmp	.+38     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 10:
			keypad_button = 2;
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	89 83       	std	Y+1, r24	; 0x01
    3898:	10 c0       	rjmp	.+32     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 11:
			keypad_button = 3;
    389a:	83 e0       	ldi	r24, 0x03	; 3
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	0d c0       	rjmp	.+26     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 12:
			keypad_button = '-';
    38a0:	8d e2       	ldi	r24, 0x2D	; 45
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	0a c0       	rjmp	.+20     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 13:
			keypad_button = ENTER; /* ASCII of Enter */
    38a6:	8d e0       	ldi	r24, 0x0D	; 13
    38a8:	89 83       	std	Y+1, r24	; 0x01
    38aa:	07 c0       	rjmp	.+14     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 14:
			keypad_button = 0;
    38ac:	19 82       	std	Y+1, r1	; 0x01
    38ae:	05 c0       	rjmp	.+10     	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 15:
			keypad_button = '=';
    38b0:	8d e3       	ldi	r24, 0x3D	; 61
    38b2:	89 83       	std	Y+1, r24	; 0x01
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 16:
			keypad_button = '+';
    38b6:	8b e2       	ldi	r24, 0x2B	; 43
    38b8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		return keypad_button;
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
	}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	08 95       	ret

000038ca <main>:

#define PASSWORD_NOT_ENTERED	0xFF
#define PASSWORD_ENTERED		1

int main(void)
{
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <main+0x6>
    38d0:	00 d0       	rcall	.+0      	; 0x38d2 <main+0x8>
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <main+0xa>
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
	 *  [uint8 flag]: variable to observe if the user is used the program for the first time or not.
	 *  [uint8 a_CTROL_option]: this variable stores the selected option selected by the user.
	 *  [uint8 a_num_of_wrong_passwords]: this variable used to observe how many wrong passwords the user has enterred.
	 *  [uint8 a_CTROL_verification_res]: this variable stores the result of the comparsion betweem the two input passwords.
	 ***********************************************************************************************************************/
	uint8 a_num_of_wrong_passwords = 0,a_passwordState;
    38d8:	1c 82       	std	Y+4, r1	; 0x04
	uint8 a_HMI_option = 0,a_HMI_optionOrder = 0;
    38da:	1a 82       	std	Y+2, r1	; 0x02
    38dc:	19 82       	std	Y+1, r1	; 0x01
	 * 1. initiate the timer configuration:timer1,compare-mode,prescaler_1024.
	 * 2. set the callback function = HMI_callBack.
	 * 3. initiate LCD.
	 * 4. set the uart configuration: 9600 baud-rate, one stop bit, 8bits-data,and no parity bit.
	 ********************************************************************************************/
	HMI_Init();
    38de:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <HMI_Init>

	/* ********************************************
	 * wait for control ECU to send ready
	 * receive the flag value from control ECU
	 * ********************************************/
	HMI_receiveACK();
    38e2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HMI_receiveACK>
	a_passwordState = UART_receiveByte();
    38e6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    38ea:	8b 83       	std	Y+3, r24	; 0x03

	/* Don't enter here if you already set you password */
	if(a_passwordState == PASSWORD_NOT_ENTERED)
    38ec:	8b 81       	ldd	r24, Y+3	; 0x03
    38ee:	8f 3f       	cpi	r24, 0xFF	; 255
    38f0:	11 f4       	brne	.+4      	; 0x38f6 <main+0x2c>
		 * 	8-3. displsy "Try Again" on the next line.
		 * 	8-4. wait for 500 msec.
		 * 	8-5. clear the screen.
		 * 9. loop until the user enter a matched passwords.
		 ******************************************************************************************************/
		HMI_passwordInputOperation();
    38f2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <HMI_passwordInputOperation>
	}

	/* Enable the global interrupt */
	ENABLE_INTERRUPTS();
    38f6:	af e5       	ldi	r26, 0x5F	; 95
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	ef e5       	ldi	r30, 0x5F	; 95
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	80 68       	ori	r24, 0x80	; 128
    3902:	8c 93       	st	X, r24

	for(;;)
	{
		/* Get the chosen option from the user */
		a_HMI_option = HMI_getChosenOption();
    3904:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <HMI_getChosenOption>
    3908:	8a 83       	std	Y+2, r24	; 0x02

		switch(a_HMI_option)
    390a:	8a 81       	ldd	r24, Y+2	; 0x02
    390c:	28 2f       	mov	r18, r24
    390e:	30 e0       	ldi	r19, 0x00	; 0
    3910:	3e 83       	std	Y+6, r19	; 0x06
    3912:	2d 83       	std	Y+5, r18	; 0x05
    3914:	8d 81       	ldd	r24, Y+5	; 0x05
    3916:	9e 81       	ldd	r25, Y+6	; 0x06
    3918:	8b 32       	cpi	r24, 0x2B	; 43
    391a:	91 05       	cpc	r25, r1
    391c:	31 f0       	breq	.+12     	; 0x392a <main+0x60>
    391e:	2d 81       	ldd	r18, Y+5	; 0x05
    3920:	3e 81       	ldd	r19, Y+6	; 0x06
    3922:	2d 32       	cpi	r18, 0x2D	; 45
    3924:	31 05       	cpc	r19, r1
    3926:	09 f1       	breq	.+66     	; 0x396a <main+0xa0>
    3928:	ed cf       	rjmp	.-38     	; 0x3904 <main+0x3a>
			 * 3. verify the password: get password from user and send it to the control ECU.
			 * 4. send the chosen option to the control ECU.
			 * 5. Wait until the control ECU check the password and ready for communicate.
			 * 6. get option_order from the control ECU.
			 *********************************************************************************/
			a_num_of_wrong_passwords++;
    392a:	8c 81       	ldd	r24, Y+4	; 0x04
    392c:	8f 5f       	subi	r24, 0xFF	; 255
    392e:	8c 83       	std	Y+4, r24	; 0x04
			HMI_CLEAR_SCREEN();
    3930:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <LCD_clearScreen>
			HMI_sendACK();
    3934:	0e 94 76 11 	call	0x22ec	; 0x22ec <HMI_sendACK>
			UART_sendByte(OPEN_DOOR_OPTION);
    3938:	8b e2       	ldi	r24, 0x2B	; 43
    393a:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
			HMI_enterPassword();
    393e:	0e 94 98 0c 	call	0x1930	; 0x1930 <HMI_enterPassword>
			HMI_receiveACK();
    3942:	0e 94 68 11 	call	0x22d0	; 0x22d0 <HMI_receiveACK>
			a_HMI_optionOrder = UART_receiveByte();
    3946:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    394a:	89 83       	std	Y+1, r24	; 0x01

			if(a_HMI_optionOrder == DOOR_OPEN)
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	88 35       	cpi	r24, 0x58	; 88
    3950:	21 f4       	brne	.+8      	; 0x395a <main+0x90>
				 * 10. wait for 15 seconds.
				 * 11. clear screen.
				 * 12. display "Door close" for 100 msec.
				 * 13. clear the screen.
				 **************************************************/
				HMI_displayDoorAction();
    3952:	0e 94 a9 10 	call	0x2152	; 0x2152 <HMI_displayDoorAction>
				a_num_of_wrong_passwords = 0;
    3956:	1c 82       	std	Y+4, r1	; 0x04
    3958:	d5 cf       	rjmp	.-86     	; 0x3904 <main+0x3a>
			}
			else if(a_HMI_optionOrder == MISMATCHED)
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	88 23       	and	r24, r24
    395e:	91 f6       	brne	.-92     	; 0x3904 <main+0x3a>
				 * 10. if the number of wrong passwords reaches its maximum value (3):
				 * 	10-1. exit from the loop.
				 * 	10-2. reset the number of wrong passwords to 0.
				 * 	10-3. display the alarm message.
				 *************************************************************************************************/
					HMI_openDoorWrongPassword(&a_num_of_wrong_passwords);
    3960:	ce 01       	movw	r24, r28
    3962:	04 96       	adiw	r24, 0x04	; 4
    3964:	0e 94 99 11 	call	0x2332	; 0x2332 <HMI_openDoorWrongPassword>
    3968:	cd cf       	rjmp	.-102    	; 0x3904 <main+0x3a>
			}
			break;		/* return to the option menu */

		case CHANGE_PASSWORD_OPTION:

			a_num_of_wrong_passwords++;
    396a:	8c 81       	ldd	r24, Y+4	; 0x04
    396c:	8f 5f       	subi	r24, 0xFF	; 255
    396e:	8c 83       	std	Y+4, r24	; 0x04
			 * 	8-11. if the number of wrong passwords == 3:
			 * 		8-11-1. reset the value of number of wrong passwords.
			 * 		8-11-2. display the alarm action.
			 * 9. clear the screen.
			 *********************************************************************************************************************************/
			HMI_changePassword(&a_num_of_wrong_passwords);
    3970:	ce 01       	movw	r24, r28
    3972:	04 96       	adiw	r24, 0x04	; 4
    3974:	0e 94 4e 12 	call	0x249c	; 0x249c <HMI_changePassword>
    3978:	c5 cf       	rjmp	.-118    	; 0x3904 <main+0x3a>

0000397a <__udivmodsi4>:
    397a:	a1 e2       	ldi	r26, 0x21	; 33
    397c:	1a 2e       	mov	r1, r26
    397e:	aa 1b       	sub	r26, r26
    3980:	bb 1b       	sub	r27, r27
    3982:	fd 01       	movw	r30, r26
    3984:	0d c0       	rjmp	.+26     	; 0x39a0 <__udivmodsi4_ep>

00003986 <__udivmodsi4_loop>:
    3986:	aa 1f       	adc	r26, r26
    3988:	bb 1f       	adc	r27, r27
    398a:	ee 1f       	adc	r30, r30
    398c:	ff 1f       	adc	r31, r31
    398e:	a2 17       	cp	r26, r18
    3990:	b3 07       	cpc	r27, r19
    3992:	e4 07       	cpc	r30, r20
    3994:	f5 07       	cpc	r31, r21
    3996:	20 f0       	brcs	.+8      	; 0x39a0 <__udivmodsi4_ep>
    3998:	a2 1b       	sub	r26, r18
    399a:	b3 0b       	sbc	r27, r19
    399c:	e4 0b       	sbc	r30, r20
    399e:	f5 0b       	sbc	r31, r21

000039a0 <__udivmodsi4_ep>:
    39a0:	66 1f       	adc	r22, r22
    39a2:	77 1f       	adc	r23, r23
    39a4:	88 1f       	adc	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	1a 94       	dec	r1
    39aa:	69 f7       	brne	.-38     	; 0x3986 <__udivmodsi4_loop>
    39ac:	60 95       	com	r22
    39ae:	70 95       	com	r23
    39b0:	80 95       	com	r24
    39b2:	90 95       	com	r25
    39b4:	9b 01       	movw	r18, r22
    39b6:	ac 01       	movw	r20, r24
    39b8:	bd 01       	movw	r22, r26
    39ba:	cf 01       	movw	r24, r30
    39bc:	08 95       	ret

000039be <__prologue_saves__>:
    39be:	2f 92       	push	r2
    39c0:	3f 92       	push	r3
    39c2:	4f 92       	push	r4
    39c4:	5f 92       	push	r5
    39c6:	6f 92       	push	r6
    39c8:	7f 92       	push	r7
    39ca:	8f 92       	push	r8
    39cc:	9f 92       	push	r9
    39ce:	af 92       	push	r10
    39d0:	bf 92       	push	r11
    39d2:	cf 92       	push	r12
    39d4:	df 92       	push	r13
    39d6:	ef 92       	push	r14
    39d8:	ff 92       	push	r15
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	ca 1b       	sub	r28, r26
    39e8:	db 0b       	sbc	r29, r27
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	09 94       	ijmp

000039f6 <__epilogue_restores__>:
    39f6:	2a 88       	ldd	r2, Y+18	; 0x12
    39f8:	39 88       	ldd	r3, Y+17	; 0x11
    39fa:	48 88       	ldd	r4, Y+16	; 0x10
    39fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    39fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a00:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a02:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a04:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a06:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a08:	b9 84       	ldd	r11, Y+9	; 0x09
    3a0a:	c8 84       	ldd	r12, Y+8	; 0x08
    3a0c:	df 80       	ldd	r13, Y+7	; 0x07
    3a0e:	ee 80       	ldd	r14, Y+6	; 0x06
    3a10:	fd 80       	ldd	r15, Y+5	; 0x05
    3a12:	0c 81       	ldd	r16, Y+4	; 0x04
    3a14:	1b 81       	ldd	r17, Y+3	; 0x03
    3a16:	aa 81       	ldd	r26, Y+2	; 0x02
    3a18:	b9 81       	ldd	r27, Y+1	; 0x01
    3a1a:	ce 0f       	add	r28, r30
    3a1c:	d1 1d       	adc	r29, r1
    3a1e:	0f b6       	in	r0, 0x3f	; 63
    3a20:	f8 94       	cli
    3a22:	de bf       	out	0x3e, r29	; 62
    3a24:	0f be       	out	0x3f, r0	; 63
    3a26:	cd bf       	out	0x3d, r28	; 61
    3a28:	ed 01       	movw	r28, r26
    3a2a:	08 95       	ret

00003a2c <itoa>:
    3a2c:	fb 01       	movw	r30, r22
    3a2e:	9f 01       	movw	r18, r30
    3a30:	e8 94       	clt
    3a32:	42 30       	cpi	r20, 0x02	; 2
    3a34:	c4 f0       	brlt	.+48     	; 0x3a66 <itoa+0x3a>
    3a36:	45 32       	cpi	r20, 0x25	; 37
    3a38:	b4 f4       	brge	.+44     	; 0x3a66 <itoa+0x3a>
    3a3a:	4a 30       	cpi	r20, 0x0A	; 10
    3a3c:	29 f4       	brne	.+10     	; 0x3a48 <itoa+0x1c>
    3a3e:	97 fb       	bst	r25, 7
    3a40:	1e f4       	brtc	.+6      	; 0x3a48 <itoa+0x1c>
    3a42:	90 95       	com	r25
    3a44:	81 95       	neg	r24
    3a46:	9f 4f       	sbci	r25, 0xFF	; 255
    3a48:	64 2f       	mov	r22, r20
    3a4a:	77 27       	eor	r23, r23
    3a4c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__udivmodhi4>
    3a50:	80 5d       	subi	r24, 0xD0	; 208
    3a52:	8a 33       	cpi	r24, 0x3A	; 58
    3a54:	0c f0       	brlt	.+2      	; 0x3a58 <itoa+0x2c>
    3a56:	89 5d       	subi	r24, 0xD9	; 217
    3a58:	81 93       	st	Z+, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	a1 f7       	brne	.-24     	; 0x3a48 <itoa+0x1c>
    3a60:	16 f4       	brtc	.+4      	; 0x3a66 <itoa+0x3a>
    3a62:	5d e2       	ldi	r21, 0x2D	; 45
    3a64:	51 93       	st	Z+, r21
    3a66:	10 82       	st	Z, r1
    3a68:	c9 01       	movw	r24, r18
    3a6a:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <strrev>

00003a6e <strrev>:
    3a6e:	dc 01       	movw	r26, r24
    3a70:	fc 01       	movw	r30, r24
    3a72:	67 2f       	mov	r22, r23
    3a74:	71 91       	ld	r23, Z+
    3a76:	77 23       	and	r23, r23
    3a78:	e1 f7       	brne	.-8      	; 0x3a72 <strrev+0x4>
    3a7a:	32 97       	sbiw	r30, 0x02	; 2
    3a7c:	04 c0       	rjmp	.+8      	; 0x3a86 <strrev+0x18>
    3a7e:	7c 91       	ld	r23, X
    3a80:	6d 93       	st	X+, r22
    3a82:	70 83       	st	Z, r23
    3a84:	62 91       	ld	r22, -Z
    3a86:	ae 17       	cp	r26, r30
    3a88:	bf 07       	cpc	r27, r31
    3a8a:	c8 f3       	brcs	.-14     	; 0x3a7e <strrev+0x10>
    3a8c:	08 95       	ret

00003a8e <__udivmodhi4>:
    3a8e:	aa 1b       	sub	r26, r26
    3a90:	bb 1b       	sub	r27, r27
    3a92:	51 e1       	ldi	r21, 0x11	; 17
    3a94:	07 c0       	rjmp	.+14     	; 0x3aa4 <__udivmodhi4_ep>

00003a96 <__udivmodhi4_loop>:
    3a96:	aa 1f       	adc	r26, r26
    3a98:	bb 1f       	adc	r27, r27
    3a9a:	a6 17       	cp	r26, r22
    3a9c:	b7 07       	cpc	r27, r23
    3a9e:	10 f0       	brcs	.+4      	; 0x3aa4 <__udivmodhi4_ep>
    3aa0:	a6 1b       	sub	r26, r22
    3aa2:	b7 0b       	sbc	r27, r23

00003aa4 <__udivmodhi4_ep>:
    3aa4:	88 1f       	adc	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	5a 95       	dec	r21
    3aaa:	a9 f7       	brne	.-22     	; 0x3a96 <__udivmodhi4_loop>
    3aac:	80 95       	com	r24
    3aae:	90 95       	com	r25
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	cd 01       	movw	r24, r26
    3ab4:	08 95       	ret

00003ab6 <_exit>:
    3ab6:	f8 94       	cli

00003ab8 <__stop_program>:
    3ab8:	ff cf       	rjmp	.-2      	; 0x3ab8 <__stop_program>
