
Door_Locker_Security_Systems_HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00800060  00003c62  00003cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080012c  0080012c  00003dc2  2**0
                  ALLOC
  3 .stab         00003b28  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d89  00000000  00000000  000078ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009675  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000097d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000caaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000da2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000dbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000de6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e6fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_5>
      18:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_6>
      1c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__vector_7>
      20:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 32       	cpi	r26, 0x2C	; 44
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e2       	ldi	r26, 0x2C	; 44
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <main>
      8a:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e1       	ldi	r26, 0x1D	; 29
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e1       	ldi	r24, 0x1D	; 29
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cf 1d 	jmp	0x3b9e	; 0x3b9e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e1       	ldi	r22, 0x1D	; 29
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bf 1d 	jmp	0x3b7e	; 0x3b7e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 db 1d 	jmp	0x3bb6	; 0x3bb6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c3 1d 	jmp	0x3b86	; 0x3b86 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <UART_init>:
#include <avr/io.h>
#include "uart.h"

#include <util/delay.h>
void UART_init(UART_ConfigType* uart_config)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <UART_init+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <UART_init+0x8>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     cae:	1a 82       	std	Y+2, r1	; 0x02
     cb0:	19 82       	std	Y+1, r1	; 0x01
	/****************** UCSRA Description ******************************
	 * set U2X=1 for double transmission speed.
	 *******************************************************************/
	UCSRA = (1<<U2X);
     cb2:	eb e2       	ldi	r30, 0x2B	; 43
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ******************************************************************/
	UCSRB = (1<<TXEN)|(1<<RXEN);
     cba:	ea e2       	ldi	r30, 0x2A	; 42
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	88 e1       	ldi	r24, 0x18	; 24
     cc0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (uart_config->N_StopBits<<USBS)|(uart_config->frame_type<<1)|(uart_config->parity_type<<4)|(1<<URSEL);
     cc2:	a0 e4       	ldi	r26, 0x40	; 64
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	eb 81       	ldd	r30, Y+3	; 0x03
     cc8:	fc 81       	ldd	r31, Y+4	; 0x04
     cca:	86 81       	ldd	r24, Z+6	; 0x06
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	28 2f       	mov	r18, r24
     cde:	eb 81       	ldd	r30, Y+3	; 0x03
     ce0:	fc 81       	ldd	r31, Y+4	; 0x04
     ce2:	84 81       	ldd	r24, Z+4	; 0x04
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	28 2b       	or	r18, r24
     cee:	eb 81       	ldd	r30, Y+3	; 0x03
     cf0:	fc 81       	ldd	r31, Y+4	; 0x04
     cf2:	85 81       	ldd	r24, Z+5	; 0x05
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	82 95       	swap	r24
     cfa:	92 95       	swap	r25
     cfc:	90 7f       	andi	r25, 0xF0	; 240
     cfe:	98 27       	eor	r25, r24
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	98 27       	eor	r25, r24
     d04:	82 2b       	or	r24, r18
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	8c 93       	st	X, r24

	/* *************************************
	 * Calculate the UBRR register value
	 * *************************************/
	ubrr_value = (uint16)(((F_CPU)/(uart_config->baud_rate*8UL))-1);
     d0a:	eb 81       	ldd	r30, Y+3	; 0x03
     d0c:	fc 81       	ldd	r31, Y+4	; 0x04
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	a2 81       	ldd	r26, Z+2	; 0x02
     d14:	b3 81       	ldd	r27, Z+3	; 0x03
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	aa 1f       	adc	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	aa 1f       	adc	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	aa 1f       	adc	r26, r26
     d2c:	bb 1f       	adc	r27, r27
     d2e:	9c 01       	movw	r18, r24
     d30:	ad 01       	movw	r20, r26
     d32:	80 e4       	ldi	r24, 0x40	; 64
     d34:	92 e4       	ldi	r25, 0x42	; 66
     d36:	af e0       	ldi	r26, 0x0F	; 15
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <__udivmodsi4>
     d42:	da 01       	movw	r26, r20
     d44:	c9 01       	movw	r24, r18
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	9a 83       	std	Y+2, r25	; 0x02
     d4a:	89 83       	std	Y+1, r24	; 0x01

	/****************************************************************************
	 * First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 ****************************************************************************/
	UBRRH = (ubrr_value >> 8);
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	9a 81       	ldd	r25, Y+2	; 0x02
     d54:	89 2f       	mov	r24, r25
     d56:	99 27       	eor	r25, r25
     d58:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     d5a:	e9 e2       	ldi	r30, 0x29	; 41
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 83       	st	Z, r24
}
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <UART_sendByte>:

void UART_sendByte(uint8 a_data)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Poll until the USART data register empty flag is, to make sure the UDR has empty now and ready to transmit
	 *  a new data.
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
     d7c:	eb e2       	ldi	r30, 0x2B	; 43
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 2f       	mov	r24, r24
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	80 72       	andi	r24, 0x20	; 32
     d88:	90 70       	andi	r25, 0x00	; 0
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	b9 f3       	breq	.-18     	; 0xd7c <UART_sendByte+0xc>
	/*
	 * Put the required data in UDR register
	 * It also clear the UDRE flag as the UDR register is not empty now.
	 */
	UDR = a_data;
     d8e:	ec e2       	ldi	r30, 0x2C	; 44
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 83       	st	Z, r24
}
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <UART_receiveByte>:


uint8 UART_receiveByte(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	/*
	 *  Poll until the receive complete flag is set, to make sure the UDR has an correctly unread data
	 * The flag is cleared automatically when the receive buffer is empty.
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
     da6:	eb e2       	ldi	r30, 0x2B	; 43
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	dc f7       	brge	.-10     	; 0xda6 <UART_receiveByte+0x8>
	/* Read the unread data in the receive buffer register */
	return UDR;
     db0:	ec e2       	ldi	r30, 0x2C	; 44
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <sendString>:

void sendString(uint8 *a_Str)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <sendString+0x6>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	0a c0       	rjmp	.+20     	; 0xde0 <sendString+0x24>
	while(*a_Str != '\0')
	{
		UART_sendByte(*a_Str);
     dcc:	e9 81       	ldd	r30, Y+1	; 0x01
     dce:	fa 81       	ldd	r31, Y+2	; 0x02
     dd0:	80 81       	ld	r24, Z
     dd2:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
		a_Str++;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void sendString(uint8 *a_Str)
{
	while(*a_Str != '\0')
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	80 81       	ld	r24, Z
     de6:	88 23       	and	r24, r24
     de8:	89 f7       	brne	.-30     	; 0xdcc <sendString+0x10>
	{
		UART_sendByte(*a_Str);
		a_Str++;
	}
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <UART_receiveString>:

void UART_receiveString(uint8* a_Str)
{
     df4:	0f 93       	push	r16
     df6:	1f 93       	push	r17
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <UART_receiveString+0xa>
     dfe:	0f 92       	push	r0
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	9b 83       	std	Y+3, r25	; 0x03
     e06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     e08:	19 82       	std	Y+1, r1	; 0x01
	a_Str[i] = UART_receiveByte();
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	8c 01       	movw	r16, r24
     e16:	02 0f       	add	r16, r18
     e18:	13 1f       	adc	r17, r19
     e1a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
     e1e:	f8 01       	movw	r30, r16
     e20:	80 83       	st	Z, r24
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <UART_receiveString+0x4e>
	 * '$' here is Used by the programmer/user to refer to the end of the
	 * string received, because we can't send '\0'.
	 */
	while(a_Str[i] != '$')
	{
		i++;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	89 83       	std	Y+1, r24	; 0x01
		a_Str[i] = UART_receiveByte();
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	8c 01       	movw	r16, r24
     e36:	02 0f       	add	r16, r18
     e38:	13 1f       	adc	r17, r19
     e3a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
     e3e:	f8 01       	movw	r30, r16
     e40:	80 83       	st	Z, r24
	/*
	 * Receive the whole string until the MASTER is send '$'
	 * '$' here is Used by the programmer/user to refer to the end of the
	 * string received, because we can't send '\0'.
	 */
	while(a_Str[i] != '$')
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	9b 81       	ldd	r25, Y+3	; 0x03
     e4c:	fc 01       	movw	r30, r24
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	80 81       	ld	r24, Z
     e54:	84 32       	cpi	r24, 0x24	; 36
     e56:	31 f7       	brne	.-52     	; 0xe24 <UART_receiveString+0x30>
	{
		i++;
		a_Str[i] = UART_receiveByte();
	}
	/* After receiving the whole string plus the '$', replace the '$' with '\0' */
	a_Str[i] = '\0';
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	9b 81       	ldd	r25, Y+3	; 0x03
     e62:	fc 01       	movw	r30, r24
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	10 82       	st	Z, r1

}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <UART_sendPassword>:

void UART_sendPassword(uint8 *password)
{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	61 97       	sbiw	r28, 0x11	; 17
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	99 8b       	std	Y+17, r25	; 0x11
     e90:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<5; i++)
     e92:	1f 86       	std	Y+15, r1	; 0x0f
     e94:	80 c0       	rjmp	.+256    	; 0xf96 <UART_sendPassword+0x11c>
	{
		UART_sendByte(password[i]);
     e96:	8f 85       	ldd	r24, Y+15	; 0x0f
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	88 89       	ldd	r24, Y+16	; 0x10
     e9e:	99 89       	ldd	r25, Y+17	; 0x11
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	80 81       	ld	r24, Z
     ea8:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	a8 e4       	ldi	r26, 0x48	; 72
     eb2:	b2 e4       	ldi	r27, 0x42	; 66
     eb4:	8b 87       	std	Y+11, r24	; 0x0b
     eb6:	9c 87       	std	Y+12, r25	; 0x0c
     eb8:	ad 87       	std	Y+13, r26	; 0x0d
     eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
     ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	4a e7       	ldi	r20, 0x7A	; 122
     eca:	53 e4       	ldi	r21, 0x43	; 67
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	8f 83       	std	Y+7, r24	; 0x07
     ed6:	98 87       	std	Y+8, r25	; 0x08
     ed8:	a9 87       	std	Y+9, r26	; 0x09
     eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     edc:	6f 81       	ldd	r22, Y+7	; 0x07
     ede:	78 85       	ldd	r23, Y+8	; 0x08
     ee0:	89 85       	ldd	r24, Y+9	; 0x09
     ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e8       	ldi	r20, 0x80	; 128
     eea:	5f e3       	ldi	r21, 0x3F	; 63
     eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	2c f4       	brge	.+10     	; 0xefe <UART_sendPassword+0x84>
		__ticks = 1;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	3f c0       	rjmp	.+126    	; 0xf7c <UART_sendPassword+0x102>
	else if (__tmp > 65535)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	3f ef       	ldi	r19, 0xFF	; 255
     f0a:	4f e7       	ldi	r20, 0x7F	; 127
     f0c:	57 e4       	ldi	r21, 0x47	; 71
     f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f12:	18 16       	cp	r1, r24
     f14:	4c f5       	brge	.+82     	; 0xf68 <UART_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f16:	6b 85       	ldd	r22, Y+11	; 0x0b
     f18:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	0f c0       	rjmp	.+30     	; 0xf5e <UART_sendPassword+0xe4>
     f40:	89 e1       	ldi	r24, 0x19	; 25
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 83       	std	Y+4, r25	; 0x04
     f46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <UART_sendPassword+0xd2>
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	9e 83       	std	Y+6, r25	; 0x06
     f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	69 f7       	brne	.-38     	; 0xf40 <UART_sendPassword+0xc6>
     f66:	14 c0       	rjmp	.+40     	; 0xf90 <UART_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	9a 83       	std	Y+2, r25	; 0x02
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <UART_sendPassword+0x10e>
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendPassword(uint8 *password)
{
	uint8 i;
	for(i=0; i<5; i++)
     f90:	8f 85       	ldd	r24, Y+15	; 0x0f
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	8f 87       	std	Y+15, r24	; 0x0f
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	85 30       	cpi	r24, 0x05	; 5
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <UART_sendPassword+0x124>
     f9c:	7c cf       	rjmp	.-264    	; 0xe96 <UART_sendPassword+0x1c>
	{
		UART_sendByte(password[i]);
		_delay_ms(50);
	}
}
     f9e:	61 96       	adiw	r28, 0x11	; 17
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <UART_receivePassword>:

void UART_receivePassword(uint8 *password)
{
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	00 d0       	rcall	.+0      	; 0xfba <UART_receivePassword+0xa>
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9b 83       	std	Y+3, r25	; 0x03
     fc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0; i<(sizeof(password)/sizeof(uint8)); i++)
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	0f c0       	rjmp	.+30     	; 0xfe6 <UART_receivePassword+0x36>
	{
		password[i] = UART_receiveByte();
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	8c 01       	movw	r16, r24
     fd4:	02 0f       	add	r16, r18
     fd6:	13 1f       	adc	r17, r19
     fd8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
     fdc:	f8 01       	movw	r30, r16
     fde:	80 83       	st	Z, r24
}

void UART_receivePassword(uint8 *password)
{
	uint8 i;
	for(i=0; i<(sizeof(password)/sizeof(uint8)); i++)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	70 f3       	brcs	.-36     	; 0xfc8 <UART_receivePassword+0x18>
	{
		password[i] = UART_receiveByte();
	}
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <TIMER_stop>:
 * 						Timer Functions' Definition
 *******************************************************************************/

/*---------------------------------------------------------------------------------------------------*/
void TIMER_stop()
{
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
		/* Group of instructions to stop timer1, not included in a function to save the time of context switch */
		TCCR1A = 0;
    1004:	ef e4       	ldi	r30, 0x4F	; 79
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	10 82       	st	Z, r1
		TCCR1B = 0;
    100a:	ee e4       	ldi	r30, 0x4E	; 78
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	10 82       	st	Z, r1
		TCNT1 = 0;
    1010:	ec e4       	ldi	r30, 0x4C	; 76
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	11 82       	std	Z+1, r1	; 0x01
    1016:	10 82       	st	Z, r1
		ICR1 = 0;
    1018:	e6 e4       	ldi	r30, 0x46	; 70
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	11 82       	std	Z+1, r1	; 0x01
    101e:	10 82       	st	Z, r1
#if(TIMER_INTERRUPT == ENABLE)
		TIMSK &= (~(1<<TICIE1)) & (~(1<<OCIE1A)) & (~(1<<OCIE1B)) & (~(1<<TOIE1));
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	83 7c       	andi	r24, 0xC3	; 195
    102c:	8c 93       	st	X, r24
#endif
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <TIMER1_init>:
 * 						 Timer Static Functions' Definition
 *******************************************************************************/
/*------------------------------------------ TIMER1_init ------------------------------------------------------*/

void TIMER1_init(TIMER_configType* a_TimerConfig2_Ptr)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	00 d0       	rcall	.+0      	; 0x103a <TIMER1_init+0x6>
    103a:	00 d0       	rcall	.+0      	; 0x103c <TIMER1_init+0x8>
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
	/* Initial Value for Timer1 */
	TCNT1 = a_TimerConfig2_Ptr->TimerInitValue;
    1044:	ac e4       	ldi	r26, 0x4C	; 76
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e9 81       	ldd	r30, Y+1	; 0x01
    104a:	fa 81       	ldd	r31, Y+2	; 0x02
    104c:	86 81       	ldd	r24, Z+6	; 0x06
    104e:	97 81       	ldd	r25, Z+7	; 0x07
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	9c 93       	st	X, r25
    1054:	8e 93       	st	-X, r24
	switch(a_TimerConfig2_Ptr->mode)
    1056:	e9 81       	ldd	r30, Y+1	; 0x01
    1058:	fa 81       	ldd	r31, Y+2	; 0x02
    105a:	80 81       	ld	r24, Z
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3c 83       	std	Y+4, r19	; 0x04
    1062:	2b 83       	std	Y+3, r18	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	91 05       	cpc	r25, r1
    106c:	19 f1       	breq	.+70     	; 0x10b4 <TIMER1_init+0x80>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	23 30       	cpi	r18, 0x03	; 3
    1074:	31 05       	cpc	r19, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <TIMER1_init+0x46>
    1078:	4d c0       	rjmp	.+154    	; 0x1114 <TIMER1_init+0xe0>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	09 f0       	breq	.+2      	; 0x1084 <TIMER1_init+0x50>
    1082:	74 c0       	rjmp	.+232    	; 0x116c <TIMER1_init+0x138>
	{
/*================================================= Normal Mode ===================================================*/
	case NORMAL:
		/* Disable/Enable the TIMER0 OVF interrpt */
#if(TIMER_INTERRUPT == ENABLE)
		SET_BIT(TIMSK,TOIE1);
    1084:	a9 e5       	ldi	r26, 0x59	; 89
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e9 e5       	ldi	r30, 0x59	; 89
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	84 60       	ori	r24, 0x04	; 4
    1090:	8c 93       	st	X, r24
#endif
		/* DISABLE PWM for Normal mode */
		TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    1092:	ef e4       	ldi	r30, 0x4F	; 79
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8c e0       	ldi	r24, 0x0C	; 12
    1098:	80 83       	st	Z, r24
		/* Select the prescaler for Normal mode */
		TCCR1B = (TCCR1B & 0xF8)|(a_TimerConfig2_Ptr->prescaler);
    109a:	ae e4       	ldi	r26, 0x4E	; 78
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ee e4       	ldi	r30, 0x4E	; 78
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	98 2f       	mov	r25, r24
    10a6:	98 7f       	andi	r25, 0xF8	; 248
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	fa 81       	ldd	r31, Y+2	; 0x02
    10ac:	85 81       	ldd	r24, Z+5	; 0x05
    10ae:	89 2b       	or	r24, r25
    10b0:	8c 93       	st	X, r24
    10b2:	5c c0       	rjmp	.+184    	; 0x116c <TIMER1_init+0x138>
		 */
		TCCR1B = (1<<WGM12)| (1<<WGM13)| ((TCCR1B & 0xF8) | (a_TimerConfig2_Ptr->prescaler));

#elif(TIMER1_CTC_MODE_NUMBER == CTC_MODE_NUMBER_4)
		/* Initialize OCR1A = TOP ,for CTC Mode number (4)*/
		OCR1A = a_TimerConfig2_Ptr->TimerCompValue;
    10b4:	aa e4       	ldi	r26, 0x4A	; 74
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	83 81       	ldd	r24, Z+3	; 0x03
    10be:	94 81       	ldd	r25, Z+4	; 0x04
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
#if(TIMER_INTERRUPT == ENABLE)
		/* Enable output compare interrupt */
		SET_BIT(TIMSK,OCIE1A);
    10c6:	a9 e5       	ldi	r26, 0x59	; 89
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e9 e5       	ldi	r30, 0x59	; 89
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 61       	ori	r24, 0x10	; 16
    10d2:	8c 93       	st	X, r24
#endif
		/*
		 * Disable PWM for channel A,also set the COM1A1:0 bit functionality when the
		 * WGM13:0 bits are set to a normal or a CTC mode (non-PWM).
		 */
		TCCR1A = (1<<FOC1A)|(1<<FOC1B)|(a_TimerConfig2_Ptr->CTC_waveForm<<6);
    10d4:	af e4       	ldi	r26, 0x4F	; 79
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e9 81       	ldd	r30, Y+1	; 0x01
    10da:	fa 81       	ldd	r31, Y+2	; 0x02
    10dc:	81 81       	ldd	r24, Z+1	; 0x01
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	00 24       	eor	r0, r0
    10e4:	96 95       	lsr	r25
    10e6:	87 95       	ror	r24
    10e8:	07 94       	ror	r0
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	07 94       	ror	r0
    10f0:	98 2f       	mov	r25, r24
    10f2:	80 2d       	mov	r24, r0
    10f4:	8c 60       	ori	r24, 0x0C	; 12
    10f6:	8c 93       	st	X, r24
		/*
		 * Select CTC mode 12 in TIMER1 by setting WGM13:10 = 12
		 * select the prescaler CS12:10 = value
		 */
		TCCR1B = (1<<WGM12) | ((TCCR1B & 0xF8) | (a_TimerConfig2_Ptr->prescaler));
    10f8:	ae e4       	ldi	r26, 0x4E	; 78
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ee e4       	ldi	r30, 0x4E	; 78
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	98 2f       	mov	r25, r24
    1104:	98 7f       	andi	r25, 0xF8	; 248
    1106:	e9 81       	ldd	r30, Y+1	; 0x01
    1108:	fa 81       	ldd	r31, Y+2	; 0x02
    110a:	85 81       	ldd	r24, Z+5	; 0x05
    110c:	89 2b       	or	r24, r25
    110e:	88 60       	ori	r24, 0x08	; 8
    1110:	8c 93       	st	X, r24
    1112:	2c c0       	rjmp	.+88     	; 0x116c <TIMER1_init+0x138>
/*=============================================== Fast_PWM Mode =================================================*/
	case FAST_PWM:

#if (TIMER1_FAST_PWM_MODE_NUMBER == FAST_PWM_MODE_NUMBER_15)
		/* set the TOP value in OCR1A for Fast_PWM mode number (15) */
		OCR1A = a_TimerConfig2_Ptr->TimerCompValue;
    1114:	aa e4       	ldi	r26, 0x4A	; 74
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	83 81       	ldd	r24, Z+3	; 0x03
    111e:	94 81       	ldd	r25, Z+4	; 0x04
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	9c 93       	st	X, r25
    1124:	8e 93       	st	-X, r24
#if(TIMER_INTERRUPT == ENABLE)
		/* Enable Output Compare interrupt for channel A and ICU interrupt*/
		SET_BIT(TIMSK,OCIE1A);
    1126:	a9 e5       	ldi	r26, 0x59	; 89
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e9 e5       	ldi	r30, 0x59	; 89
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	80 61       	ori	r24, 0x10	; 16
    1132:	8c 93       	st	X, r24
		/*
		 * set the PWM_wave form in COM1A10:11 , COM1B10:11 in TCCR1A.
		 * set WGM10=1, WGM11=1 in TCCR1A for mode number (15).
		 * FOC1A = 0 ,FOC1B = 0
		 */
		TCCR1A = (1<<WGM10)|(1<<WGM11)|((TCCR1A & 0x0F)|(a_TimerConfig2_Ptr->PWM_waveForm<<4));
    1134:	af e4       	ldi	r26, 0x4F	; 79
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ef e4       	ldi	r30, 0x4F	; 79
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	28 2f       	mov	r18, r24
    1140:	2f 70       	andi	r18, 0x0F	; 15
    1142:	e9 81       	ldd	r30, Y+1	; 0x01
    1144:	fa 81       	ldd	r31, Y+2	; 0x02
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	82 95       	swap	r24
    114e:	92 95       	swap	r25
    1150:	90 7f       	andi	r25, 0xF0	; 240
    1152:	98 27       	eor	r25, r24
    1154:	80 7f       	andi	r24, 0xF0	; 240
    1156:	98 27       	eor	r25, r24
    1158:	82 2b       	or	r24, r18
    115a:	83 60       	ori	r24, 0x03	; 3
    115c:	8c 93       	st	X, r24
		/*
		 * set the prescaler value in CS10:12 in TCCR1B.
		 * set WGM12=1 , WGM13=1 in TCCR1B for Fast_PWM mode number (15).
		 * set ICES1=0,ICNC1=0
		 */
		TCCR1B = (a_TimerConfig2_Ptr->prescaler)|(1<<WGM00)|(1<<WGM01);
    115e:	ae e4       	ldi	r26, 0x4E	; 78
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e9 81       	ldd	r30, Y+1	; 0x01
    1164:	fa 81       	ldd	r31, Y+2	; 0x02
    1166:	85 81       	ldd	r24, Z+5	; 0x05
    1168:	88 64       	ori	r24, 0x48	; 72
    116a:	8c 93       	st	X, r24
		 */
		TCCR1B = (a_TimerConfig2_Ptr->prescaler)|(1<<WGM12)|(1<<WGM13);
#endif
		break;
	}
}
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <TIMER1_setCallBack>:
/*******************************************************************************
 * 						Timer Call Back Functions
 *******************************************************************************/
/*--------------------------------------------------------------------*/
void TIMER1_setCallBack(void (*a_Fun_Ptr)(void))
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <TIMER1_setCallBack+0x6>
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	9a 83       	std	Y+2, r25	; 0x02
    1186:	89 83       	std	Y+1, r24	; 0x01
		g_Timer1_callBack_Ptr = a_Fun_Ptr;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	90 93 2d 01 	sts	0x012D, r25
    1190:	80 93 2c 01 	sts	0x012C, r24
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <__vector_8>:
/*******************************************************************************
 * 						TIMERS'	Interrupt Service Routine
 *******************************************************************************/
/*-------------------------- TIMER1 ISR -------------------------*/
ISR(TIMER1_OVF_vect)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    11c8:	80 91 2c 01 	lds	r24, 0x012C
    11cc:	90 91 2d 01 	lds	r25, 0x012D
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	29 f0       	breq	.+10     	; 0x11de <__vector_8+0x40>
		(*g_Timer1_callBack_Ptr)();
    11d4:	e0 91 2c 01 	lds	r30, 0x012C
    11d8:	f0 91 2d 01 	lds	r31, 0x012D
    11dc:	09 95       	icall
}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	ff 91       	pop	r31
    11e4:	ef 91       	pop	r30
    11e6:	bf 91       	pop	r27
    11e8:	af 91       	pop	r26
    11ea:	9f 91       	pop	r25
    11ec:	8f 91       	pop	r24
    11ee:	7f 91       	pop	r23
    11f0:	6f 91       	pop	r22
    11f2:	5f 91       	pop	r21
    11f4:	4f 91       	pop	r20
    11f6:	3f 91       	pop	r19
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    122e:	80 91 2c 01 	lds	r24, 0x012C
    1232:	90 91 2d 01 	lds	r25, 0x012D
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	29 f0       	breq	.+10     	; 0x1244 <__vector_6+0x40>
		(*g_Timer1_callBack_Ptr)();
    123a:	e0 91 2c 01 	lds	r30, 0x012C
    123e:	f0 91 2d 01 	lds	r31, 0x012D
    1242:	09 95       	icall
}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    126a:	1f 92       	push	r1
    126c:	0f 92       	push	r0
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	0f 92       	push	r0
    1272:	11 24       	eor	r1, r1
    1274:	2f 93       	push	r18
    1276:	3f 93       	push	r19
    1278:	4f 93       	push	r20
    127a:	5f 93       	push	r21
    127c:	6f 93       	push	r22
    127e:	7f 93       	push	r23
    1280:	8f 93       	push	r24
    1282:	9f 93       	push	r25
    1284:	af 93       	push	r26
    1286:	bf 93       	push	r27
    1288:	ef 93       	push	r30
    128a:	ff 93       	push	r31
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    1294:	80 91 2c 01 	lds	r24, 0x012C
    1298:	90 91 2d 01 	lds	r25, 0x012D
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	29 f0       	breq	.+10     	; 0x12aa <__vector_7+0x40>
		(*g_Timer1_callBack_Ptr)();
    12a0:	e0 91 2c 01 	lds	r30, 0x012C
    12a4:	f0 91 2d 01 	lds	r31, 0x012D
    12a8:	09 95       	icall
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_5>:

ISR(TIMER1_CAPT_vect)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBack_Ptr != NULL_PTR)
    12fa:	80 91 2c 01 	lds	r24, 0x012C
    12fe:	90 91 2d 01 	lds	r25, 0x012D
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	29 f0       	breq	.+10     	; 0x1310 <__vector_5+0x40>
		(*g_Timer1_callBack_Ptr)();
    1306:	e0 91 2c 01 	lds	r30, 0x012C
    130a:	f0 91 2d 01 	lds	r31, 0x012D
    130e:	09 95       	icall
}
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 ----------------------------------------------------------------------------------------------*/
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num, GPIO_PinDirectionType direction)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_setupPinDirection+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_setupPinDirection+0x8>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
    1348:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	08 f0       	brcs	.+2      	; 0x1352 <GPIO_setupPinDirection+0x1c>
    1350:	d5 c0       	rjmp	.+426    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	08 f0       	brcs	.+2      	; 0x135a <GPIO_setupPinDirection+0x24>
    1358:	d1 c0       	rjmp	.+418    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <GPIO_setupPinDirection+0x3a>
    136e:	43 c0       	rjmp	.+134    	; 0x13f6 <GPIO_setupPinDirection+0xc0>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <GPIO_setupPinDirection+0x4e>
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	71 f0       	breq	.+28     	; 0x139e <GPIO_setupPinDirection+0x68>
    1382:	bc c0       	rjmp	.+376    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <GPIO_setupPinDirection+0x5a>
    138e:	5f c0       	rjmp	.+190    	; 0x144e <GPIO_setupPinDirection+0x118>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <GPIO_setupPinDirection+0x66>
    139a:	85 c0       	rjmp	.+266    	; 0x14a6 <GPIO_setupPinDirection+0x170>
    139c:	af c0       	rjmp	.+350    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	a1 f4       	brne	.+40     	; 0x13cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13a4:	aa e3       	ldi	r26, 0x3A	; 58
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ea e3       	ldi	r30, 0x3A	; 58
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_setupPinDirection+0x8c>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <GPIO_setupPinDirection+0x88>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	98 c0       	rjmp	.+304    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13cc:	aa e3       	ldi	r26, 0x3A	; 58
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ea e3       	ldi	r30, 0x3A	; 58
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <GPIO_setupPinDirection+0xb4>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <GPIO_setupPinDirection+0xb0>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	83 c0       	rjmp	.+262    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	a1 f4       	brne	.+40     	; 0x1424 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13fc:	a7 e3       	ldi	r26, 0x37	; 55
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e7 e3       	ldi	r30, 0x37	; 55
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_setupPinDirection+0xe4>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_setupPinDirection+0xe0>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	6c c0       	rjmp	.+216    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1424:	a7 e3       	ldi	r26, 0x37	; 55
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e7 e3       	ldi	r30, 0x37	; 55
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_setupPinDirection+0x10c>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_setupPinDirection+0x108>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	57 c0       	rjmp	.+174    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	a1 f4       	brne	.+40     	; 0x147c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1454:	a4 e3       	ldi	r26, 0x34	; 52
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e4 e3       	ldi	r30, 0x34	; 52
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0x13c>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0x138>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	40 c0       	rjmp	.+128    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    147c:	a4 e3       	ldi	r26, 0x34	; 52
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e4 e3       	ldi	r30, 0x34	; 52
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_setupPinDirection+0x164>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_setupPinDirection+0x160>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	2b c0       	rjmp	.+86     	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	a1 f4       	brne	.+40     	; 0x14d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14ac:	a1 e3       	ldi	r26, 0x31	; 49
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e1 e3       	ldi	r30, 0x31	; 49
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0x194>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0x190>
    14ce:	84 2b       	or	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14d4:	a1 e3       	ldi	r26, 0x31	; 49
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e1 e3       	ldi	r30, 0x31	; 49
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_setupPinDirection+0x1bc>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_setupPinDirection+0x1b8>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 ----------------------------------------------------------------------------------------------*/
void GPIO_writePin(uint8 port_num,uint8 pin_num, uint8 value)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_writePin+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <GPIO_writePin+0x8>
    1514:	0f 92       	push	r0
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6a 83       	std	Y+2, r22	; 0x02
    151e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num  >= NUM_OF_PORTS))
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	08 f0       	brcs	.+2      	; 0x1528 <GPIO_writePin+0x1c>
    1526:	d5 c0       	rjmp	.+426    	; 0x16d2 <GPIO_writePin+0x1c6>
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	08 f0       	brcs	.+2      	; 0x1530 <GPIO_writePin+0x24>
    152e:	d1 c0       	rjmp	.+418    	; 0x16d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3d 83       	std	Y+5, r19	; 0x05
    1538:	2c 83       	std	Y+4, r18	; 0x04
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <GPIO_writePin+0x3a>
    1544:	43 c0       	rjmp	.+134    	; 0x15cc <GPIO_writePin+0xc0>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <GPIO_writePin+0x4e>
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	71 f0       	breq	.+28     	; 0x1574 <GPIO_writePin+0x68>
    1558:	bc c0       	rjmp	.+376    	; 0x16d2 <GPIO_writePin+0x1c6>
    155a:	2c 81       	ldd	r18, Y+4	; 0x04
    155c:	3d 81       	ldd	r19, Y+5	; 0x05
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_writePin+0x5a>
    1564:	5f c0       	rjmp	.+190    	; 0x1624 <GPIO_writePin+0x118>
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <GPIO_writePin+0x66>
    1570:	85 c0       	rjmp	.+266    	; 0x167c <GPIO_writePin+0x170>
    1572:	af c0       	rjmp	.+350    	; 0x16d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	a1 f4       	brne	.+40     	; 0x15a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    157a:	ab e3       	ldi	r26, 0x3B	; 59
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e3       	ldi	r30, 0x3B	; 59
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_writePin+0x8c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_writePin+0x88>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	98 c0       	rjmp	.+304    	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_writePin+0xb4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_writePin+0xb0>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	83 c0       	rjmp	.+262    	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	a1 f4       	brne	.+40     	; 0x15fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_writePin+0xe4>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_writePin+0xe0>
    15f4:	84 2b       	or	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	6c c0       	rjmp	.+216    	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15fa:	a8 e3       	ldi	r26, 0x38	; 56
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <GPIO_writePin+0x10c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <GPIO_writePin+0x108>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	57 c0       	rjmp	.+174    	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	a1 f4       	brne	.+40     	; 0x1652 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    162a:	a5 e3       	ldi	r26, 0x35	; 53
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0x13c>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0x138>
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	40 c0       	rjmp	.+128    	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1652:	a5 e3       	ldi	r26, 0x35	; 53
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_writePin+0x164>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_writePin+0x160>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	2b c0       	rjmp	.+86     	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1682:	a2 e3       	ldi	r26, 0x32	; 50
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e2 e3       	ldi	r30, 0x32	; 50
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0x194>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0x190>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16aa:	a2 e3       	ldi	r26, 0x32	; 50
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_writePin+0x1bc>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_writePin+0x1b8>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 ----------------------------------------------------------------------------------------------*/
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_readPin+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_readPin+0x8>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	8a 83       	std	Y+2, r24	; 0x02
    16f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pin_value = LOGIC_LOW;
    16f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <GPIO_readPin+0x1c>
    16fc:	84 c0       	rjmp	.+264    	; 0x1806 <GPIO_readPin+0x124>
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	84 30       	cpi	r24, 0x04	; 4
    1702:	08 f0       	brcs	.+2      	; 0x1706 <GPIO_readPin+0x24>
    1704:	80 c0       	rjmp	.+256    	; 0x1806 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3d 83       	std	Y+5, r19	; 0x05
    170e:	2c 83       	std	Y+4, r18	; 0x04
    1710:	4c 81       	ldd	r20, Y+4	; 0x04
    1712:	5d 81       	ldd	r21, Y+5	; 0x05
    1714:	41 30       	cpi	r20, 0x01	; 1
    1716:	51 05       	cpc	r21, r1
    1718:	79 f1       	breq	.+94     	; 0x1778 <GPIO_readPin+0x96>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	91 05       	cpc	r25, r1
    1722:	34 f4       	brge	.+12     	; 0x1730 <GPIO_readPin+0x4e>
    1724:	2c 81       	ldd	r18, Y+4	; 0x04
    1726:	3d 81       	ldd	r19, Y+5	; 0x05
    1728:	21 15       	cp	r18, r1
    172a:	31 05       	cpc	r19, r1
    172c:	69 f0       	breq	.+26     	; 0x1748 <GPIO_readPin+0x66>
    172e:	6b c0       	rjmp	.+214    	; 0x1806 <GPIO_readPin+0x124>
    1730:	4c 81       	ldd	r20, Y+4	; 0x04
    1732:	5d 81       	ldd	r21, Y+5	; 0x05
    1734:	42 30       	cpi	r20, 0x02	; 2
    1736:	51 05       	cpc	r21, r1
    1738:	b9 f1       	breq	.+110    	; 0x17a8 <GPIO_readPin+0xc6>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <GPIO_readPin+0x64>
    1744:	49 c0       	rjmp	.+146    	; 0x17d8 <GPIO_readPin+0xf6>
    1746:	5f c0       	rjmp	.+190    	; 0x1806 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1748:	e9 e3       	ldi	r30, 0x39	; 57
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	a9 01       	movw	r20, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_readPin+0x7e>
    175c:	55 95       	asr	r21
    175e:	47 95       	ror	r20
    1760:	8a 95       	dec	r24
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_readPin+0x7a>
    1764:	ca 01       	movw	r24, r20
    1766:	81 70       	andi	r24, 0x01	; 1
    1768:	90 70       	andi	r25, 0x00	; 0
    176a:	88 23       	and	r24, r24
    176c:	19 f0       	breq	.+6      	; 0x1774 <GPIO_readPin+0x92>
			{
				a_pin_value = LOGIC_HIGH;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	49 c0       	rjmp	.+146    	; 0x1806 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	47 c0       	rjmp	.+142    	; 0x1806 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1778:	e6 e3       	ldi	r30, 0x36	; 54
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_readPin+0xae>
    178c:	55 95       	asr	r21
    178e:	47 95       	ror	r20
    1790:	8a 95       	dec	r24
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_readPin+0xaa>
    1794:	ca 01       	movw	r24, r20
    1796:	81 70       	andi	r24, 0x01	; 1
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	88 23       	and	r24, r24
    179c:	19 f0       	breq	.+6      	; 0x17a4 <GPIO_readPin+0xc2>
			{
				a_pin_value = LOGIC_HIGH;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	31 c0       	rjmp	.+98     	; 0x1806 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	2f c0       	rjmp	.+94     	; 0x1806 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17a8:	e3 e3       	ldi	r30, 0x33	; 51
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_readPin+0xde>
    17bc:	55 95       	asr	r21
    17be:	47 95       	ror	r20
    17c0:	8a 95       	dec	r24
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_readPin+0xda>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	88 23       	and	r24, r24
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <GPIO_readPin+0xf2>
			{
				a_pin_value = LOGIC_HIGH;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	19 c0       	rjmp	.+50     	; 0x1806 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    17d4:	19 82       	std	Y+1, r1	; 0x01
    17d6:	17 c0       	rjmp	.+46     	; 0x1806 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17d8:	e0 e3       	ldi	r30, 0x30	; 48
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_readPin+0x10e>
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	8a 95       	dec	r24
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_readPin+0x10a>
    17f4:	ca 01       	movw	r24, r20
    17f6:	81 70       	andi	r24, 0x01	; 1
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	88 23       	and	r24, r24
    17fc:	19 f0       	breq	.+6      	; 0x1804 <GPIO_readPin+0x122>
			{
				a_pin_value = LOGIC_HIGH;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	01 c0       	rjmp	.+2      	; 0x1806 <GPIO_readPin+0x124>
			}
			else
			{
				a_pin_value = LOGIC_LOW;
    1804:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return a_pin_value;
    1806:	89 81       	ldd	r24, Y+1	; 0x01
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
------------------------------------------------------------------------------------------------ */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <GPIO_setupPortDirection+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <GPIO_setupPortDirection+0x8>
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	84 30       	cpi	r24, 0x04	; 4
    182c:	90 f5       	brcc	.+100    	; 0x1892 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	3c 83       	std	Y+4, r19	; 0x04
    1836:	2b 83       	std	Y+3, r18	; 0x03
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	d1 f0       	breq	.+52     	; 0x1876 <GPIO_setupPortDirection+0x5e>
    1842:	2b 81       	ldd	r18, Y+3	; 0x03
    1844:	3c 81       	ldd	r19, Y+4	; 0x04
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	2c f4       	brge	.+10     	; 0x1856 <GPIO_setupPortDirection+0x3e>
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	61 f0       	breq	.+24     	; 0x186c <GPIO_setupPortDirection+0x54>
    1854:	1e c0       	rjmp	.+60     	; 0x1892 <GPIO_setupPortDirection+0x7a>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	81 f0       	breq	.+32     	; 0x1880 <GPIO_setupPortDirection+0x68>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	81 f0       	breq	.+32     	; 0x188a <GPIO_setupPortDirection+0x72>
    186a:	13 c0       	rjmp	.+38     	; 0x1892 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    186c:	ea e3       	ldi	r30, 0x3A	; 58
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	80 83       	st	Z, r24
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1876:	e7 e3       	ldi	r30, 0x37	; 55
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	80 83       	st	Z, r24
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1880:	e4 e3       	ldi	r30, 0x34	; 52
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 83       	st	Z, r24
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    188a:	e1 e3       	ldi	r30, 0x31	; 49
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 83       	st	Z, r24
			break;
		}
	}
}
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 --------------------------------------------------------------------------------------------------------------*/
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_writePort+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <GPIO_writePort+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	90 f5       	brcc	.+100    	; 0x191a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3c 83       	std	Y+4, r19	; 0x04
    18be:	2b 83       	std	Y+3, r18	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	d1 f0       	breq	.+52     	; 0x18fe <GPIO_writePort+0x5e>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	2c f4       	brge	.+10     	; 0x18de <GPIO_writePort+0x3e>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 f0       	breq	.+24     	; 0x18f4 <GPIO_writePort+0x54>
    18dc:	1e c0       	rjmp	.+60     	; 0x191a <GPIO_writePort+0x7a>
    18de:	2b 81       	ldd	r18, Y+3	; 0x03
    18e0:	3c 81       	ldd	r19, Y+4	; 0x04
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <GPIO_writePort+0x68>
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	91 05       	cpc	r25, r1
    18f0:	81 f0       	breq	.+32     	; 0x1912 <GPIO_writePort+0x72>
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18f4:	eb e3       	ldi	r30, 0x3B	; 59
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
    1906:	09 c0       	rjmp	.+18     	; 0x191a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1908:	e5 e3       	ldi	r30, 0x35	; 53
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	80 83       	st	Z, r24
    1910:	04 c0       	rjmp	.+8      	; 0x191a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1912:	e2 e3       	ldi	r30, 0x32	; 50
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	80 83       	st	Z, r24
			break;
		}
	}
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 --------------------------------------------------------------------------------------*/
uint8 GPIO_readPort(uint8 port_num)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <GPIO_readPort+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <GPIO_readPort+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_value = LOGIC_LOW;
    1936:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	90 f5       	brcc	.+100    	; 0x19a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port a_value as required */
		switch(port_num)
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3c 83       	std	Y+4, r19	; 0x04
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	d1 f0       	breq	.+52     	; 0x1986 <GPIO_readPort+0x5e>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	2c f4       	brge	.+10     	; 0x1966 <GPIO_readPort+0x3e>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f0       	breq	.+24     	; 0x197c <GPIO_readPort+0x54>
    1964:	1e c0       	rjmp	.+60     	; 0x19a2 <GPIO_readPort+0x7a>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <GPIO_readPort+0x68>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <GPIO_readPort+0x72>
    197a:	13 c0       	rjmp	.+38     	; 0x19a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_value = PINA;
    197c:	e9 e3       	ldi	r30, 0x39	; 57
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	0e c0       	rjmp	.+28     	; 0x19a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_value = PINB;
    1986:	e6 e3       	ldi	r30, 0x36	; 54
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_value = PINC;
    1990:	e3 e3       	ldi	r30, 0x33	; 51
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_value = PIND;
    199a:	e0 e3       	ldi	r30, 0x30	; 48
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_value;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <HMI_init>:
 * 								Functions' Definitions
 *************************************************************************************************/

/*==================================== HMI_init ===============================================*/
void HMI_init(void)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	2c 97       	sbiw	r28, 0x0c	; 12
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
	 * 1. initiate the timer configuration:timer1,compare-mode,prescaler_1024.
	 * 2. set the callback function = HMI_callBack.
	 * 3. initiate LCD.
	 * 4. set the uart configuration: 9600 baud-rate, one stop bit, 8bits-data,and no parity bit.
	 ********************************************************************************************/
	T1_ConfigObj.mode = CTC;
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	80 93 32 01 	sts	0x0132, r24
	T1_ConfigObj.TimerInitValue = 0;
    19cc:	10 92 39 01 	sts	0x0139, r1
    19d0:	10 92 38 01 	sts	0x0138, r1
	T1_ConfigObj.TimerCompValue = 7811;
    19d4:	83 e8       	ldi	r24, 0x83	; 131
    19d6:	9e e1       	ldi	r25, 0x1E	; 30
    19d8:	90 93 36 01 	sts	0x0136, r25
    19dc:	80 93 35 01 	sts	0x0135, r24
	T1_ConfigObj.prescaler = PRESCALER_1024;
    19e0:	85 e0       	ldi	r24, 0x05	; 5
    19e2:	80 93 37 01 	sts	0x0137, r24
	TIMER1_init(&T1_ConfigObj);
    19e6:	82 e3       	ldi	r24, 0x32	; 50
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	0e 94 1a 08 	call	0x1034	; 0x1034 <TIMER1_init>
	TIMER1_setCallBack(HMI_callBack);
    19ee:	8c e0       	ldi	r24, 0x0C	; 12
    19f0:	92 e1       	ldi	r25, 0x12	; 18
    19f2:	0e 94 bd 08 	call	0x117a	; 0x117a <TIMER1_setCallBack>
	LCD_init();
    19f6:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_init>
	UART_ConfigType uart_configObj = {9600,EIGHT_BITS,DISABLE_PARITY,ONE_STOP_BIT};
    19fa:	ce 01       	movw	r24, r28
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	99 87       	std	Y+9, r25	; 0x09
    1a00:	88 87       	std	Y+8, r24	; 0x08
    1a02:	e5 e2       	ldi	r30, 0x25	; 37
    1a04:	f1 e0       	ldi	r31, 0x01	; 1
    1a06:	fb 87       	std	Y+11, r31	; 0x0b
    1a08:	ea 87       	std	Y+10, r30	; 0x0a
    1a0a:	f7 e0       	ldi	r31, 0x07	; 7
    1a0c:	fc 87       	std	Y+12, r31	; 0x0c
    1a0e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a10:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a12:	00 80       	ld	r0, Z
    1a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	9b 87       	std	Y+11, r25	; 0x0b
    1a1c:	8a 87       	std	Y+10, r24	; 0x0a
    1a1e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a20:	f9 85       	ldd	r31, Y+9	; 0x09
    1a22:	00 82       	st	Z, r0
    1a24:	88 85       	ldd	r24, Y+8	; 0x08
    1a26:	99 85       	ldd	r25, Y+9	; 0x09
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	99 87       	std	Y+9, r25	; 0x09
    1a2c:	88 87       	std	Y+8, r24	; 0x08
    1a2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a30:	91 50       	subi	r25, 0x01	; 1
    1a32:	9c 87       	std	Y+12, r25	; 0x0c
    1a34:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a36:	ee 23       	and	r30, r30
    1a38:	51 f7       	brne	.-44     	; 0x1a0e <HMI_init+0x5c>
	UART_init(&uart_configObj);
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <UART_init>
}
    1a42:	2c 96       	adiw	r28, 0x0c	; 12
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <HMI_enterPassword>:

/*==================================== get_password ============================================*/
void HMI_enterPassword(void)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	65 97       	sbiw	r28, 0x15	; 21
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
	uint8 a_pass_array[NUMBER_OF_DIGITS_IN_PASSWORD],key,i=0;
    1a68:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("Enter Your Pass");
    1a6a:	80 e6       	ldi	r24, 0x60	; 96
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
	LCD_moveCursor(1, 5);
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	65 e0       	ldi	r22, 0x05	; 5
    1a76:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LCD_moveCursor>
    1a7a:	8c c0       	rjmp	.+280    	; 0x1b94 <HMI_enterPassword+0x140>
	while(i<5)
		{
			key = KEYPAD_getPressedKey();
    1a7c:	0e 94 3e 1c 	call	0x387c	; 0x387c <KEYPAD_getPressedKey>
    1a80:	88 8b       	std	Y+16, r24	; 0x10
			if(key >= 0 && key <= 9)
    1a82:	88 89       	ldd	r24, Y+16	; 0x10
    1a84:	8a 30       	cpi	r24, 0x0A	; 10
    1a86:	70 f4       	brcc	.+28     	; 0x1aa4 <HMI_enterPassword+0x50>
			{
				a_pass_array[i] = key;
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	ce 01       	movw	r24, r28
    1a90:	41 96       	adiw	r24, 0x11	; 17
    1a92:	fc 01       	movw	r30, r24
    1a94:	e2 0f       	add	r30, r18
    1a96:	f3 1f       	adc	r31, r19
    1a98:	88 89       	ldd	r24, Y+16	; 0x10
    1a9a:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    1a9c:	8a e2       	ldi	r24, 0x2A	; 42
    1a9e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LCD_displayCharacter>
    1aa2:	03 c0       	rjmp	.+6      	; 0x1aaa <HMI_enterPassword+0x56>
			}
			else
			{
				--i;
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	81 50       	subi	r24, 0x01	; 1
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	aa ef       	ldi	r26, 0xFA	; 250
    1ab0:	b3 e4       	ldi	r27, 0x43	; 67
    1ab2:	8b 87       	std	Y+11, r24	; 0x0b
    1ab4:	9c 87       	std	Y+12, r25	; 0x0c
    1ab6:	ad 87       	std	Y+13, r26	; 0x0d
    1ab8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a ef       	ldi	r20, 0xFA	; 250
    1ac8:	54 e4       	ldi	r21, 0x44	; 68
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8f 83       	std	Y+7, r24	; 0x07
    1ad4:	98 87       	std	Y+8, r25	; 0x08
    1ad6:	a9 87       	std	Y+9, r26	; 0x09
    1ad8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <HMI_enterPassword+0xa8>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <HMI_enterPassword+0x126>
	else if (__tmp > 65535)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <HMI_enterPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <HMI_enterPassword+0x108>
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <HMI_enterPassword+0xf6>
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <HMI_enterPassword+0xea>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <HMI_enterPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <HMI_enterPassword+0x132>
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
			}

			_delay_ms(500);
			i++;
    1b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b90:	8f 5f       	subi	r24, 0xFF	; 255
    1b92:	8f 87       	std	Y+15, r24	; 0x0f
void HMI_enterPassword(void)
{
	uint8 a_pass_array[NUMBER_OF_DIGITS_IN_PASSWORD],key,i=0;
	LCD_displayString("Enter Your Pass");
	LCD_moveCursor(1, 5);
	while(i<5)
    1b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b96:	85 30       	cpi	r24, 0x05	; 5
    1b98:	08 f4       	brcc	.+2      	; 0x1b9c <HMI_enterPassword+0x148>
    1b9a:	70 cf       	rjmp	.-288    	; 0x1a7c <HMI_enterPassword+0x28>
			}

			_delay_ms(500);
			i++;
		}
	while(KEYPAD_getPressedKey() != ENTER);
    1b9c:	0e 94 3e 1c 	call	0x387c	; 0x387c <KEYPAD_getPressedKey>
    1ba0:	8d 30       	cpi	r24, 0x0D	; 13
    1ba2:	e1 f7       	brne	.-8      	; 0x1b9c <HMI_enterPassword+0x148>
	UART_sendByte(READY);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
	while(UART_receiveByte() != READY);
    1baa:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <HMI_enterPassword+0x156>
	HMI_sendPassword(a_pass_array);
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	41 96       	adiw	r24, 0x11	; 17
    1bb6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <HMI_sendPassword>
}
    1bba:	65 96       	adiw	r28, 0x15	; 21
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <HMI_enterConfirmPassword>:
/*==================================== get_confirmPassword =======================================*/
void HMI_enterConfirmPassword(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	65 97       	sbiw	r28, 0x15	; 21
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
	uint8 key,i=0, a_confim_array[NUMBER_OF_DIGITS_IN_PASSWORD];
    1be0:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_displayString("Reenter The Pass");
    1be2:	80 e7       	ldi	r24, 0x70	; 112
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
	LCD_moveCursor(1, 5);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	65 e0       	ldi	r22, 0x05	; 5
    1bee:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LCD_moveCursor>
    1bf2:	8c c0       	rjmp	.+280    	; 0x1d0c <HMI_enterConfirmPassword+0x140>
	while(i<5)
		{
			key = KEYPAD_getPressedKey();
    1bf4:	0e 94 3e 1c 	call	0x387c	; 0x387c <KEYPAD_getPressedKey>
    1bf8:	88 8b       	std	Y+16, r24	; 0x10
			if(key >= 0 && key <= 9)
    1bfa:	88 89       	ldd	r24, Y+16	; 0x10
    1bfc:	8a 30       	cpi	r24, 0x0A	; 10
    1bfe:	70 f4       	brcc	.+28     	; 0x1c1c <HMI_enterConfirmPassword+0x50>
			{
				a_confim_array[i] = key;
    1c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	ce 01       	movw	r24, r28
    1c08:	41 96       	adiw	r24, 0x11	; 17
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	88 89       	ldd	r24, Y+16	; 0x10
    1c12:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    1c14:	8a e2       	ldi	r24, 0x2A	; 42
    1c16:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LCD_displayCharacter>
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <HMI_enterConfirmPassword+0x56>
			}
			else
			{
				--i;
    1c1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c1e:	81 50       	subi	r24, 0x01	; 1
    1c20:	8f 87       	std	Y+15, r24	; 0x0f
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	aa ef       	ldi	r26, 0xFA	; 250
    1c28:	b3 e4       	ldi	r27, 0x43	; 67
    1c2a:	8b 87       	std	Y+11, r24	; 0x0b
    1c2c:	9c 87       	std	Y+12, r25	; 0x0c
    1c2e:	ad 87       	std	Y+13, r26	; 0x0d
    1c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a ef       	ldi	r20, 0xFA	; 250
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8f 83       	std	Y+7, r24	; 0x07
    1c4c:	98 87       	std	Y+8, r25	; 0x08
    1c4e:	a9 87       	std	Y+9, r26	; 0x09
    1c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <HMI_enterConfirmPassword+0xa8>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <HMI_enterConfirmPassword+0x126>
	else if (__tmp > 65535)
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <HMI_enterConfirmPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <HMI_enterConfirmPassword+0x108>
    1cb6:	88 ec       	ldi	r24, 0xC8	; 200
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <HMI_enterConfirmPassword+0xf6>
    1cc6:	9c 83       	std	Y+4, r25	; 0x04
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <HMI_enterConfirmPassword+0xea>
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <HMI_enterConfirmPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <HMI_enterConfirmPassword+0x132>
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
			}
			_delay_ms(500);
			i++;
    1d06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	8f 87       	std	Y+15, r24	; 0x0f
void HMI_enterConfirmPassword(void)
{
	uint8 key,i=0, a_confim_array[NUMBER_OF_DIGITS_IN_PASSWORD];
	LCD_displayString("Reenter The Pass");
	LCD_moveCursor(1, 5);
	while(i<5)
    1d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d0e:	85 30       	cpi	r24, 0x05	; 5
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <HMI_enterConfirmPassword+0x148>
    1d12:	70 cf       	rjmp	.-288    	; 0x1bf4 <HMI_enterConfirmPassword+0x28>
				--i;
			}
			_delay_ms(500);
			i++;
		}
	while(KEYPAD_getPressedKey() != ENTER);
    1d14:	0e 94 3e 1c 	call	0x387c	; 0x387c <KEYPAD_getPressedKey>
    1d18:	8d 30       	cpi	r24, 0x0D	; 13
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <HMI_enterConfirmPassword+0x148>
	UART_sendByte(READY);
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
	while(UART_receiveByte() != READY);
    1d22:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <HMI_enterConfirmPassword+0x156>
	HMI_sendPassword(a_confim_array);
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	41 96       	adiw	r24, 0x11	; 17
    1d2e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <HMI_sendPassword>
}
    1d32:	65 96       	adiw	r28, 0x15	; 21
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <HMI_passwordInputOperation>:
/*================================= displayChecknessResult =======================================*/
void HMI_passwordInputOperation(void)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	6d 97       	sbiw	r28, 0x1d	; 29
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
	uint8 temp = 0;
    1d58:	1d 8e       	std	Y+29, r1	; 0x1d
	 * 	8-5. clear the screen.
	 * 9. loop until the user enter a matched passwords.
	 *******************************************************************************************************/
		do
		{
			HMI_enterPassword();
    1d5a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <HMI_enterPassword>
			LCD_clearScreen();
    1d5e:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
			HMI_enterConfirmPassword();
    1d62:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <HMI_enterConfirmPassword>
			LCD_clearScreen();
    1d66:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
			HMI_receiveACK();
    1d6a:	0e 94 26 12 	call	0x244c	; 0x244c <HMI_receiveACK>
			temp = UART_receiveByte();
    1d6e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    1d72:	8d 8f       	std	Y+29, r24	; 0x1d

			if(temp == MATCHED)
    1d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <HMI_passwordInputOperation+0x38>
    1d7a:	85 c0       	rjmp	.+266    	; 0x1e86 <HMI_passwordInputOperation+0x142>
			{
				LCD_clearScreen();
    1d7c:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 5, "MATCHED");
    1d80:	21 e8       	ldi	r18, 0x81	; 129
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	65 e0       	ldi	r22, 0x05	; 5
    1d88:	a9 01       	movw	r20, r18
    1d8a:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 2, "Password Saved");
    1d8e:	29 e8       	ldi	r18, 0x89	; 137
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	62 e0       	ldi	r22, 0x02	; 2
    1d96:	a9 01       	movw	r20, r18
    1d98:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_displayStringRowColumn>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	aa ef       	ldi	r26, 0xFA	; 250
    1da2:	b3 e4       	ldi	r27, 0x43	; 67
    1da4:	89 8f       	std	Y+25, r24	; 0x19
    1da6:	9a 8f       	std	Y+26, r25	; 0x1a
    1da8:	ab 8f       	std	Y+27, r26	; 0x1b
    1daa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	69 8d       	ldd	r22, Y+25	; 0x19
    1dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a ef       	ldi	r20, 0xFA	; 250
    1dba:	54 e4       	ldi	r21, 0x44	; 68
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8d 8b       	std	Y+21, r24	; 0x15
    1dc6:	9e 8b       	std	Y+22, r25	; 0x16
    1dc8:	af 8b       	std	Y+23, r26	; 0x17
    1dca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dce:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	2c f4       	brge	.+10     	; 0x1dee <HMI_passwordInputOperation+0xaa>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9c 8b       	std	Y+20, r25	; 0x14
    1dea:	8b 8b       	std	Y+19, r24	; 0x13
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <HMI_passwordInputOperation+0x128>
	else if (__tmp > 65535)
    1dee:	6d 89       	ldd	r22, Y+21	; 0x15
    1df0:	7e 89       	ldd	r23, Y+22	; 0x16
    1df2:	8f 89       	ldd	r24, Y+23	; 0x17
    1df4:	98 8d       	ldd	r25, Y+24	; 0x18
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	4c f5       	brge	.+82     	; 0x1e58 <HMI_passwordInputOperation+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	69 8d       	ldd	r22, Y+25	; 0x19
    1e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9c 8b       	std	Y+20, r25	; 0x14
    1e2c:	8b 8b       	std	Y+19, r24	; 0x13
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <HMI_passwordInputOperation+0x10a>
    1e30:	88 ec       	ldi	r24, 0xC8	; 200
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9a 8b       	std	Y+18, r25	; 0x12
    1e36:	89 8b       	std	Y+17, r24	; 0x11
    1e38:	89 89       	ldd	r24, Y+17	; 0x11
    1e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <HMI_passwordInputOperation+0xf8>
    1e40:	9a 8b       	std	Y+18, r25	; 0x12
    1e42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	8b 89       	ldd	r24, Y+19	; 0x13
    1e46:	9c 89       	ldd	r25, Y+20	; 0x14
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	9c 8b       	std	Y+20, r25	; 0x14
    1e4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f7       	brne	.-38     	; 0x1e30 <HMI_passwordInputOperation+0xec>
    1e56:	14 c0       	rjmp	.+40     	; 0x1e80 <HMI_passwordInputOperation+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9c 8b       	std	Y+20, r25	; 0x14
    1e6a:	8b 8b       	std	Y+19, r24	; 0x13
    1e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e70:	98 8b       	std	Y+16, r25	; 0x10
    1e72:	8f 87       	std	Y+15, r24	; 0x0f
    1e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e76:	98 89       	ldd	r25, Y+16	; 0x10
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <HMI_passwordInputOperation+0x134>
    1e7c:	98 8b       	std	Y+16, r25	; 0x10
    1e7e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_clearScreen();
    1e80:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
    1e84:	85 c0       	rjmp	.+266    	; 0x1f90 <HMI_passwordInputOperation+0x24c>
			}
			else
			{
				LCD_clearScreen();
    1e86:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
				LCD_moveCursor(0, 3);
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LCD_moveCursor>
				LCD_displayString("MISMATCHED");
    1e92:	88 e9       	ldi	r24, 0x98	; 152
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
				LCD_displayStringRowColumn(1, 3, "TRY AGAIN");
    1e9a:	23 ea       	ldi	r18, 0xA3	; 163
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	63 e0       	ldi	r22, 0x03	; 3
    1ea2:	a9 01       	movw	r20, r18
    1ea4:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_displayStringRowColumn>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	aa ef       	ldi	r26, 0xFA	; 250
    1eae:	b3 e4       	ldi	r27, 0x43	; 67
    1eb0:	8b 87       	std	Y+11, r24	; 0x0b
    1eb2:	9c 87       	std	Y+12, r25	; 0x0c
    1eb4:	ad 87       	std	Y+13, r26	; 0x0d
    1eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8f 83       	std	Y+7, r24	; 0x07
    1ed2:	98 87       	std	Y+8, r25	; 0x08
    1ed4:	a9 87       	std	Y+9, r26	; 0x09
    1ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <HMI_passwordInputOperation+0x1b6>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <HMI_passwordInputOperation+0x234>
	else if (__tmp > 65535)
    1efa:	6f 81       	ldd	r22, Y+7	; 0x07
    1efc:	78 85       	ldd	r23, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <HMI_passwordInputOperation+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9e 83       	std	Y+6, r25	; 0x06
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <HMI_passwordInputOperation+0x216>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <HMI_passwordInputOperation+0x204>
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8d 81       	ldd	r24, Y+5	; 0x05
    1f52:	9e 81       	ldd	r25, Y+6	; 0x06
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <HMI_passwordInputOperation+0x1f8>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <HMI_passwordInputOperation+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <HMI_passwordInputOperation+0x240>
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				LCD_clearScreen();
    1f8c:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
			}
		}while(temp == MISMATCHED);
    1f90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f92:	88 23       	and	r24, r24
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <HMI_passwordInputOperation+0x254>
    1f96:	e1 ce       	rjmp	.-574    	; 0x1d5a <HMI_passwordInputOperation+0x16>
}
    1f98:	6d 96       	adiw	r28, 0x1d	; 29
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <HMI_getChosenOption>:
/*==================================== HMI_getChosenOption ================================*/
uint8 HMI_getChosenOption(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	0f 92       	push	r0
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	uint8 a_option = 0;
    1fb4:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		HMI_displayOptionMenu();
    1fb6:	0e 94 26 11 	call	0x224c	; 0x224c <HMI_displayOptionMenu>
		a_option = KEYPAD_getPressedKey();
    1fba:	0e 94 3e 1c 	call	0x387c	; 0x387c <KEYPAD_getPressedKey>
    1fbe:	89 83       	std	Y+1, r24	; 0x01
	}while((a_option != OPEN_DOOR_OPTION && a_option != CHANGE_PASSWORD_OPTION));
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	8b 32       	cpi	r24, 0x2B	; 43
    1fc4:	19 f0       	breq	.+6      	; 0x1fcc <HMI_getChosenOption+0x22>
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	8d 32       	cpi	r24, 0x2D	; 45
    1fca:	a9 f7       	brne	.-22     	; 0x1fb6 <HMI_getChosenOption+0xc>
	return a_option;
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <HMI_sendPassword>:
/*==================================== sendPassword =======================================*/
void HMI_sendPassword(uint8 *a_password)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	61 97       	sbiw	r28, 0x11	; 17
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	99 8b       	std	Y+17, r25	; 0x11
    1fec:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    1fee:	1f 86       	std	Y+15, r1	; 0x0f
    1ff0:	80 c0       	rjmp	.+256    	; 0x20f2 <HMI_sendPassword+0x11c>
	{
		UART_sendByte(a_password[i]);
    1ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	88 89       	ldd	r24, Y+16	; 0x10
    1ffa:	99 89       	ldd	r25, Y+17	; 0x11
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 0f       	add	r30, r18
    2000:	f3 1f       	adc	r31, r19
    2002:	80 81       	ld	r24, Z
    2004:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a8 e4       	ldi	r26, 0x48	; 72
    200e:	b2 e4       	ldi	r27, 0x42	; 66
    2010:	8b 87       	std	Y+11, r24	; 0x0b
    2012:	9c 87       	std	Y+12, r25	; 0x0c
    2014:	ad 87       	std	Y+13, r26	; 0x0d
    2016:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a ef       	ldi	r20, 0xFA	; 250
    2026:	54 e4       	ldi	r21, 0x44	; 68
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8f 83       	std	Y+7, r24	; 0x07
    2032:	98 87       	std	Y+8, r25	; 0x08
    2034:	a9 87       	std	Y+9, r26	; 0x09
    2036:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2038:	6f 81       	ldd	r22, Y+7	; 0x07
    203a:	78 85       	ldd	r23, Y+8	; 0x08
    203c:	89 85       	ldd	r24, Y+9	; 0x09
    203e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <HMI_sendPassword+0x84>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9e 83       	std	Y+6, r25	; 0x06
    2056:	8d 83       	std	Y+5, r24	; 0x05
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <HMI_sendPassword+0x102>
	else if (__tmp > 65535)
    205a:	6f 81       	ldd	r22, Y+7	; 0x07
    205c:	78 85       	ldd	r23, Y+8	; 0x08
    205e:	89 85       	ldd	r24, Y+9	; 0x09
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <HMI_sendPassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	6b 85       	ldd	r22, Y+11	; 0x0b
    2074:	7c 85       	ldd	r23, Y+12	; 0x0c
    2076:	8d 85       	ldd	r24, Y+13	; 0x0d
    2078:	9e 85       	ldd	r25, Y+14	; 0x0e
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <HMI_sendPassword+0xe4>
    209c:	88 ec       	ldi	r24, 0xC8	; 200
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9c 83       	std	Y+4, r25	; 0x04
    20a2:	8b 83       	std	Y+3, r24	; 0x03
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	9c 81       	ldd	r25, Y+4	; 0x04
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <HMI_sendPassword+0xd2>
    20ac:	9c 83       	std	Y+4, r25	; 0x04
    20ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <HMI_sendPassword+0xc6>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <HMI_sendPassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	9a 81       	ldd	r25, Y+2	; 0x02
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <HMI_sendPassword+0x10e>
    20e8:	9a 83       	std	Y+2, r25	; 0x02
    20ea:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== sendPassword =======================================*/
void HMI_sendPassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i<NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	8f 5f       	subi	r24, 0xFF	; 255
    20f0:	8f 87       	std	Y+15, r24	; 0x0f
    20f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f4:	85 30       	cpi	r24, 0x05	; 5
    20f6:	08 f4       	brcc	.+2      	; 0x20fa <HMI_sendPassword+0x124>
    20f8:	7c cf       	rjmp	.-264    	; 0x1ff2 <HMI_sendPassword+0x1c>
	{
		UART_sendByte(a_password[i]);
		_delay_ms(50);
	}
}
    20fa:	61 96       	adiw	r28, 0x11	; 17
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <HMI_readPassword>:
/*==================================== readPassword =======================================*/
void HMI_readPassword(uint8 *a_password)
{
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	61 97       	sbiw	r28, 0x11	; 17
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	99 8b       	std	Y+17, r25	; 0x11
    2126:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2128:	1f 86       	std	Y+15, r1	; 0x0f
    212a:	81 c0       	rjmp	.+258    	; 0x222e <HMI_readPassword+0x122>
	{
		a_password[i] = UART_receiveByte();
    212c:	8f 85       	ldd	r24, Y+15	; 0x0f
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	88 89       	ldd	r24, Y+16	; 0x10
    2134:	99 89       	ldd	r25, Y+17	; 0x11
    2136:	8c 01       	movw	r16, r24
    2138:	02 0f       	add	r16, r18
    213a:	13 1f       	adc	r17, r19
    213c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	a8 e4       	ldi	r26, 0x48	; 72
    214a:	b2 e4       	ldi	r27, 0x42	; 66
    214c:	8b 87       	std	Y+11, r24	; 0x0b
    214e:	9c 87       	std	Y+12, r25	; 0x0c
    2150:	ad 87       	std	Y+13, r26	; 0x0d
    2152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8f 83       	std	Y+7, r24	; 0x07
    216e:	98 87       	std	Y+8, r25	; 0x08
    2170:	a9 87       	std	Y+9, r26	; 0x09
    2172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <HMI_readPassword+0x8a>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <HMI_readPassword+0x108>
	else if (__tmp > 65535)
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <HMI_readPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <HMI_readPassword+0xea>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <HMI_readPassword+0xd8>
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <HMI_readPassword+0xcc>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <HMI_readPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <HMI_readPassword+0x114>
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
}
/*==================================== readPassword =======================================*/
void HMI_readPassword(uint8 *a_password)
{
	uint8 i;
	for(i=0; i< NUMBER_OF_DIGITS_IN_PASSWORD; i++)
    2228:	8f 85       	ldd	r24, Y+15	; 0x0f
    222a:	8f 5f       	subi	r24, 0xFF	; 255
    222c:	8f 87       	std	Y+15, r24	; 0x0f
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	85 30       	cpi	r24, 0x05	; 5
    2232:	08 f4       	brcc	.+2      	; 0x2236 <HMI_readPassword+0x12a>
    2234:	7b cf       	rjmp	.-266    	; 0x212c <HMI_readPassword+0x20>
	{
		a_password[i] = UART_receiveByte();
		_delay_ms(50);
	}
}
    2236:	61 96       	adiw	r28, 0x11	; 17
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	08 95       	ret

0000224c <HMI_displayOptionMenu>:
/*==================================== displayOptionMenu =======================================*/
void HMI_displayOptionMenu(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("+:Open Door");
    2254:	8d ea       	ldi	r24, 0xAD	; 173
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "-:Change Pass");
    225c:	29 eb       	ldi	r18, 0xB9	; 185
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	a9 01       	movw	r20, r18
    2266:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_displayStringRowColumn>
}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <HMI_displayDoorAction>:
/*======================================== Door_action ==========================================*/
void HMI_displayDoorAction(void)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	2e 97       	sbiw	r28, 0x0e	; 14
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
	 * 10. wait for 15 seconds.
	 * 11. clear screen.
	 * 12. display "Door close" for 100 msec.
	 * 13. clear the screen.
	 **************************************************/
	g_seconds = 0;
    2284:	10 92 2e 01 	sts	0x012E, r1
    2288:	10 92 2f 01 	sts	0x012F, r1
    228c:	10 92 30 01 	sts	0x0130, r1
    2290:	10 92 31 01 	sts	0x0131, r1
	LCD_clearScreen();
    2294:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door Is Opening");
    2298:	27 ec       	ldi	r18, 0xC7	; 199
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	60 e0       	ldi	r22, 0x00	; 0
    22a0:	a9 01       	movw	r20, r18
    22a2:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_displayStringRowColumn>
	while(g_seconds < TIME_OF_DOOR_OPEN);
    22a6:	80 91 2e 01 	lds	r24, 0x012E
    22aa:	90 91 2f 01 	lds	r25, 0x012F
    22ae:	a0 91 30 01 	lds	r26, 0x0130
    22b2:	b0 91 31 01 	lds	r27, 0x0131
    22b6:	8f 30       	cpi	r24, 0x0F	; 15
    22b8:	91 05       	cpc	r25, r1
    22ba:	a1 05       	cpc	r26, r1
    22bc:	b1 05       	cpc	r27, r1
    22be:	98 f3       	brcs	.-26     	; 0x22a6 <HMI_displayDoorAction+0x36>
	LCD_clearScreen();
    22c0:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door Open..");
    22c4:	27 ed       	ldi	r18, 0xD7	; 215
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	a9 01       	movw	r20, r18
    22ce:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_displayStringRowColumn>
	while(g_seconds < (TIME_OF_DOOR_STOP+TIME_OF_DOOR_OPEN));
    22d2:	80 91 2e 01 	lds	r24, 0x012E
    22d6:	90 91 2f 01 	lds	r25, 0x012F
    22da:	a0 91 30 01 	lds	r26, 0x0130
    22de:	b0 91 31 01 	lds	r27, 0x0131
    22e2:	82 31       	cpi	r24, 0x12	; 18
    22e4:	91 05       	cpc	r25, r1
    22e6:	a1 05       	cpc	r26, r1
    22e8:	b1 05       	cpc	r27, r1
    22ea:	98 f3       	brcs	.-26     	; 0x22d2 <HMI_displayDoorAction+0x62>
	LCD_clearScreen();
    22ec:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	LCD_displayString("Door Is Closing");
    22f0:	83 ee       	ldi	r24, 0xE3	; 227
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
	while(g_seconds < (TIME_OF_DOOR_STOP+TIME_OF_DOOR_OPEN+TIME_OF_DOOR_CLOSE));
    22f8:	80 91 2e 01 	lds	r24, 0x012E
    22fc:	90 91 2f 01 	lds	r25, 0x012F
    2300:	a0 91 30 01 	lds	r26, 0x0130
    2304:	b0 91 31 01 	lds	r27, 0x0131
    2308:	81 32       	cpi	r24, 0x21	; 33
    230a:	91 05       	cpc	r25, r1
    230c:	a1 05       	cpc	r26, r1
    230e:	b1 05       	cpc	r27, r1
    2310:	98 f3       	brcs	.-26     	; 0x22f8 <HMI_displayDoorAction+0x88>
	LCD_clearScreen();
    2312:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	LCD_displayString("Door close");
    2316:	83 ef       	ldi	r24, 0xF3	; 243
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a8 ec       	ldi	r26, 0xC8	; 200
    2324:	b2 e4       	ldi	r27, 0x42	; 66
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <HMI_displayDoorAction+0x100>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <HMI_displayDoorAction+0x17e>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <HMI_displayDoorAction+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <HMI_displayDoorAction+0x160>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <HMI_displayDoorAction+0x14e>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <HMI_displayDoorAction+0x142>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <HMI_displayDoorAction+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <HMI_displayDoorAction+0x18a>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	LCD_clearScreen();
    2402:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
}
    2406:	2e 96       	adiw	r28, 0x0e	; 14
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <HMI_callBack>:
/*======================================== implementOptionMenu ==========================================*/
void HMI_callBack(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
	g_seconds++;
    2420:	80 91 2e 01 	lds	r24, 0x012E
    2424:	90 91 2f 01 	lds	r25, 0x012F
    2428:	a0 91 30 01 	lds	r26, 0x0130
    242c:	b0 91 31 01 	lds	r27, 0x0131
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	a1 1d       	adc	r26, r1
    2434:	b1 1d       	adc	r27, r1
    2436:	80 93 2e 01 	sts	0x012E, r24
    243a:	90 93 2f 01 	sts	0x012F, r25
    243e:	a0 93 30 01 	sts	0x0130, r26
    2442:	b0 93 31 01 	sts	0x0131, r27
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <HMI_receiveACK>:

/*======================================== HMI_receiveACK ==========================================*/
void HMI_receiveACK(void)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the control ECU check the password*/
	while(UART_receiveByte() != READY);
    2454:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	e1 f7       	brne	.-8      	; 0x2454 <HMI_receiveACK+0x8>
	UART_sendByte(READY);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <HMI_sendACK>:
/*======================================== HMI_sendACK ==========================================*/
void HMI_sendACK(void)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(READY);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
	while(UART_receiveByte() != READY);
    2476:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	e1 f7       	brne	.-8      	; 0x2476 <HMI_sendACK+0xe>
}
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <HMI_displayAlarmAction>:
/*======================================== HMI_displayAlarmAction =======================================*/
void HMI_displayAlarmAction(void)
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
	g_seconds = 0;
    248c:	10 92 2e 01 	sts	0x012E, r1
    2490:	10 92 2f 01 	sts	0x012F, r1
    2494:	10 92 30 01 	sts	0x0130, r1
    2498:	10 92 31 01 	sts	0x0131, r1
	LCD_clearScreen();
    249c:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	LCD_displayString("ERROR OPERATION");
    24a0:	8e ef       	ldi	r24, 0xFE	; 254
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
	while(g_seconds < TIME_OF_ALARM);
    24a8:	80 91 2e 01 	lds	r24, 0x012E
    24ac:	90 91 2f 01 	lds	r25, 0x012F
    24b0:	a0 91 30 01 	lds	r26, 0x0130
    24b4:	b0 91 31 01 	lds	r27, 0x0131
    24b8:	8c 33       	cpi	r24, 0x3C	; 60
    24ba:	91 05       	cpc	r25, r1
    24bc:	a1 05       	cpc	r26, r1
    24be:	b1 05       	cpc	r27, r1
    24c0:	98 f3       	brcs	.-26     	; 0x24a8 <HMI_displayAlarmAction+0x24>
	LCD_clearScreen();
    24c2:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <HMI_openDoorWrongPassword>:
/*======================================== HMI_openDoorCheckPassword =====================================*/
void HMI_openDoorWrongPassword(uint8 *a_NumberOfWrongPasswords)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	61 97       	sbiw	r28, 0x11	; 17
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	99 8b       	std	Y+17, r25	; 0x11
    24e2:	88 8b       	std	Y+16, r24	; 0x10
	uint8 a_verification_message = 0;
    24e4:	1f 86       	std	Y+15, r1	; 0x0f
    24e6:	91 c0       	rjmp	.+290    	; 0x260a <HMI_openDoorWrongPassword+0x13e>
	 * 	10-2. reset the number of wrong passwords to 0.
	 * 	10-3. display the alarm message.
	 *************************************************************************************************/
	while((*a_NumberOfWrongPasswords)< MAX_NUM_OF_WRONG_PASS_ENTERED)
	{
	(*a_NumberOfWrongPasswords)++;
    24e8:	e8 89       	ldd	r30, Y+16	; 0x10
    24ea:	f9 89       	ldd	r31, Y+17	; 0x11
    24ec:	80 81       	ld	r24, Z
    24ee:	8f 5f       	subi	r24, 0xFF	; 255
    24f0:	e8 89       	ldd	r30, Y+16	; 0x10
    24f2:	f9 89       	ldd	r31, Y+17	; 0x11
    24f4:	80 83       	st	Z, r24
	LCD_clearScreen();
    24f6:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	LCD_displayString("Wrong Password");
    24fa:	8e e0       	ldi	r24, 0x0E	; 14
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	aa ef       	ldi	r26, 0xFA	; 250
    2508:	b3 e4       	ldi	r27, 0x43	; 67
    250a:	8b 87       	std	Y+11, r24	; 0x0b
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	ad 87       	std	Y+13, r26	; 0x0d
    2510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a ef       	ldi	r20, 0xFA	; 250
    2520:	54 e4       	ldi	r21, 0x44	; 68
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8f 83       	std	Y+7, r24	; 0x07
    252c:	98 87       	std	Y+8, r25	; 0x08
    252e:	a9 87       	std	Y+9, r26	; 0x09
    2530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <HMI_openDoorWrongPassword+0x88>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	3f c0       	rjmp	.+126    	; 0x25d2 <HMI_openDoorWrongPassword+0x106>
	else if (__tmp > 65535)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	4c f5       	brge	.+82     	; 0x25be <HMI_openDoorWrongPassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	9e 85       	ldd	r25, Y+14	; 0x0e
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <HMI_openDoorWrongPassword+0xe8>
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <HMI_openDoorWrongPassword+0xd6>
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	69 f7       	brne	.-38     	; 0x2596 <HMI_openDoorWrongPassword+0xca>
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <HMI_openDoorWrongPassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <HMI_openDoorWrongPassword+0x112>
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen();
    25e6:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	/* enter the password again from user */
	HMI_enterPassword();
    25ea:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <HMI_enterPassword>
	/* check if CONTROL ECU had finished its task and ready for communicate */
	HMI_receiveACK();
    25ee:	0e 94 26 12 	call	0x244c	; 0x244c <HMI_receiveACK>
	/* receive the result of comparsion between the two passwords */
	a_verification_message = UART_receiveByte();
    25f2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    25f6:	8f 87       	std	Y+15, r24	; 0x0f
	if(a_verification_message == MATCHED)
    25f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	31 f4       	brne	.+12     	; 0x260a <HMI_openDoorWrongPassword+0x13e>
	{
		(*a_NumberOfWrongPasswords) = 0;
    25fe:	e8 89       	ldd	r30, Y+16	; 0x10
    2600:	f9 89       	ldd	r31, Y+17	; 0x11
    2602:	10 82       	st	Z, r1
		HMI_displayDoorAction();
    2604:	0e 94 38 11 	call	0x2270	; 0x2270 <HMI_displayDoorAction>
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <HMI_openDoorWrongPassword+0x14a>
	 * 10. if the number of wrong passwords reaches its maximum value (3):
	 * 	10-1. exit from the loop.
	 * 	10-2. reset the number of wrong passwords to 0.
	 * 	10-3. display the alarm message.
	 *************************************************************************************************/
	while((*a_NumberOfWrongPasswords)< MAX_NUM_OF_WRONG_PASS_ENTERED)
    260a:	e8 89       	ldd	r30, Y+16	; 0x10
    260c:	f9 89       	ldd	r31, Y+17	; 0x11
    260e:	80 81       	ld	r24, Z
    2610:	83 30       	cpi	r24, 0x03	; 3
    2612:	08 f4       	brcc	.+2      	; 0x2616 <HMI_openDoorWrongPassword+0x14a>
    2614:	69 cf       	rjmp	.-302    	; 0x24e8 <HMI_openDoorWrongPassword+0x1c>
		(*a_NumberOfWrongPasswords) = 0;
		HMI_displayDoorAction();
		break;  /* exit the while loop */
	}
	}
	if((*a_NumberOfWrongPasswords) == MAX_NUM_OF_WRONG_PASS_ENTERED)
    2616:	e8 89       	ldd	r30, Y+16	; 0x10
    2618:	f9 89       	ldd	r31, Y+17	; 0x11
    261a:	80 81       	ld	r24, Z
    261c:	83 30       	cpi	r24, 0x03	; 3
    261e:	29 f4       	brne	.+10     	; 0x262a <HMI_openDoorWrongPassword+0x15e>
	{
		(*a_NumberOfWrongPasswords) = 0;
    2620:	e8 89       	ldd	r30, Y+16	; 0x10
    2622:	f9 89       	ldd	r31, Y+17	; 0x11
    2624:	10 82       	st	Z, r1
		HMI_displayAlarmAction();
    2626:	0e 94 42 12 	call	0x2484	; 0x2484 <HMI_displayAlarmAction>
	}
}
    262a:	61 96       	adiw	r28, 0x11	; 17
    262c:	0f b6       	in	r0, 0x3f	; 63
    262e:	f8 94       	cli
    2630:	de bf       	out	0x3e, r29	; 62
    2632:	0f be       	out	0x3f, r0	; 63
    2634:	cd bf       	out	0x3d, r28	; 61
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <HMI_changePassword>:
/*================================= HMI_changePassword ======================================*/
void HMI_changePassword(uint8 *a_NumberOfWrongPasswords)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	61 97       	sbiw	r28, 0x11	; 17
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	99 8b       	std	Y+17, r25	; 0x11
    2652:	88 8b       	std	Y+16, r24	; 0x10
	uint8 a_verificationMessage = 0;
    2654:	1f 86       	std	Y+15, r1	; 0x0f
	 * 	8-11. if the number of wrong passwords == 3:
	 * 		8-11-1. reset the value of number of wrong passwords.
	 * 		8-11-2. display the alarm action.
	 * 9. clear the screen.
	 *********************************************************************************************************************************/
 	LCD_clearScreen();
    2656:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>

 	HMI_sendACK();
    265a:	0e 94 34 12 	call	0x2468	; 0x2468 <HMI_sendACK>
	UART_sendByte(CHANGE_PASSWORD_OPTION);
    265e:	8d e2       	ldi	r24, 0x2D	; 45
    2660:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>

	/************** Actualy start ***********************/
	HMI_enterPassword();
    2664:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <HMI_enterPassword>
	HMI_receiveACK();
    2668:	0e 94 26 12 	call	0x244c	; 0x244c <HMI_receiveACK>
	a_verificationMessage = UART_receiveByte();
    266c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    2670:	8f 87       	std	Y+15, r24	; 0x0f

	if(a_verificationMessage == CHANGE_PASSWORD)
    2672:	8f 85       	ldd	r24, Y+15	; 0x0f
    2674:	8c 32       	cpi	r24, 0x2C	; 44
    2676:	41 f4       	brne	.+16     	; 0x2688 <HMI_changePassword+0x4c>
	{
	 	LCD_clearScreen();
    2678:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
	 	HMI_passwordInputOperation();
    267c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <HMI_passwordInputOperation>
		(*a_NumberOfWrongPasswords) = 0;
    2680:	e8 89       	ldd	r30, Y+16	; 0x10
    2682:	f9 89       	ldd	r31, Y+17	; 0x11
    2684:	10 82       	st	Z, r1
    2686:	a8 c0       	rjmp	.+336    	; 0x27d8 <HMI_changePassword+0x19c>
	}
	else if(a_verificationMessage == MISMATCHED)
    2688:	8f 85       	ldd	r24, Y+15	; 0x0f
    268a:	88 23       	and	r24, r24
    268c:	09 f0       	breq	.+2      	; 0x2690 <HMI_changePassword+0x54>
    268e:	a4 c0       	rjmp	.+328    	; 0x27d8 <HMI_changePassword+0x19c>
    2690:	93 c0       	rjmp	.+294    	; 0x27b8 <HMI_changePassword+0x17c>
	{
		while((*a_NumberOfWrongPasswords) < MAX_NUM_OF_WRONG_PASS_ENTERED)
		{
			(*a_NumberOfWrongPasswords)++;
    2692:	e8 89       	ldd	r30, Y+16	; 0x10
    2694:	f9 89       	ldd	r31, Y+17	; 0x11
    2696:	80 81       	ld	r24, Z
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	e8 89       	ldd	r30, Y+16	; 0x10
    269c:	f9 89       	ldd	r31, Y+17	; 0x11
    269e:	80 83       	st	Z, r24
			LCD_clearScreen();
    26a0:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    26a4:	8e e0       	ldi	r24, 0x0E	; 14
    26a6:	91 e0       	ldi	r25, 0x01	; 1
    26a8:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	aa ef       	ldi	r26, 0xFA	; 250
    26b2:	b3 e4       	ldi	r27, 0x43	; 67
    26b4:	8b 87       	std	Y+11, r24	; 0x0b
    26b6:	9c 87       	std	Y+12, r25	; 0x0c
    26b8:	ad 87       	std	Y+13, r26	; 0x0d
    26ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a ef       	ldi	r20, 0xFA	; 250
    26ca:	54 e4       	ldi	r21, 0x44	; 68
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	8f 83       	std	Y+7, r24	; 0x07
    26d6:	98 87       	std	Y+8, r25	; 0x08
    26d8:	a9 87       	std	Y+9, r26	; 0x09
    26da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	2c f4       	brge	.+10     	; 0x26fe <HMI_changePassword+0xc2>
		__ticks = 1;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	3f c0       	rjmp	.+126    	; 0x277c <HMI_changePassword+0x140>
	else if (__tmp > 65535)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	4c f5       	brge	.+82     	; 0x2768 <HMI_changePassword+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e2       	ldi	r20, 0x20	; 32
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	0f c0       	rjmp	.+30     	; 0x275e <HMI_changePassword+0x122>
    2740:	88 ec       	ldi	r24, 0xC8	; 200
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <HMI_changePassword+0x110>
    2750:	9c 83       	std	Y+4, r25	; 0x04
    2752:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	9e 83       	std	Y+6, r25	; 0x06
    275c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	9e 81       	ldd	r25, Y+6	; 0x06
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	69 f7       	brne	.-38     	; 0x2740 <HMI_changePassword+0x104>
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <HMI_changePassword+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	8d 81       	ldd	r24, Y+5	; 0x05
    277e:	9e 81       	ldd	r25, Y+6	; 0x06
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <HMI_changePassword+0x14c>
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_clearScreen();
    2790:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
			HMI_enterPassword();
    2794:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <HMI_enterPassword>
			HMI_receiveACK();
    2798:	0e 94 26 12 	call	0x244c	; 0x244c <HMI_receiveACK>
			a_verificationMessage = UART_receiveByte();
    279c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    27a0:	8f 87       	std	Y+15, r24	; 0x0f

			if(a_verificationMessage == CHANGE_PASSWORD)
    27a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a4:	8c 32       	cpi	r24, 0x2C	; 44
    27a6:	41 f4       	brne	.+16     	; 0x27b8 <HMI_changePassword+0x17c>
			{
				LCD_clearScreen();
    27a8:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
				(*a_NumberOfWrongPasswords) = 0;
    27ac:	e8 89       	ldd	r30, Y+16	; 0x10
    27ae:	f9 89       	ldd	r31, Y+17	; 0x11
    27b0:	10 82       	st	Z, r1
				HMI_passwordInputOperation();
    27b2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <HMI_passwordInputOperation>
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <HMI_changePassword+0x188>
	 	HMI_passwordInputOperation();
		(*a_NumberOfWrongPasswords) = 0;
	}
	else if(a_verificationMessage == MISMATCHED)
	{
		while((*a_NumberOfWrongPasswords) < MAX_NUM_OF_WRONG_PASS_ENTERED)
    27b8:	e8 89       	ldd	r30, Y+16	; 0x10
    27ba:	f9 89       	ldd	r31, Y+17	; 0x11
    27bc:	80 81       	ld	r24, Z
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	08 f4       	brcc	.+2      	; 0x27c4 <HMI_changePassword+0x188>
    27c2:	67 cf       	rjmp	.-306    	; 0x2692 <HMI_changePassword+0x56>
				(*a_NumberOfWrongPasswords) = 0;
				HMI_passwordInputOperation();
				break;
			}
		}
		if((*a_NumberOfWrongPasswords) == MAX_NUM_OF_WRONG_PASS_ENTERED)
    27c4:	e8 89       	ldd	r30, Y+16	; 0x10
    27c6:	f9 89       	ldd	r31, Y+17	; 0x11
    27c8:	80 81       	ld	r24, Z
    27ca:	83 30       	cpi	r24, 0x03	; 3
    27cc:	29 f4       	brne	.+10     	; 0x27d8 <HMI_changePassword+0x19c>
		{
			(*a_NumberOfWrongPasswords) = 0;
    27ce:	e8 89       	ldd	r30, Y+16	; 0x10
    27d0:	f9 89       	ldd	r31, Y+17	; 0x11
    27d2:	10 82       	st	Z, r1
			HMI_displayAlarmAction();
    27d4:	0e 94 42 12 	call	0x2484	; 0x2484 <HMI_displayAlarmAction>
		}
	}
	LCD_clearScreen();
    27d8:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
}
    27dc:	61 96       	adiw	r28, 0x11	; 17
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <LCD_sendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_sendCommand(uint8 command)
{
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	df 93       	push	r29
    27f4:	cf 93       	push	r28
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	c1 56       	subi	r28, 0x61	; 97
    27fc:	d0 40       	sbci	r29, 0x00	; 0
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	fe 01       	movw	r30, r28
    280a:	ef 59       	subi	r30, 0x9F	; 159
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 83       	st	Z, r24
	 * send command
	 * wait
	 * Active E pin LOW
	 * wait
	 ************************************************/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	61 e0       	ldi	r22, 0x01	; 1
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    2824:	fe 01       	movw	r30, r28
    2826:	e3 5a       	subi	r30, 0xA3	; 163
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	a8 e4       	ldi	r26, 0x48	; 72
    2830:	b2 e4       	ldi	r27, 0x42	; 66
    2832:	80 83       	st	Z, r24
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	a2 83       	std	Z+2, r26	; 0x02
    2838:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    283a:	8e 01       	movw	r16, r28
    283c:	07 5a       	subi	r16, 0xA7	; 167
    283e:	1f 4f       	sbci	r17, 0xFF	; 255
    2840:	fe 01       	movw	r30, r28
    2842:	e3 5a       	subi	r30, 0xA3	; 163
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	2b ea       	ldi	r18, 0xAB	; 171
    2850:	3a ea       	ldi	r19, 0xAA	; 170
    2852:	4a ea       	ldi	r20, 0xAA	; 170
    2854:	5e e3       	ldi	r21, 0x3E	; 62
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	f8 01       	movw	r30, r16
    2860:	80 83       	st	Z, r24
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	a2 83       	std	Z+2, r26	; 0x02
    2866:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2868:	fe 01       	movw	r30, r28
    286a:	e7 5a       	subi	r30, 0xA7	; 167
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e8       	ldi	r20, 0x80	; 128
    287c:	5f e3       	ldi	r21, 0x3F	; 63
    287e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2882:	88 23       	and	r24, r24
    2884:	34 f4       	brge	.+12     	; 0x2892 <LCD_sendCommand+0xa4>
		__ticks = 1;
    2886:	fe 01       	movw	r30, r28
    2888:	e8 5a       	subi	r30, 0xA8	; 168
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	80 83       	st	Z, r24
    2890:	e0 c0       	rjmp	.+448    	; 0x2a52 <LCD_sendCommand+0x264>
	else if (__tmp > 255)
    2892:	fe 01       	movw	r30, r28
    2894:	e7 5a       	subi	r30, 0xA7	; 167
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	82 81       	ldd	r24, Z+2	; 0x02
    289e:	93 81       	ldd	r25, Z+3	; 0x03
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4f e7       	ldi	r20, 0x7F	; 127
    28a6:	53 e4       	ldi	r21, 0x43	; 67
    28a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ac:	18 16       	cp	r1, r24
    28ae:	0c f0       	brlt	.+2      	; 0x28b2 <LCD_sendCommand+0xc4>
    28b0:	c0 c0       	rjmp	.+384    	; 0x2a32 <LCD_sendCommand+0x244>
	{
		_delay_ms(__us / 1000.0);
    28b2:	fe 01       	movw	r30, r28
    28b4:	e3 5a       	subi	r30, 0xA3	; 163
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	4a e7       	ldi	r20, 0x7A	; 122
    28c6:	54 e4       	ldi	r21, 0x44	; 68
    28c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	fe 01       	movw	r30, r28
    28d2:	ec 5a       	subi	r30, 0xAC	; 172
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	8e 01       	movw	r16, r28
    28e0:	00 5b       	subi	r16, 0xB0	; 176
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	ec 5a       	subi	r30, 0xAC	; 172
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a e7       	ldi	r20, 0x7A	; 122
    28f8:	53 e4       	ldi	r21, 0x43	; 67
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	f8 01       	movw	r30, r16
    2904:	80 83       	st	Z, r24
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	a2 83       	std	Z+2, r26	; 0x02
    290a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290c:	fe 01       	movw	r30, r28
    290e:	e0 5b       	subi	r30, 0xB0	; 176
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	44 f4       	brge	.+16     	; 0x293a <LCD_sendCommand+0x14c>
		__ticks = 1;
    292a:	fe 01       	movw	r30, r28
    292c:	e2 5b       	subi	r30, 0xB2	; 178
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	64 c0       	rjmp	.+200    	; 0x2a02 <LCD_sendCommand+0x214>
	else if (__tmp > 65535)
    293a:	fe 01       	movw	r30, r28
    293c:	e0 5b       	subi	r30, 0xB0	; 176
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	0c f0       	brlt	.+2      	; 0x295a <LCD_sendCommand+0x16c>
    2958:	43 c0       	rjmp	.+134    	; 0x29e0 <LCD_sendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295a:	fe 01       	movw	r30, r28
    295c:	ec 5a       	subi	r30, 0xAC	; 172
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8e 01       	movw	r16, r28
    297a:	02 5b       	subi	r16, 0xB2	; 178
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
    2990:	1f c0       	rjmp	.+62     	; 0x29d0 <LCD_sendCommand+0x1e2>
    2992:	fe 01       	movw	r30, r28
    2994:	e4 5b       	subi	r30, 0xB4	; 180
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	89 e1       	ldi	r24, 0x19	; 25
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	fe 01       	movw	r30, r28
    29a2:	e4 5b       	subi	r30, 0xB4	; 180
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_sendCommand+0x1bc>
    29ae:	fe 01       	movw	r30, r28
    29b0:	e4 5b       	subi	r30, 0xB4	; 180
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	de 01       	movw	r26, r28
    29ba:	a2 5b       	subi	r26, 0xB2	; 178
    29bc:	bf 4f       	sbci	r27, 0xFF	; 255
    29be:	fe 01       	movw	r30, r28
    29c0:	e2 5b       	subi	r30, 0xB2	; 178
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	11 96       	adiw	r26, 0x01	; 1
    29cc:	9c 93       	st	X, r25
    29ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	fe 01       	movw	r30, r28
    29d2:	e2 5b       	subi	r30, 0xB2	; 178
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	d1 f6       	brne	.-76     	; 0x2992 <LCD_sendCommand+0x1a4>
    29de:	4b c0       	rjmp	.+150    	; 0x2a76 <LCD_sendCommand+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	8e 01       	movw	r16, r28
    29e2:	02 5b       	subi	r16, 0xB2	; 178
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	fe 01       	movw	r30, r28
    29e8:	e0 5b       	subi	r30, 0xB0	; 176
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	60 81       	ld	r22, Z
    29ee:	71 81       	ldd	r23, Z+1	; 0x01
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	f8 01       	movw	r30, r16
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	de 01       	movw	r26, r28
    2a04:	a6 5b       	subi	r26, 0xB6	; 182
    2a06:	bf 4f       	sbci	r27, 0xFF	; 255
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e2 5b       	subi	r30, 0xB2	; 178
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	11 96       	adiw	r26, 0x01	; 1
    2a14:	9c 93       	st	X, r25
    2a16:	8e 93       	st	-X, r24
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e6 5b       	subi	r30, 0xB6	; 182
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <LCD_sendCommand+0x234>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e6 5b       	subi	r30, 0xB6	; 182
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
    2a30:	22 c0       	rjmp	.+68     	; 0x2a76 <LCD_sendCommand+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a32:	8e 01       	movw	r16, r28
    2a34:	08 5a       	subi	r16, 0xA8	; 168
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e7 5a       	subi	r30, 0xA7	; 167
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	60 81       	ld	r22, Z
    2a40:	71 81       	ldd	r23, Z+1	; 0x01
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	f8 01       	movw	r30, r16
    2a50:	80 83       	st	Z, r24
    2a52:	de 01       	movw	r26, r28
    2a54:	a7 5b       	subi	r26, 0xB7	; 183
    2a56:	bf 4f       	sbci	r27, 0xFF	; 255
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e8 5a       	subi	r30, 0xA8	; 168
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	80 81       	ld	r24, Z
    2a60:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a62:	fe 01       	movw	r30, r28
    2a64:	e7 5b       	subi	r30, 0xB7	; 183
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	8a 95       	dec	r24
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <LCD_sendCommand+0x27c>
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e7 5b       	subi	r30, 0xB7	; 183
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	62 e0       	ldi	r22, 0x02	; 2
    2a7a:	41 e0       	ldi	r20, 0x01	; 1
    2a7c:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    2a80:	fe 01       	movw	r30, r28
    2a82:	eb 5b       	subi	r30, 0xBB	; 187
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a8 e4       	ldi	r26, 0x48	; 72
    2a8c:	b3 e4       	ldi	r27, 0x43	; 67
    2a8e:	80 83       	st	Z, r24
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	a2 83       	std	Z+2, r26	; 0x02
    2a94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a96:	8e 01       	movw	r16, r28
    2a98:	0f 5b       	subi	r16, 0xBF	; 191
    2a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	eb 5b       	subi	r30, 0xBB	; 187
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	2b ea       	ldi	r18, 0xAB	; 171
    2aac:	3a ea       	ldi	r19, 0xAA	; 170
    2aae:	4a ea       	ldi	r20, 0xAA	; 170
    2ab0:	5e e3       	ldi	r21, 0x3E	; 62
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	ef 5b       	subi	r30, 0xBF	; 191
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	34 f4       	brge	.+12     	; 0x2aee <LCD_sendCommand+0x300>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e0 5c       	subi	r30, 0xC0	; 192
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 83       	st	Z, r24
    2aec:	9d c0       	rjmp	.+314    	; 0x2c28 <LCD_sendCommand+0x43a>
	else if (__tmp > 255)
    2aee:	fe 01       	movw	r30, r28
    2af0:	ef 5b       	subi	r30, 0xBF	; 191
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	60 81       	ld	r22, Z
    2af6:	71 81       	ldd	r23, Z+1	; 0x01
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	4f e7       	ldi	r20, 0x7F	; 127
    2b02:	53 e4       	ldi	r21, 0x43	; 67
    2b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	0c f0       	brlt	.+2      	; 0x2b0e <LCD_sendCommand+0x320>
    2b0c:	7e c0       	rjmp	.+252    	; 0x2c0a <LCD_sendCommand+0x41c>
	{
		_delay_ms(__us / 1000.0);
    2b0e:	fe 01       	movw	r30, r28
    2b10:	eb 5b       	subi	r30, 0xBB	; 187
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	54 e4       	ldi	r21, 0x44	; 68
    2b24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	8c af       	std	Y+60, r24	; 0x3c
    2b2e:	9d af       	std	Y+61, r25	; 0x3d
    2b30:	ae af       	std	Y+62, r26	; 0x3e
    2b32:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b34:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b36:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b38:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	4a e7       	ldi	r20, 0x7A	; 122
    2b42:	53 e4       	ldi	r21, 0x43	; 67
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	88 af       	std	Y+56, r24	; 0x38
    2b4e:	99 af       	std	Y+57, r25	; 0x39
    2b50:	aa af       	std	Y+58, r26	; 0x3a
    2b52:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2b54:	68 ad       	ldd	r22, Y+56	; 0x38
    2b56:	79 ad       	ldd	r23, Y+57	; 0x39
    2b58:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e8       	ldi	r20, 0x80	; 128
    2b62:	5f e3       	ldi	r21, 0x3F	; 63
    2b64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b68:	88 23       	and	r24, r24
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <LCD_sendCommand+0x388>
		__ticks = 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9f ab       	std	Y+55, r25	; 0x37
    2b72:	8e ab       	std	Y+54, r24	; 0x36
    2b74:	3f c0       	rjmp	.+126    	; 0x2bf4 <LCD_sendCommand+0x406>
	else if (__tmp > 65535)
    2b76:	68 ad       	ldd	r22, Y+56	; 0x38
    2b78:	79 ad       	ldd	r23, Y+57	; 0x39
    2b7a:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b7c:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	3f ef       	ldi	r19, 0xFF	; 255
    2b82:	4f e7       	ldi	r20, 0x7F	; 127
    2b84:	57 e4       	ldi	r21, 0x47	; 71
    2b86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b8a:	18 16       	cp	r1, r24
    2b8c:	4c f5       	brge	.+82     	; 0x2be0 <LCD_sendCommand+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2b90:	7d ad       	ldd	r23, Y+61	; 0x3d
    2b92:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b94:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e2       	ldi	r20, 0x20	; 32
    2b9c:	51 e4       	ldi	r21, 0x41	; 65
    2b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	bc 01       	movw	r22, r24
    2ba8:	cd 01       	movw	r24, r26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9f ab       	std	Y+55, r25	; 0x37
    2bb4:	8e ab       	std	Y+54, r24	; 0x36
    2bb6:	0f c0       	rjmp	.+30     	; 0x2bd6 <LCD_sendCommand+0x3e8>
    2bb8:	89 e1       	ldi	r24, 0x19	; 25
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	9d ab       	std	Y+53, r25	; 0x35
    2bbe:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bc0:	8c a9       	ldd	r24, Y+52	; 0x34
    2bc2:	9d a9       	ldd	r25, Y+53	; 0x35
    2bc4:	01 97       	sbiw	r24, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <LCD_sendCommand+0x3d6>
    2bc8:	9d ab       	std	Y+53, r25	; 0x35
    2bca:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bcc:	8e a9       	ldd	r24, Y+54	; 0x36
    2bce:	9f a9       	ldd	r25, Y+55	; 0x37
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	9f ab       	std	Y+55, r25	; 0x37
    2bd4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd6:	8e a9       	ldd	r24, Y+54	; 0x36
    2bd8:	9f a9       	ldd	r25, Y+55	; 0x37
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	69 f7       	brne	.-38     	; 0x2bb8 <LCD_sendCommand+0x3ca>
    2bde:	2d c0       	rjmp	.+90     	; 0x2c3a <LCD_sendCommand+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be0:	68 ad       	ldd	r22, Y+56	; 0x38
    2be2:	79 ad       	ldd	r23, Y+57	; 0x39
    2be4:	8a ad       	ldd	r24, Y+58	; 0x3a
    2be6:	9b ad       	ldd	r25, Y+59	; 0x3b
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9f ab       	std	Y+55, r25	; 0x37
    2bf2:	8e ab       	std	Y+54, r24	; 0x36
    2bf4:	8e a9       	ldd	r24, Y+54	; 0x36
    2bf6:	9f a9       	ldd	r25, Y+55	; 0x37
    2bf8:	9b ab       	std	Y+51, r25	; 0x33
    2bfa:	8a ab       	std	Y+50, r24	; 0x32
    2bfc:	8a a9       	ldd	r24, Y+50	; 0x32
    2bfe:	9b a9       	ldd	r25, Y+51	; 0x33
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <LCD_sendCommand+0x412>
    2c04:	9b ab       	std	Y+51, r25	; 0x33
    2c06:	8a ab       	std	Y+50, r24	; 0x32
    2c08:	18 c0       	rjmp	.+48     	; 0x2c3a <LCD_sendCommand+0x44c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ef 5b       	subi	r30, 0xBF	; 191
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	fe 01       	movw	r30, r28
    2c22:	e0 5c       	subi	r30, 0xC0	; 192
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 83       	st	Z, r24
    2c28:	fe 01       	movw	r30, r28
    2c2a:	e0 5c       	subi	r30, 0xC0	; 192
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	80 81       	ld	r24, Z
    2c30:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c32:	89 a9       	ldd	r24, Y+49	; 0x31
    2c34:	8a 95       	dec	r24
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <LCD_sendCommand+0x446>
    2c38:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ef 59       	subi	r30, 0x9F	; 159
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	60 81       	ld	r22, Z
    2c44:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePort>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c4e:	b2 e4       	ldi	r27, 0x42	; 66
    2c50:	8d a7       	std	Y+45, r24	; 0x2d
    2c52:	9e a7       	std	Y+46, r25	; 0x2e
    2c54:	af a7       	std	Y+47, r26	; 0x2f
    2c56:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c58:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c5a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c60:	2b ea       	ldi	r18, 0xAB	; 171
    2c62:	3a ea       	ldi	r19, 0xAA	; 170
    2c64:	4a ea       	ldi	r20, 0xAA	; 170
    2c66:	5e e3       	ldi	r21, 0x3E	; 62
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	89 a7       	std	Y+41, r24	; 0x29
    2c72:	9a a7       	std	Y+42, r25	; 0x2a
    2c74:	ab a7       	std	Y+43, r26	; 0x2b
    2c76:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2c78:	69 a5       	ldd	r22, Y+41	; 0x29
    2c7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e8       	ldi	r20, 0x80	; 128
    2c86:	5f e3       	ldi	r21, 0x3F	; 63
    2c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8c:	88 23       	and	r24, r24
    2c8e:	1c f4       	brge	.+6      	; 0x2c96 <LCD_sendCommand+0x4a8>
		__ticks = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	88 a7       	std	Y+40, r24	; 0x28
    2c94:	91 c0       	rjmp	.+290    	; 0x2db8 <LCD_sendCommand+0x5ca>
	else if (__tmp > 255)
    2c96:	69 a5       	ldd	r22, Y+41	; 0x29
    2c98:	7a a5       	ldd	r23, Y+42	; 0x2a
    2c9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4f e7       	ldi	r20, 0x7F	; 127
    2ca4:	53 e4       	ldi	r21, 0x43	; 67
    2ca6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2caa:	18 16       	cp	r1, r24
    2cac:	0c f0       	brlt	.+2      	; 0x2cb0 <LCD_sendCommand+0x4c2>
    2cae:	7b c0       	rjmp	.+246    	; 0x2da6 <LCD_sendCommand+0x5b8>
	{
		_delay_ms(__us / 1000.0);
    2cb0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cb2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a e7       	ldi	r20, 0x7A	; 122
    2cbe:	54 e4       	ldi	r21, 0x44	; 68
    2cc0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	8c a3       	std	Y+36, r24	; 0x24
    2cca:	9d a3       	std	Y+37, r25	; 0x25
    2ccc:	ae a3       	std	Y+38, r26	; 0x26
    2cce:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd0:	6c a1       	ldd	r22, Y+36	; 0x24
    2cd2:	7d a1       	ldd	r23, Y+37	; 0x25
    2cd4:	8e a1       	ldd	r24, Y+38	; 0x26
    2cd6:	9f a1       	ldd	r25, Y+39	; 0x27
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	4a e7       	ldi	r20, 0x7A	; 122
    2cde:	53 e4       	ldi	r21, 0x43	; 67
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	88 a3       	std	Y+32, r24	; 0x20
    2cea:	99 a3       	std	Y+33, r25	; 0x21
    2cec:	aa a3       	std	Y+34, r26	; 0x22
    2cee:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2cf0:	68 a1       	ldd	r22, Y+32	; 0x20
    2cf2:	79 a1       	ldd	r23, Y+33	; 0x21
    2cf4:	8a a1       	ldd	r24, Y+34	; 0x22
    2cf6:	9b a1       	ldd	r25, Y+35	; 0x23
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <LCD_sendCommand+0x524>
		__ticks = 1;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d10:	3f c0       	rjmp	.+126    	; 0x2d90 <LCD_sendCommand+0x5a2>
	else if (__tmp > 65535)
    2d12:	68 a1       	ldd	r22, Y+32	; 0x20
    2d14:	79 a1       	ldd	r23, Y+33	; 0x21
    2d16:	8a a1       	ldd	r24, Y+34	; 0x22
    2d18:	9b a1       	ldd	r25, Y+35	; 0x23
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	3f ef       	ldi	r19, 0xFF	; 255
    2d1e:	4f e7       	ldi	r20, 0x7F	; 127
    2d20:	57 e4       	ldi	r21, 0x47	; 71
    2d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d26:	18 16       	cp	r1, r24
    2d28:	4c f5       	brge	.+82     	; 0x2d7c <LCD_sendCommand+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2a:	6c a1       	ldd	r22, Y+36	; 0x24
    2d2c:	7d a1       	ldd	r23, Y+37	; 0x25
    2d2e:	8e a1       	ldd	r24, Y+38	; 0x26
    2d30:	9f a1       	ldd	r25, Y+39	; 0x27
    2d32:	20 e0       	ldi	r18, 0x00	; 0
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	40 e2       	ldi	r20, 0x20	; 32
    2d38:	51 e4       	ldi	r21, 0x41	; 65
    2d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	bc 01       	movw	r22, r24
    2d44:	cd 01       	movw	r24, r26
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9f 8f       	std	Y+31, r25	; 0x1f
    2d50:	8e 8f       	std	Y+30, r24	; 0x1e
    2d52:	0f c0       	rjmp	.+30     	; 0x2d72 <LCD_sendCommand+0x584>
    2d54:	89 e1       	ldi	r24, 0x19	; 25
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9d 8f       	std	Y+29, r25	; 0x1d
    2d5a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_sendCommand+0x572>
    2d64:	9d 8f       	std	Y+29, r25	; 0x1d
    2d66:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9f 8f       	std	Y+31, r25	; 0x1f
    2d70:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d74:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <LCD_sendCommand+0x566>
    2d7a:	24 c0       	rjmp	.+72     	; 0x2dc4 <LCD_sendCommand+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d7c:	68 a1       	ldd	r22, Y+32	; 0x20
    2d7e:	79 a1       	ldd	r23, Y+33	; 0x21
    2d80:	8a a1       	ldd	r24, Y+34	; 0x22
    2d82:	9b a1       	ldd	r25, Y+35	; 0x23
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d8e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2d94:	9b 8f       	std	Y+27, r25	; 0x1b
    2d96:	8a 8f       	std	Y+26, r24	; 0x1a
    2d98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	f1 f7       	brne	.-4      	; 0x2d9c <LCD_sendCommand+0x5ae>
    2da0:	9b 8f       	std	Y+27, r25	; 0x1b
    2da2:	8a 8f       	std	Y+26, r24	; 0x1a
    2da4:	0f c0       	rjmp	.+30     	; 0x2dc4 <LCD_sendCommand+0x5d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2da6:	69 a5       	ldd	r22, Y+41	; 0x29
    2da8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2daa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dac:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	88 a7       	std	Y+40, r24	; 0x28
    2db8:	88 a5       	ldd	r24, Y+40	; 0x28
    2dba:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dbc:	89 8d       	ldd	r24, Y+25	; 0x19
    2dbe:	8a 95       	dec	r24
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <LCD_sendCommand+0x5d0>
    2dc2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	62 e0       	ldi	r22, 0x02	; 2
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 e7       	ldi	r26, 0x70	; 112
    2dd4:	b1 e4       	ldi	r27, 0x41	; 65
    2dd6:	8d 8b       	std	Y+21, r24	; 0x15
    2dd8:	9e 8b       	std	Y+22, r25	; 0x16
    2dda:	af 8b       	std	Y+23, r26	; 0x17
    2ddc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2dde:	6d 89       	ldd	r22, Y+21	; 0x15
    2de0:	7e 89       	ldd	r23, Y+22	; 0x16
    2de2:	8f 89       	ldd	r24, Y+23	; 0x17
    2de4:	98 8d       	ldd	r25, Y+24	; 0x18
    2de6:	2b ea       	ldi	r18, 0xAB	; 171
    2de8:	3a ea       	ldi	r19, 0xAA	; 170
    2dea:	4a ea       	ldi	r20, 0xAA	; 170
    2dec:	5e e3       	ldi	r21, 0x3E	; 62
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	89 8b       	std	Y+17, r24	; 0x11
    2df8:	9a 8b       	std	Y+18, r25	; 0x12
    2dfa:	ab 8b       	std	Y+19, r26	; 0x13
    2dfc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2dfe:	69 89       	ldd	r22, Y+17	; 0x11
    2e00:	7a 89       	ldd	r23, Y+18	; 0x12
    2e02:	8b 89       	ldd	r24, Y+19	; 0x13
    2e04:	9c 89       	ldd	r25, Y+20	; 0x14
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	40 e8       	ldi	r20, 0x80	; 128
    2e0c:	5f e3       	ldi	r21, 0x3F	; 63
    2e0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e12:	88 23       	and	r24, r24
    2e14:	1c f4       	brge	.+6      	; 0x2e1c <LCD_sendCommand+0x62e>
		__ticks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	88 8b       	std	Y+16, r24	; 0x10
    2e1a:	91 c0       	rjmp	.+290    	; 0x2f3e <LCD_sendCommand+0x750>
	else if (__tmp > 255)
    2e1c:	69 89       	ldd	r22, Y+17	; 0x11
    2e1e:	7a 89       	ldd	r23, Y+18	; 0x12
    2e20:	8b 89       	ldd	r24, Y+19	; 0x13
    2e22:	9c 89       	ldd	r25, Y+20	; 0x14
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	53 e4       	ldi	r21, 0x43	; 67
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	0c f0       	brlt	.+2      	; 0x2e36 <LCD_sendCommand+0x648>
    2e34:	7b c0       	rjmp	.+246    	; 0x2f2c <LCD_sendCommand+0x73e>
	{
		_delay_ms(__us / 1000.0);
    2e36:	6d 89       	ldd	r22, Y+21	; 0x15
    2e38:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	4a e7       	ldi	r20, 0x7A	; 122
    2e44:	54 e4       	ldi	r21, 0x44	; 68
    2e46:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	8c 87       	std	Y+12, r24	; 0x0c
    2e50:	9d 87       	std	Y+13, r25	; 0x0d
    2e52:	ae 87       	std	Y+14, r26	; 0x0e
    2e54:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e58:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a e7       	ldi	r20, 0x7A	; 122
    2e64:	53 e4       	ldi	r21, 0x43	; 67
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	88 87       	std	Y+8, r24	; 0x08
    2e70:	99 87       	std	Y+9, r25	; 0x09
    2e72:	aa 87       	std	Y+10, r26	; 0x0a
    2e74:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e76:	68 85       	ldd	r22, Y+8	; 0x08
    2e78:	79 85       	ldd	r23, Y+9	; 0x09
    2e7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <LCD_sendCommand+0x6aa>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9f 83       	std	Y+7, r25	; 0x07
    2e94:	8e 83       	std	Y+6, r24	; 0x06
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <LCD_sendCommand+0x728>
	else if (__tmp > 65535)
    2e98:	68 85       	ldd	r22, Y+8	; 0x08
    2e9a:	79 85       	ldd	r23, Y+9	; 0x09
    2e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	4c f5       	brge	.+82     	; 0x2f02 <LCD_sendCommand+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eb6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9f 83       	std	Y+7, r25	; 0x07
    2ed6:	8e 83       	std	Y+6, r24	; 0x06
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <LCD_sendCommand+0x70a>
    2eda:	89 e1       	ldi	r24, 0x19	; 25
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9d 83       	std	Y+5, r25	; 0x05
    2ee0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <LCD_sendCommand+0x6f8>
    2eea:	9d 83       	std	Y+5, r25	; 0x05
    2eec:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9f 83       	std	Y+7, r25	; 0x07
    2ef6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    2efa:	9f 81       	ldd	r25, Y+7	; 0x07
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <LCD_sendCommand+0x6ec>
    2f00:	24 c0       	rjmp	.+72     	; 0x2f4a <LCD_sendCommand+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	68 85       	ldd	r22, Y+8	; 0x08
    2f04:	79 85       	ldd	r23, Y+9	; 0x09
    2f06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9f 83       	std	Y+7, r25	; 0x07
    2f14:	8e 83       	std	Y+6, r24	; 0x06
    2f16:	8e 81       	ldd	r24, Y+6	; 0x06
    2f18:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1a:	9b 83       	std	Y+3, r25	; 0x03
    2f1c:	8a 83       	std	Y+2, r24	; 0x02
    2f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f20:	9b 81       	ldd	r25, Y+3	; 0x03
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_sendCommand+0x734>
    2f26:	9b 83       	std	Y+3, r25	; 0x03
    2f28:	8a 83       	std	Y+2, r24	; 0x02
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <LCD_sendCommand+0x75c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f2c:	69 89       	ldd	r22, Y+17	; 0x11
    2f2e:	7a 89       	ldd	r23, Y+18	; 0x12
    2f30:	8b 89       	ldd	r24, Y+19	; 0x13
    2f32:	9c 89       	ldd	r25, Y+20	; 0x14
    2f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	88 8b       	std	Y+16, r24	; 0x10
    2f3e:	88 89       	ldd	r24, Y+16	; 0x10
    2f40:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	8a 95       	dec	r24
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_sendCommand+0x756>
    2f48:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_us(15);
#endif
}
    2f4a:	cf 59       	subi	r28, 0x9F	; 159
    2f4c:	df 4f       	sbci	r29, 0xFF	; 255
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	08 95       	ret

00002f62 <LCD_init>:

void LCD_init(void)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
	 * initialize LCD_E_PIN
	 * set LCD configuration. 2lines,8bit mode
	 * clear screen
	 * turn on display
	 ************************************************/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	61 e0       	ldi	r22, 0x01	; 1
    2f78:	41 e0       	ldi	r20, 0x01	; 1
    2f7a:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	62 e0       	ldi	r22, 0x02	; 2
    2f82:	41 e0       	ldi	r20, 0x01	; 1
    2f84:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
	LCD_sendCommand(LCD_GO_TO_HOME_POSITION);
	LCD_sendCommand(LCD_2LINES_4BIT_MODE);
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	6f ef       	ldi	r22, 0xFF	; 255
    2f8c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_GO_TO_HOME_POSITION);
    2f90:	82 e0       	ldi	r24, 0x02	; 2
    2f92:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_sendCommand>
	LCD_sendCommand(LCD_2LINES_8BIT_MODE);
    2f96:	88 e3       	ldi	r24, 0x38	; 56
    2f98:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    2fa2:	8c e0       	ldi	r24, 0x0C	; 12
    2fa4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_sendCommand>
}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character)
{
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	df 93       	push	r29
    2fb4:	cf 93       	push	r28
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
    2fba:	c1 56       	subi	r28, 0x61	; 97
    2fbc:	d0 40       	sbci	r29, 0x00	; 0
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ef 59       	subi	r30, 0x9F	; 159
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 83       	st	Z, r24
	 * send data
	 * wait
	 * Active E pin LOW
	 * wait
	 *************************************************/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	60 e0       	ldi	r22, 0x00	; 0
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	61 e0       	ldi	r22, 0x01	; 1
    2fde:	40 e0       	ldi	r20, 0x00	; 0
    2fe0:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	e3 5a       	subi	r30, 0xA3	; 163
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a8 e4       	ldi	r26, 0x48	; 72
    2ff0:	b2 e4       	ldi	r27, 0x42	; 66
    2ff2:	80 83       	st	Z, r24
    2ff4:	91 83       	std	Z+1, r25	; 0x01
    2ff6:	a2 83       	std	Z+2, r26	; 0x02
    2ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	07 5a       	subi	r16, 0xA7	; 167
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	e3 5a       	subi	r30, 0xA3	; 163
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	2b ea       	ldi	r18, 0xAB	; 171
    3010:	3a ea       	ldi	r19, 0xAA	; 170
    3012:	4a ea       	ldi	r20, 0xAA	; 170
    3014:	5e e3       	ldi	r21, 0x3E	; 62
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	f8 01       	movw	r30, r16
    3020:	80 83       	st	Z, r24
    3022:	91 83       	std	Z+1, r25	; 0x01
    3024:	a2 83       	std	Z+2, r26	; 0x02
    3026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3028:	fe 01       	movw	r30, r28
    302a:	e7 5a       	subi	r30, 0xA7	; 167
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	60 81       	ld	r22, Z
    3030:	71 81       	ldd	r23, Z+1	; 0x01
    3032:	82 81       	ldd	r24, Z+2	; 0x02
    3034:	93 81       	ldd	r25, Z+3	; 0x03
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e8       	ldi	r20, 0x80	; 128
    303c:	5f e3       	ldi	r21, 0x3F	; 63
    303e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3042:	88 23       	and	r24, r24
    3044:	34 f4       	brge	.+12     	; 0x3052 <LCD_displayCharacter+0xa4>
		__ticks = 1;
    3046:	fe 01       	movw	r30, r28
    3048:	e8 5a       	subi	r30, 0xA8	; 168
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	80 83       	st	Z, r24
    3050:	e0 c0       	rjmp	.+448    	; 0x3212 <LCD_displayCharacter+0x264>
	else if (__tmp > 255)
    3052:	fe 01       	movw	r30, r28
    3054:	e7 5a       	subi	r30, 0xA7	; 167
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	4f e7       	ldi	r20, 0x7F	; 127
    3066:	53 e4       	ldi	r21, 0x43	; 67
    3068:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    306c:	18 16       	cp	r1, r24
    306e:	0c f0       	brlt	.+2      	; 0x3072 <LCD_displayCharacter+0xc4>
    3070:	c0 c0       	rjmp	.+384    	; 0x31f2 <LCD_displayCharacter+0x244>
	{
		_delay_ms(__us / 1000.0);
    3072:	fe 01       	movw	r30, r28
    3074:	e3 5a       	subi	r30, 0xA3	; 163
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a e7       	ldi	r20, 0x7A	; 122
    3086:	54 e4       	ldi	r21, 0x44	; 68
    3088:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	fe 01       	movw	r30, r28
    3092:	ec 5a       	subi	r30, 0xAC	; 172
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 83       	st	Z, r24
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	a2 83       	std	Z+2, r26	; 0x02
    309c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    309e:	8e 01       	movw	r16, r28
    30a0:	00 5b       	subi	r16, 0xB0	; 176
    30a2:	1f 4f       	sbci	r17, 0xFF	; 255
    30a4:	fe 01       	movw	r30, r28
    30a6:	ec 5a       	subi	r30, 0xAC	; 172
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	60 81       	ld	r22, Z
    30ac:	71 81       	ldd	r23, Z+1	; 0x01
    30ae:	82 81       	ldd	r24, Z+2	; 0x02
    30b0:	93 81       	ldd	r25, Z+3	; 0x03
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a e7       	ldi	r20, 0x7A	; 122
    30b8:	53 e4       	ldi	r21, 0x43	; 67
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	f8 01       	movw	r30, r16
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30cc:	fe 01       	movw	r30, r28
    30ce:	e0 5b       	subi	r30, 0xB0	; 176
    30d0:	ff 4f       	sbci	r31, 0xFF	; 255
    30d2:	60 81       	ld	r22, Z
    30d4:	71 81       	ldd	r23, Z+1	; 0x01
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	93 81       	ldd	r25, Z+3	; 0x03
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e8       	ldi	r20, 0x80	; 128
    30e0:	5f e3       	ldi	r21, 0x3F	; 63
    30e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30e6:	88 23       	and	r24, r24
    30e8:	44 f4       	brge	.+16     	; 0x30fa <LCD_displayCharacter+0x14c>
		__ticks = 1;
    30ea:	fe 01       	movw	r30, r28
    30ec:	e2 5b       	subi	r30, 0xB2	; 178
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	91 83       	std	Z+1, r25	; 0x01
    30f6:	80 83       	st	Z, r24
    30f8:	64 c0       	rjmp	.+200    	; 0x31c2 <LCD_displayCharacter+0x214>
	else if (__tmp > 65535)
    30fa:	fe 01       	movw	r30, r28
    30fc:	e0 5b       	subi	r30, 0xB0	; 176
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	0c f0       	brlt	.+2      	; 0x311a <LCD_displayCharacter+0x16c>
    3118:	43 c0       	rjmp	.+134    	; 0x31a0 <LCD_displayCharacter+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	fe 01       	movw	r30, r28
    311c:	ec 5a       	subi	r30, 0xAC	; 172
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	8e 01       	movw	r16, r28
    313a:	02 5b       	subi	r16, 0xB2	; 178
    313c:	1f 4f       	sbci	r17, 0xFF	; 255
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	f8 01       	movw	r30, r16
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	80 83       	st	Z, r24
    3150:	1f c0       	rjmp	.+62     	; 0x3190 <LCD_displayCharacter+0x1e2>
    3152:	fe 01       	movw	r30, r28
    3154:	e4 5b       	subi	r30, 0xB4	; 180
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	89 e1       	ldi	r24, 0x19	; 25
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3160:	fe 01       	movw	r30, r28
    3162:	e4 5b       	subi	r30, 0xB4	; 180
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 81       	ld	r24, Z
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <LCD_displayCharacter+0x1bc>
    316e:	fe 01       	movw	r30, r28
    3170:	e4 5b       	subi	r30, 0xB4	; 180
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	de 01       	movw	r26, r28
    317a:	a2 5b       	subi	r26, 0xB2	; 178
    317c:	bf 4f       	sbci	r27, 0xFF	; 255
    317e:	fe 01       	movw	r30, r28
    3180:	e2 5b       	subi	r30, 0xB2	; 178
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	11 96       	adiw	r26, 0x01	; 1
    318c:	9c 93       	st	X, r25
    318e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3190:	fe 01       	movw	r30, r28
    3192:	e2 5b       	subi	r30, 0xB2	; 178
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	91 81       	ldd	r25, Z+1	; 0x01
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	d1 f6       	brne	.-76     	; 0x3152 <LCD_displayCharacter+0x1a4>
    319e:	4b c0       	rjmp	.+150    	; 0x3236 <LCD_displayCharacter+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	8e 01       	movw	r16, r28
    31a2:	02 5b       	subi	r16, 0xB2	; 178
    31a4:	1f 4f       	sbci	r17, 0xFF	; 255
    31a6:	fe 01       	movw	r30, r28
    31a8:	e0 5b       	subi	r30, 0xB0	; 176
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	f8 01       	movw	r30, r16
    31be:	91 83       	std	Z+1, r25	; 0x01
    31c0:	80 83       	st	Z, r24
    31c2:	de 01       	movw	r26, r28
    31c4:	a6 5b       	subi	r26, 0xB6	; 182
    31c6:	bf 4f       	sbci	r27, 0xFF	; 255
    31c8:	fe 01       	movw	r30, r28
    31ca:	e2 5b       	subi	r30, 0xB2	; 178
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	11 96       	adiw	r26, 0x01	; 1
    31d4:	9c 93       	st	X, r25
    31d6:	8e 93       	st	-X, r24
    31d8:	fe 01       	movw	r30, r28
    31da:	e6 5b       	subi	r30, 0xB6	; 182
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_displayCharacter+0x234>
    31e6:	fe 01       	movw	r30, r28
    31e8:	e6 5b       	subi	r30, 0xB6	; 182
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	80 83       	st	Z, r24
    31f0:	22 c0       	rjmp	.+68     	; 0x3236 <LCD_displayCharacter+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31f2:	8e 01       	movw	r16, r28
    31f4:	08 5a       	subi	r16, 0xA8	; 168
    31f6:	1f 4f       	sbci	r17, 0xFF	; 255
    31f8:	fe 01       	movw	r30, r28
    31fa:	e7 5a       	subi	r30, 0xA7	; 167
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	f8 01       	movw	r30, r16
    3210:	80 83       	st	Z, r24
    3212:	de 01       	movw	r26, r28
    3214:	a7 5b       	subi	r26, 0xB7	; 183
    3216:	bf 4f       	sbci	r27, 0xFF	; 255
    3218:	fe 01       	movw	r30, r28
    321a:	e8 5a       	subi	r30, 0xA8	; 168
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 81       	ld	r24, Z
    3220:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3222:	fe 01       	movw	r30, r28
    3224:	e7 5b       	subi	r30, 0xB7	; 183
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	8a 95       	dec	r24
    322c:	f1 f7       	brne	.-4      	; 0x322a <LCD_displayCharacter+0x27c>
    322e:	fe 01       	movw	r30, r28
    3230:	e7 5b       	subi	r30, 0xB7	; 183
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 83       	st	Z, r24
	_delay_us(50);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	62 e0       	ldi	r22, 0x02	; 2
    323a:	41 e0       	ldi	r20, 0x01	; 1
    323c:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    3240:	fe 01       	movw	r30, r28
    3242:	eb 5b       	subi	r30, 0xBB	; 187
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	a8 e4       	ldi	r26, 0x48	; 72
    324c:	b3 e4       	ldi	r27, 0x43	; 67
    324e:	80 83       	st	Z, r24
    3250:	91 83       	std	Z+1, r25	; 0x01
    3252:	a2 83       	std	Z+2, r26	; 0x02
    3254:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3256:	8e 01       	movw	r16, r28
    3258:	0f 5b       	subi	r16, 0xBF	; 191
    325a:	1f 4f       	sbci	r17, 0xFF	; 255
    325c:	fe 01       	movw	r30, r28
    325e:	eb 5b       	subi	r30, 0xBB	; 187
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	60 81       	ld	r22, Z
    3264:	71 81       	ldd	r23, Z+1	; 0x01
    3266:	82 81       	ldd	r24, Z+2	; 0x02
    3268:	93 81       	ldd	r25, Z+3	; 0x03
    326a:	2b ea       	ldi	r18, 0xAB	; 171
    326c:	3a ea       	ldi	r19, 0xAA	; 170
    326e:	4a ea       	ldi	r20, 0xAA	; 170
    3270:	5e e3       	ldi	r21, 0x3E	; 62
    3272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	f8 01       	movw	r30, r16
    327c:	80 83       	st	Z, r24
    327e:	91 83       	std	Z+1, r25	; 0x01
    3280:	a2 83       	std	Z+2, r26	; 0x02
    3282:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3284:	fe 01       	movw	r30, r28
    3286:	ef 5b       	subi	r30, 0xBF	; 191
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e8       	ldi	r20, 0x80	; 128
    3298:	5f e3       	ldi	r21, 0x3F	; 63
    329a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    329e:	88 23       	and	r24, r24
    32a0:	34 f4       	brge	.+12     	; 0x32ae <LCD_displayCharacter+0x300>
		__ticks = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	fe 01       	movw	r30, r28
    32a6:	e0 5c       	subi	r30, 0xC0	; 192
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 83       	st	Z, r24
    32ac:	9d c0       	rjmp	.+314    	; 0x33e8 <LCD_displayCharacter+0x43a>
	else if (__tmp > 255)
    32ae:	fe 01       	movw	r30, r28
    32b0:	ef 5b       	subi	r30, 0xBF	; 191
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	60 81       	ld	r22, Z
    32b6:	71 81       	ldd	r23, Z+1	; 0x01
    32b8:	82 81       	ldd	r24, Z+2	; 0x02
    32ba:	93 81       	ldd	r25, Z+3	; 0x03
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	53 e4       	ldi	r21, 0x43	; 67
    32c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	0c f0       	brlt	.+2      	; 0x32ce <LCD_displayCharacter+0x320>
    32cc:	7e c0       	rjmp	.+252    	; 0x33ca <LCD_displayCharacter+0x41c>
	{
		_delay_ms(__us / 1000.0);
    32ce:	fe 01       	movw	r30, r28
    32d0:	eb 5b       	subi	r30, 0xBB	; 187
    32d2:	ff 4f       	sbci	r31, 0xFF	; 255
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	82 81       	ldd	r24, Z+2	; 0x02
    32da:	93 81       	ldd	r25, Z+3	; 0x03
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	4a e7       	ldi	r20, 0x7A	; 122
    32e2:	54 e4       	ldi	r21, 0x44	; 68
    32e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8c af       	std	Y+60, r24	; 0x3c
    32ee:	9d af       	std	Y+61, r25	; 0x3d
    32f0:	ae af       	std	Y+62, r26	; 0x3e
    32f2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f4:	6c ad       	ldd	r22, Y+60	; 0x3c
    32f6:	7d ad       	ldd	r23, Y+61	; 0x3d
    32f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    32fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4a e7       	ldi	r20, 0x7A	; 122
    3302:	53 e4       	ldi	r21, 0x43	; 67
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	88 af       	std	Y+56, r24	; 0x38
    330e:	99 af       	std	Y+57, r25	; 0x39
    3310:	aa af       	std	Y+58, r26	; 0x3a
    3312:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3314:	68 ad       	ldd	r22, Y+56	; 0x38
    3316:	79 ad       	ldd	r23, Y+57	; 0x39
    3318:	8a ad       	ldd	r24, Y+58	; 0x3a
    331a:	9b ad       	ldd	r25, Y+59	; 0x3b
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	2c f4       	brge	.+10     	; 0x3336 <LCD_displayCharacter+0x388>
		__ticks = 1;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9f ab       	std	Y+55, r25	; 0x37
    3332:	8e ab       	std	Y+54, r24	; 0x36
    3334:	3f c0       	rjmp	.+126    	; 0x33b4 <LCD_displayCharacter+0x406>
	else if (__tmp > 65535)
    3336:	68 ad       	ldd	r22, Y+56	; 0x38
    3338:	79 ad       	ldd	r23, Y+57	; 0x39
    333a:	8a ad       	ldd	r24, Y+58	; 0x3a
    333c:	9b ad       	ldd	r25, Y+59	; 0x3b
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	4f e7       	ldi	r20, 0x7F	; 127
    3344:	57 e4       	ldi	r21, 0x47	; 71
    3346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334a:	18 16       	cp	r1, r24
    334c:	4c f5       	brge	.+82     	; 0x33a0 <LCD_displayCharacter+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3350:	7d ad       	ldd	r23, Y+61	; 0x3d
    3352:	8e ad       	ldd	r24, Y+62	; 0x3e
    3354:	9f ad       	ldd	r25, Y+63	; 0x3f
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e2       	ldi	r20, 0x20	; 32
    335c:	51 e4       	ldi	r21, 0x41	; 65
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9f ab       	std	Y+55, r25	; 0x37
    3374:	8e ab       	std	Y+54, r24	; 0x36
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <LCD_displayCharacter+0x3e8>
    3378:	89 e1       	ldi	r24, 0x19	; 25
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	9d ab       	std	Y+53, r25	; 0x35
    337e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3380:	8c a9       	ldd	r24, Y+52	; 0x34
    3382:	9d a9       	ldd	r25, Y+53	; 0x35
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <LCD_displayCharacter+0x3d6>
    3388:	9d ab       	std	Y+53, r25	; 0x35
    338a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	8e a9       	ldd	r24, Y+54	; 0x36
    338e:	9f a9       	ldd	r25, Y+55	; 0x37
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9f ab       	std	Y+55, r25	; 0x37
    3394:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	8e a9       	ldd	r24, Y+54	; 0x36
    3398:	9f a9       	ldd	r25, Y+55	; 0x37
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	69 f7       	brne	.-38     	; 0x3378 <LCD_displayCharacter+0x3ca>
    339e:	2d c0       	rjmp	.+90     	; 0x33fa <LCD_displayCharacter+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	68 ad       	ldd	r22, Y+56	; 0x38
    33a2:	79 ad       	ldd	r23, Y+57	; 0x39
    33a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    33a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9f ab       	std	Y+55, r25	; 0x37
    33b2:	8e ab       	std	Y+54, r24	; 0x36
    33b4:	8e a9       	ldd	r24, Y+54	; 0x36
    33b6:	9f a9       	ldd	r25, Y+55	; 0x37
    33b8:	9b ab       	std	Y+51, r25	; 0x33
    33ba:	8a ab       	std	Y+50, r24	; 0x32
    33bc:	8a a9       	ldd	r24, Y+50	; 0x32
    33be:	9b a9       	ldd	r25, Y+51	; 0x33
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <LCD_displayCharacter+0x412>
    33c4:	9b ab       	std	Y+51, r25	; 0x33
    33c6:	8a ab       	std	Y+50, r24	; 0x32
    33c8:	18 c0       	rjmp	.+48     	; 0x33fa <LCD_displayCharacter+0x44c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33ca:	fe 01       	movw	r30, r28
    33cc:	ef 5b       	subi	r30, 0xBF	; 191
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33dc:	dc 01       	movw	r26, r24
    33de:	cb 01       	movw	r24, r22
    33e0:	fe 01       	movw	r30, r28
    33e2:	e0 5c       	subi	r30, 0xC0	; 192
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 83       	st	Z, r24
    33e8:	fe 01       	movw	r30, r28
    33ea:	e0 5c       	subi	r30, 0xC0	; 192
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	80 81       	ld	r24, Z
    33f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33f2:	89 a9       	ldd	r24, Y+49	; 0x31
    33f4:	8a 95       	dec	r24
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <LCD_displayCharacter+0x446>
    33f8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(200);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, character);
    33fa:	fe 01       	movw	r30, r28
    33fc:	ef 59       	subi	r30, 0x9F	; 159
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	60 81       	ld	r22, Z
    3404:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePort>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	a8 ec       	ldi	r26, 0xC8	; 200
    340e:	b2 e4       	ldi	r27, 0x42	; 66
    3410:	8d a7       	std	Y+45, r24	; 0x2d
    3412:	9e a7       	std	Y+46, r25	; 0x2e
    3414:	af a7       	std	Y+47, r26	; 0x2f
    3416:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3418:	6d a5       	ldd	r22, Y+45	; 0x2d
    341a:	7e a5       	ldd	r23, Y+46	; 0x2e
    341c:	8f a5       	ldd	r24, Y+47	; 0x2f
    341e:	98 a9       	ldd	r25, Y+48	; 0x30
    3420:	2b ea       	ldi	r18, 0xAB	; 171
    3422:	3a ea       	ldi	r19, 0xAA	; 170
    3424:	4a ea       	ldi	r20, 0xAA	; 170
    3426:	5e e3       	ldi	r21, 0x3E	; 62
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	89 a7       	std	Y+41, r24	; 0x29
    3432:	9a a7       	std	Y+42, r25	; 0x2a
    3434:	ab a7       	std	Y+43, r26	; 0x2b
    3436:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3438:	69 a5       	ldd	r22, Y+41	; 0x29
    343a:	7a a5       	ldd	r23, Y+42	; 0x2a
    343c:	8b a5       	ldd	r24, Y+43	; 0x2b
    343e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	1c f4       	brge	.+6      	; 0x3456 <LCD_displayCharacter+0x4a8>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	88 a7       	std	Y+40, r24	; 0x28
    3454:	91 c0       	rjmp	.+290    	; 0x3578 <LCD_displayCharacter+0x5ca>
	else if (__tmp > 255)
    3456:	69 a5       	ldd	r22, Y+41	; 0x29
    3458:	7a a5       	ldd	r23, Y+42	; 0x2a
    345a:	8b a5       	ldd	r24, Y+43	; 0x2b
    345c:	9c a5       	ldd	r25, Y+44	; 0x2c
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	4f e7       	ldi	r20, 0x7F	; 127
    3464:	53 e4       	ldi	r21, 0x43	; 67
    3466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    346a:	18 16       	cp	r1, r24
    346c:	0c f0       	brlt	.+2      	; 0x3470 <LCD_displayCharacter+0x4c2>
    346e:	7b c0       	rjmp	.+246    	; 0x3566 <LCD_displayCharacter+0x5b8>
	{
		_delay_ms(__us / 1000.0);
    3470:	6d a5       	ldd	r22, Y+45	; 0x2d
    3472:	7e a5       	ldd	r23, Y+46	; 0x2e
    3474:	8f a5       	ldd	r24, Y+47	; 0x2f
    3476:	98 a9       	ldd	r25, Y+48	; 0x30
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a e7       	ldi	r20, 0x7A	; 122
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8c a3       	std	Y+36, r24	; 0x24
    348a:	9d a3       	std	Y+37, r25	; 0x25
    348c:	ae a3       	std	Y+38, r26	; 0x26
    348e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3490:	6c a1       	ldd	r22, Y+36	; 0x24
    3492:	7d a1       	ldd	r23, Y+37	; 0x25
    3494:	8e a1       	ldd	r24, Y+38	; 0x26
    3496:	9f a1       	ldd	r25, Y+39	; 0x27
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4a e7       	ldi	r20, 0x7A	; 122
    349e:	53 e4       	ldi	r21, 0x43	; 67
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	88 a3       	std	Y+32, r24	; 0x20
    34aa:	99 a3       	std	Y+33, r25	; 0x21
    34ac:	aa a3       	std	Y+34, r26	; 0x22
    34ae:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    34b0:	68 a1       	ldd	r22, Y+32	; 0x20
    34b2:	79 a1       	ldd	r23, Y+33	; 0x21
    34b4:	8a a1       	ldd	r24, Y+34	; 0x22
    34b6:	9b a1       	ldd	r25, Y+35	; 0x23
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	2c f4       	brge	.+10     	; 0x34d2 <LCD_displayCharacter+0x524>
		__ticks = 1;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9f 8f       	std	Y+31, r25	; 0x1f
    34ce:	8e 8f       	std	Y+30, r24	; 0x1e
    34d0:	3f c0       	rjmp	.+126    	; 0x3550 <LCD_displayCharacter+0x5a2>
	else if (__tmp > 65535)
    34d2:	68 a1       	ldd	r22, Y+32	; 0x20
    34d4:	79 a1       	ldd	r23, Y+33	; 0x21
    34d6:	8a a1       	ldd	r24, Y+34	; 0x22
    34d8:	9b a1       	ldd	r25, Y+35	; 0x23
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	4f e7       	ldi	r20, 0x7F	; 127
    34e0:	57 e4       	ldi	r21, 0x47	; 71
    34e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34e6:	18 16       	cp	r1, r24
    34e8:	4c f5       	brge	.+82     	; 0x353c <LCD_displayCharacter+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ea:	6c a1       	ldd	r22, Y+36	; 0x24
    34ec:	7d a1       	ldd	r23, Y+37	; 0x25
    34ee:	8e a1       	ldd	r24, Y+38	; 0x26
    34f0:	9f a1       	ldd	r25, Y+39	; 0x27
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e2       	ldi	r20, 0x20	; 32
    34f8:	51 e4       	ldi	r21, 0x41	; 65
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9f 8f       	std	Y+31, r25	; 0x1f
    3510:	8e 8f       	std	Y+30, r24	; 0x1e
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <LCD_displayCharacter+0x584>
    3514:	89 e1       	ldi	r24, 0x19	; 25
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	9d 8f       	std	Y+29, r25	; 0x1d
    351a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    351c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    351e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <LCD_displayCharacter+0x572>
    3524:	9d 8f       	std	Y+29, r25	; 0x1d
    3526:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3528:	8e 8d       	ldd	r24, Y+30	; 0x1e
    352a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	9f 8f       	std	Y+31, r25	; 0x1f
    3530:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3534:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	69 f7       	brne	.-38     	; 0x3514 <LCD_displayCharacter+0x566>
    353a:	24 c0       	rjmp	.+72     	; 0x3584 <LCD_displayCharacter+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353c:	68 a1       	ldd	r22, Y+32	; 0x20
    353e:	79 a1       	ldd	r23, Y+33	; 0x21
    3540:	8a a1       	ldd	r24, Y+34	; 0x22
    3542:	9b a1       	ldd	r25, Y+35	; 0x23
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	9f 8f       	std	Y+31, r25	; 0x1f
    354e:	8e 8f       	std	Y+30, r24	; 0x1e
    3550:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3552:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3554:	9b 8f       	std	Y+27, r25	; 0x1b
    3556:	8a 8f       	std	Y+26, r24	; 0x1a
    3558:	8a 8d       	ldd	r24, Y+26	; 0x1a
    355a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <LCD_displayCharacter+0x5ae>
    3560:	9b 8f       	std	Y+27, r25	; 0x1b
    3562:	8a 8f       	std	Y+26, r24	; 0x1a
    3564:	0f c0       	rjmp	.+30     	; 0x3584 <LCD_displayCharacter+0x5d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3566:	69 a5       	ldd	r22, Y+41	; 0x29
    3568:	7a a5       	ldd	r23, Y+42	; 0x2a
    356a:	8b a5       	ldd	r24, Y+43	; 0x2b
    356c:	9c a5       	ldd	r25, Y+44	; 0x2c
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	88 a7       	std	Y+40, r24	; 0x28
    3578:	88 a5       	ldd	r24, Y+40	; 0x28
    357a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    357c:	89 8d       	ldd	r24, Y+25	; 0x19
    357e:	8a 95       	dec	r24
    3580:	f1 f7       	brne	.-4      	; 0x357e <LCD_displayCharacter+0x5d0>
    3582:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	62 e0       	ldi	r22, 0x02	; 2
    3588:	40 e0       	ldi	r20, 0x00	; 0
    358a:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	a0 e7       	ldi	r26, 0x70	; 112
    3594:	b1 e4       	ldi	r27, 0x41	; 65
    3596:	8d 8b       	std	Y+21, r24	; 0x15
    3598:	9e 8b       	std	Y+22, r25	; 0x16
    359a:	af 8b       	std	Y+23, r26	; 0x17
    359c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    359e:	6d 89       	ldd	r22, Y+21	; 0x15
    35a0:	7e 89       	ldd	r23, Y+22	; 0x16
    35a2:	8f 89       	ldd	r24, Y+23	; 0x17
    35a4:	98 8d       	ldd	r25, Y+24	; 0x18
    35a6:	2b ea       	ldi	r18, 0xAB	; 171
    35a8:	3a ea       	ldi	r19, 0xAA	; 170
    35aa:	4a ea       	ldi	r20, 0xAA	; 170
    35ac:	5e e3       	ldi	r21, 0x3E	; 62
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	89 8b       	std	Y+17, r24	; 0x11
    35b8:	9a 8b       	std	Y+18, r25	; 0x12
    35ba:	ab 8b       	std	Y+19, r26	; 0x13
    35bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    35be:	69 89       	ldd	r22, Y+17	; 0x11
    35c0:	7a 89       	ldd	r23, Y+18	; 0x12
    35c2:	8b 89       	ldd	r24, Y+19	; 0x13
    35c4:	9c 89       	ldd	r25, Y+20	; 0x14
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	40 e8       	ldi	r20, 0x80	; 128
    35cc:	5f e3       	ldi	r21, 0x3F	; 63
    35ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d2:	88 23       	and	r24, r24
    35d4:	1c f4       	brge	.+6      	; 0x35dc <LCD_displayCharacter+0x62e>
		__ticks = 1;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	88 8b       	std	Y+16, r24	; 0x10
    35da:	91 c0       	rjmp	.+290    	; 0x36fe <LCD_displayCharacter+0x750>
	else if (__tmp > 255)
    35dc:	69 89       	ldd	r22, Y+17	; 0x11
    35de:	7a 89       	ldd	r23, Y+18	; 0x12
    35e0:	8b 89       	ldd	r24, Y+19	; 0x13
    35e2:	9c 89       	ldd	r25, Y+20	; 0x14
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	4f e7       	ldi	r20, 0x7F	; 127
    35ea:	53 e4       	ldi	r21, 0x43	; 67
    35ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f0:	18 16       	cp	r1, r24
    35f2:	0c f0       	brlt	.+2      	; 0x35f6 <LCD_displayCharacter+0x648>
    35f4:	7b c0       	rjmp	.+246    	; 0x36ec <LCD_displayCharacter+0x73e>
	{
		_delay_ms(__us / 1000.0);
    35f6:	6d 89       	ldd	r22, Y+21	; 0x15
    35f8:	7e 89       	ldd	r23, Y+22	; 0x16
    35fa:	8f 89       	ldd	r24, Y+23	; 0x17
    35fc:	98 8d       	ldd	r25, Y+24	; 0x18
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a e7       	ldi	r20, 0x7A	; 122
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8c 87       	std	Y+12, r24	; 0x0c
    3610:	9d 87       	std	Y+13, r25	; 0x0d
    3612:	ae 87       	std	Y+14, r26	; 0x0e
    3614:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3616:	6c 85       	ldd	r22, Y+12	; 0x0c
    3618:	7d 85       	ldd	r23, Y+13	; 0x0d
    361a:	8e 85       	ldd	r24, Y+14	; 0x0e
    361c:	9f 85       	ldd	r25, Y+15	; 0x0f
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	4a e7       	ldi	r20, 0x7A	; 122
    3624:	53 e4       	ldi	r21, 0x43	; 67
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	88 87       	std	Y+8, r24	; 0x08
    3630:	99 87       	std	Y+9, r25	; 0x09
    3632:	aa 87       	std	Y+10, r26	; 0x0a
    3634:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3636:	68 85       	ldd	r22, Y+8	; 0x08
    3638:	79 85       	ldd	r23, Y+9	; 0x09
    363a:	8a 85       	ldd	r24, Y+10	; 0x0a
    363c:	9b 85       	ldd	r25, Y+11	; 0x0b
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e8       	ldi	r20, 0x80	; 128
    3644:	5f e3       	ldi	r21, 0x3F	; 63
    3646:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    364a:	88 23       	and	r24, r24
    364c:	2c f4       	brge	.+10     	; 0x3658 <LCD_displayCharacter+0x6aa>
		__ticks = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	9f 83       	std	Y+7, r25	; 0x07
    3654:	8e 83       	std	Y+6, r24	; 0x06
    3656:	3f c0       	rjmp	.+126    	; 0x36d6 <LCD_displayCharacter+0x728>
	else if (__tmp > 65535)
    3658:	68 85       	ldd	r22, Y+8	; 0x08
    365a:	79 85       	ldd	r23, Y+9	; 0x09
    365c:	8a 85       	ldd	r24, Y+10	; 0x0a
    365e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	3f ef       	ldi	r19, 0xFF	; 255
    3664:	4f e7       	ldi	r20, 0x7F	; 127
    3666:	57 e4       	ldi	r21, 0x47	; 71
    3668:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    366c:	18 16       	cp	r1, r24
    366e:	4c f5       	brge	.+82     	; 0x36c2 <LCD_displayCharacter+0x714>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3670:	6c 85       	ldd	r22, Y+12	; 0x0c
    3672:	7d 85       	ldd	r23, Y+13	; 0x0d
    3674:	8e 85       	ldd	r24, Y+14	; 0x0e
    3676:	9f 85       	ldd	r25, Y+15	; 0x0f
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	40 e2       	ldi	r20, 0x20	; 32
    367e:	51 e4       	ldi	r21, 0x41	; 65
    3680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3690:	dc 01       	movw	r26, r24
    3692:	cb 01       	movw	r24, r22
    3694:	9f 83       	std	Y+7, r25	; 0x07
    3696:	8e 83       	std	Y+6, r24	; 0x06
    3698:	0f c0       	rjmp	.+30     	; 0x36b8 <LCD_displayCharacter+0x70a>
    369a:	89 e1       	ldi	r24, 0x19	; 25
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	9d 83       	std	Y+5, r25	; 0x05
    36a0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36a2:	8c 81       	ldd	r24, Y+4	; 0x04
    36a4:	9d 81       	ldd	r25, Y+5	; 0x05
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <LCD_displayCharacter+0x6f8>
    36aa:	9d 83       	std	Y+5, r25	; 0x05
    36ac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ae:	8e 81       	ldd	r24, Y+6	; 0x06
    36b0:	9f 81       	ldd	r25, Y+7	; 0x07
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	9f 83       	std	Y+7, r25	; 0x07
    36b6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b8:	8e 81       	ldd	r24, Y+6	; 0x06
    36ba:	9f 81       	ldd	r25, Y+7	; 0x07
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	69 f7       	brne	.-38     	; 0x369a <LCD_displayCharacter+0x6ec>
    36c0:	24 c0       	rjmp	.+72     	; 0x370a <LCD_displayCharacter+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c2:	68 85       	ldd	r22, Y+8	; 0x08
    36c4:	79 85       	ldd	r23, Y+9	; 0x09
    36c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    36c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    36ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	9f 83       	std	Y+7, r25	; 0x07
    36d4:	8e 83       	std	Y+6, r24	; 0x06
    36d6:	8e 81       	ldd	r24, Y+6	; 0x06
    36d8:	9f 81       	ldd	r25, Y+7	; 0x07
    36da:	9b 83       	std	Y+3, r25	; 0x03
    36dc:	8a 83       	std	Y+2, r24	; 0x02
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	9b 81       	ldd	r25, Y+3	; 0x03
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <LCD_displayCharacter+0x734>
    36e6:	9b 83       	std	Y+3, r25	; 0x03
    36e8:	8a 83       	std	Y+2, r24	; 0x02
    36ea:	0f c0       	rjmp	.+30     	; 0x370a <LCD_displayCharacter+0x75c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36ec:	69 89       	ldd	r22, Y+17	; 0x11
    36ee:	7a 89       	ldd	r23, Y+18	; 0x12
    36f0:	8b 89       	ldd	r24, Y+19	; 0x13
    36f2:	9c 89       	ldd	r25, Y+20	; 0x14
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	88 8b       	std	Y+16, r24	; 0x10
    36fe:	88 89       	ldd	r24, Y+16	; 0x10
    3700:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	8a 95       	dec	r24
    3706:	f1 f7       	brne	.-4      	; 0x3704 <LCD_displayCharacter+0x756>
    3708:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
	_delay_us(100);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
	_delay_us(15);
#endif
}
    370a:	cf 59       	subi	r28, 0x9F	; 159
    370c:	df 4f       	sbci	r29, 0xFF	; 255
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	08 95       	ret

00003722 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    3722:	df 93       	push	r29
    3724:	cf 93       	push	r28
    3726:	00 d0       	rcall	.+0      	; 0x3728 <LCD_displayString+0x6>
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	9a 83       	std	Y+2, r25	; 0x02
    372e:	89 83       	std	Y+1, r24	; 0x01
    3730:	0a c0       	rjmp	.+20     	; 0x3746 <LCD_displayString+0x24>
	 * display each character of the string
	 * increment the pointer.
	 **************************************************/
	while(*Str != '\0')
	{
		LCD_displayCharacter(*Str);
    3732:	e9 81       	ldd	r30, Y+1	; 0x01
    3734:	fa 81       	ldd	r31, Y+2	; 0x02
    3736:	80 81       	ld	r24, Z
    3738:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LCD_displayCharacter>
		++Str;
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
	/**************************************************
	 * loop on Str until reach '\0'
	 * display each character of the string
	 * increment the pointer.
	 **************************************************/
	while(*Str != '\0')
    3746:	e9 81       	ldd	r30, Y+1	; 0x01
    3748:	fa 81       	ldd	r31, Y+2	; 0x02
    374a:	80 81       	ld	r24, Z
    374c:	88 23       	and	r24, r24
    374e:	89 f7       	brne	.-30     	; 0x3732 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		++Str;
	}
}
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <LCD_integerToString>:

void LCD_integerToString(int num)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	62 97       	sbiw	r28, 0x12	; 18
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	9a 8b       	std	Y+18, r25	; 0x12
    3770:	89 8b       	std	Y+17, r24	; 0x11
	 * int num: the integer needed to be converted.
	 * char *str: the string contains the ASCII of the integer.
	 * base : the base of the number (Decimal(10),Binary(2),Octal(8),Hex(16)).
	 ***************************************************************************/
	char String[16];
	itoa(num,String,10);
    3772:	89 89       	ldd	r24, Y+17	; 0x11
    3774:	9a 89       	ldd	r25, Y+18	; 0x12
    3776:	9e 01       	movw	r18, r28
    3778:	2f 5f       	subi	r18, 0xFF	; 255
    377a:	3f 4f       	sbci	r19, 0xFF	; 255
    377c:	b9 01       	movw	r22, r18
    377e:	4a e0       	ldi	r20, 0x0A	; 10
    3780:	50 e0       	ldi	r21, 0x00	; 0
    3782:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <itoa>
	LCD_displayString(String);
    3786:	ce 01       	movw	r24, r28
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
}
    378e:	62 96       	adiw	r28, 0x12	; 18
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	08 95       	ret

000037a0 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row_index,uint8 col_index)
{
    37a0:	df 93       	push	r29
    37a2:	cf 93       	push	r28
    37a4:	00 d0       	rcall	.+0      	; 0x37a6 <LCD_moveCursor+0x6>
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <LCD_moveCursor+0x8>
    37a8:	0f 92       	push	r0
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	8a 83       	std	Y+2, r24	; 0x02
    37b0:	6b 83       	std	Y+3, r22	; 0x03
	 * 1. column index.
	 * 2. address of the first column in the row.
	 * add the final address to the address of the origin(0,0) to..
	 * calculate the address referred to the origin.
	 *************************************************************/
	uint8 a_lcd_col_address = LCD_FIRST_LINE_FIRST_COL_ADDRESS;
    37b2:	19 82       	std	Y+1, r1	; 0x01
	switch(row_index)
    37b4:	8a 81       	ldd	r24, Y+2	; 0x02
    37b6:	28 2f       	mov	r18, r24
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	3d 83       	std	Y+5, r19	; 0x05
    37bc:	2c 83       	std	Y+4, r18	; 0x04
    37be:	8c 81       	ldd	r24, Y+4	; 0x04
    37c0:	9d 81       	ldd	r25, Y+5	; 0x05
    37c2:	81 30       	cpi	r24, 0x01	; 1
    37c4:	91 05       	cpc	r25, r1
    37c6:	d1 f0       	breq	.+52     	; 0x37fc <LCD_moveCursor+0x5c>
    37c8:	2c 81       	ldd	r18, Y+4	; 0x04
    37ca:	3d 81       	ldd	r19, Y+5	; 0x05
    37cc:	22 30       	cpi	r18, 0x02	; 2
    37ce:	31 05       	cpc	r19, r1
    37d0:	2c f4       	brge	.+10     	; 0x37dc <LCD_moveCursor+0x3c>
    37d2:	8c 81       	ldd	r24, Y+4	; 0x04
    37d4:	9d 81       	ldd	r25, Y+5	; 0x05
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	61 f0       	breq	.+24     	; 0x37f2 <LCD_moveCursor+0x52>
    37da:	21 c0       	rjmp	.+66     	; 0x381e <LCD_moveCursor+0x7e>
    37dc:	2c 81       	ldd	r18, Y+4	; 0x04
    37de:	3d 81       	ldd	r19, Y+5	; 0x05
    37e0:	22 30       	cpi	r18, 0x02	; 2
    37e2:	31 05       	cpc	r19, r1
    37e4:	89 f0       	breq	.+34     	; 0x3808 <LCD_moveCursor+0x68>
    37e6:	8c 81       	ldd	r24, Y+4	; 0x04
    37e8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ea:	83 30       	cpi	r24, 0x03	; 3
    37ec:	91 05       	cpc	r25, r1
    37ee:	91 f0       	breq	.+36     	; 0x3814 <LCD_moveCursor+0x74>
    37f0:	16 c0       	rjmp	.+44     	; 0x381e <LCD_moveCursor+0x7e>
	{
	case 0:
		a_lcd_col_address += col_index;
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	9b 81       	ldd	r25, Y+3	; 0x03
    37f6:	89 0f       	add	r24, r25
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	11 c0       	rjmp	.+34     	; 0x381e <LCD_moveCursor+0x7e>
		break;
	case 1:
		a_lcd_col_address += (col_index+LCD_SECOND_LINE_FIRST_COL_ADDRESS);
    37fc:	9b 81       	ldd	r25, Y+3	; 0x03
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	89 0f       	add	r24, r25
    3802:	80 5c       	subi	r24, 0xC0	; 192
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	0b c0       	rjmp	.+22     	; 0x381e <LCD_moveCursor+0x7e>
		break;
	case 2:
		a_lcd_col_address += (col_index+LCD_THIRD_LINE_FIRST_COL_ADDRESS);
    3808:	9b 81       	ldd	r25, Y+3	; 0x03
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	89 0f       	add	r24, r25
    380e:	80 5f       	subi	r24, 0xF0	; 240
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	05 c0       	rjmp	.+10     	; 0x381e <LCD_moveCursor+0x7e>
		break;
	case 3:
		a_lcd_col_address += (col_index+LCD_FOURTH_LINE_FIRST_COL_ADDRESS);
    3814:	9b 81       	ldd	r25, Y+3	; 0x03
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	89 0f       	add	r24, r25
    381a:	80 5b       	subi	r24, 0xB0	; 176
    381c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(a_lcd_col_address|LCD_SET_CURSOR_POSITION);
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	80 68       	ori	r24, 0x80	; 128
    3822:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_sendCommand>
}
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	cf 91       	pop	r28
    3832:	df 91       	pop	r29
    3834:	08 95       	ret

00003836 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	00 d0       	rcall	.+0      	; 0x383c <LCD_displayStringRowColumn+0x6>
    383c:	00 d0       	rcall	.+0      	; 0x383e <LCD_displayStringRowColumn+0x8>
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	89 83       	std	Y+1, r24	; 0x01
    3844:	6a 83       	std	Y+2, r22	; 0x02
    3846:	5c 83       	std	Y+4, r21	; 0x04
    3848:	4b 83       	std	Y+3, r20	; 0x03
	/**********************************************
	 * move to the desired position.
	 * display the string.
	 **********************************************/
	LCD_moveCursor(row, col);
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	6a 81       	ldd	r22, Y+2	; 0x02
    384e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LCD_moveCursor>
	LCD_displayString(Str);
    3852:	8b 81       	ldd	r24, Y+3	; 0x03
    3854:	9c 81       	ldd	r25, Y+4	; 0x04
    3856:	0e 94 91 1b 	call	0x3722	; 0x3722 <LCD_displayString>
}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	0e 94 f7 13 	call	0x27ee	; 0x27ee <LCD_sendCommand>
}
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	00 d0       	rcall	.+0      	; 0x3882 <KEYPAD_getPressedKey+0x6>
    3882:	0f 92       	push	r0
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    3888:	19 82       	std	Y+1, r1	; 0x01
	GPIO_setupPortDirection(KEYPAD_ROWS_PORT_ID, PORT_INPUT);
    388a:	82 e0       	ldi	r24, 0x02	; 2
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <GPIO_setupPortDirection>
	GPIO_setupPortDirection(KEYPAD_COLS_PORT_ID, PORT_INPUT);
    3892:	82 e0       	ldi	r24, 0x02	; 2
    3894:	60 e0       	ldi	r22, 0x00	; 0
    3896:	0e 94 0c 0c 	call	0x1818	; 0x1818 <GPIO_setupPortDirection>
	while(1)
	{
		for(col=0; col< KEYPAD_NUM_OF_COLS; col++)
    389a:	1b 82       	std	Y+3, r1	; 0x03
    389c:	3f c0       	rjmp	.+126    	; 0x391c <KEYPAD_getPressedKey+0xa0>
		{
			GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID+col, PIN_OUTPUT);
    389e:	8b 81       	ldd	r24, Y+3	; 0x03
    38a0:	98 2f       	mov	r25, r24
    38a2:	9c 5f       	subi	r25, 0xFC	; 252
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	69 2f       	mov	r22, r25
    38a8:	41 e0       	ldi	r20, 0x01	; 1
    38aa:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    38ae:	8b 81       	ldd	r24, Y+3	; 0x03
    38b0:	88 2f       	mov	r24, r24
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	9c 01       	movw	r18, r24
    38b6:	2c 5f       	subi	r18, 0xFC	; 252
    38b8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	02 c0       	rjmp	.+4      	; 0x38c4 <KEYPAD_getPressedKey+0x48>
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	2a 95       	dec	r18
    38c6:	e2 f7       	brpl	.-8      	; 0x38c0 <KEYPAD_getPressedKey+0x44>
    38c8:	80 95       	com	r24
    38ca:	89 83       	std	Y+1, r24	; 0x01
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_COLS_PORT_ID,keypad_port_value);
    38cc:	82 e0       	ldi	r24, 0x02	; 2
    38ce:	69 81       	ldd	r22, Y+1	; 0x01
    38d0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <GPIO_writePort>
			for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    38d4:	1a 82       	std	Y+2, r1	; 0x02
    38d6:	1c c0       	rjmp	.+56     	; 0x3910 <KEYPAD_getPressedKey+0x94>
			{
				if(GPIO_readPin(KEYPAD_ROWS_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row) == KEYPAD_BUTTON_PRESSED)
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	6a 81       	ldd	r22, Y+2	; 0x02
    38dc:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_readPin>
    38e0:	88 23       	and	r24, r24
    38e2:	99 f4       	brne	.+38     	; 0x390a <KEYPAD_getPressedKey+0x8e>
				{
#if(KEYPAD_NUM_OF_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_OF_COLS)+col+1);
#elif(KEYPAD_NUM_OF_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_OF_COLS)+col+1);
    38e4:	8a 81       	ldd	r24, Y+2	; 0x02
    38e6:	88 2f       	mov	r24, r24
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	88 0f       	add	r24, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	88 0f       	add	r24, r24
    38f0:	99 1f       	adc	r25, r25
    38f2:	98 2f       	mov	r25, r24
    38f4:	8b 81       	ldd	r24, Y+3	; 0x03
    38f6:	89 0f       	add	r24, r25
    38f8:	8f 5f       	subi	r24, 0xFF	; 255
    38fa:	0e 94 93 1c 	call	0x3926	; 0x3926 <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    38fe:	0f 90       	pop	r0
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_COLS_PORT_ID,keypad_port_value);
			for(row=0; row<KEYPAD_NUM_OF_ROWS; row++)
    390a:	8a 81       	ldd	r24, Y+2	; 0x02
    390c:	8f 5f       	subi	r24, 0xFF	; 255
    390e:	8a 83       	std	Y+2, r24	; 0x02
    3910:	8a 81       	ldd	r24, Y+2	; 0x02
    3912:	84 30       	cpi	r24, 0x04	; 4
    3914:	08 f3       	brcs	.-62     	; 0x38d8 <KEYPAD_getPressedKey+0x5c>
	uint8 keypad_port_value = 0;
	GPIO_setupPortDirection(KEYPAD_ROWS_PORT_ID, PORT_INPUT);
	GPIO_setupPortDirection(KEYPAD_COLS_PORT_ID, PORT_INPUT);
	while(1)
	{
		for(col=0; col< KEYPAD_NUM_OF_COLS; col++)
    3916:	8b 81       	ldd	r24, Y+3	; 0x03
    3918:	8f 5f       	subi	r24, 0xFF	; 255
    391a:	8b 83       	std	Y+3, r24	; 0x03
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	84 30       	cpi	r24, 0x04	; 4
    3920:	08 f4       	brcc	.+2      	; 0x3924 <KEYPAD_getPressedKey+0xa8>
    3922:	bd cf       	rjmp	.-134    	; 0x389e <KEYPAD_getPressedKey+0x22>
    3924:	ba cf       	rjmp	.-140    	; 0x389a <KEYPAD_getPressedKey+0x1e>

00003926 <KEYPAD_4x4_adjustKeyNumber>:
	}

#elif(KEYPAD_NUM_OF_COLS == 4)

	static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_num)
	{
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	00 d0       	rcall	.+0      	; 0x392c <KEYPAD_4x4_adjustKeyNumber+0x6>
    392c:	00 d0       	rcall	.+0      	; 0x392e <KEYPAD_4x4_adjustKeyNumber+0x8>
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	8a 83       	std	Y+2, r24	; 0x02
		uint8 keypad_button = 0;
    3934:	19 82       	std	Y+1, r1	; 0x01
		switch(button_num)
    3936:	8a 81       	ldd	r24, Y+2	; 0x02
    3938:	28 2f       	mov	r18, r24
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	3c 83       	std	Y+4, r19	; 0x04
    393e:	2b 83       	std	Y+3, r18	; 0x03
    3940:	8b 81       	ldd	r24, Y+3	; 0x03
    3942:	9c 81       	ldd	r25, Y+4	; 0x04
    3944:	88 30       	cpi	r24, 0x08	; 8
    3946:	91 05       	cpc	r25, r1
    3948:	09 f4       	brne	.+2      	; 0x394c <KEYPAD_4x4_adjustKeyNumber+0x26>
    394a:	72 c0       	rjmp	.+228    	; 0x3a30 <KEYPAD_4x4_adjustKeyNumber+0x10a>
    394c:	2b 81       	ldd	r18, Y+3	; 0x03
    394e:	3c 81       	ldd	r19, Y+4	; 0x04
    3950:	29 30       	cpi	r18, 0x09	; 9
    3952:	31 05       	cpc	r19, r1
    3954:	5c f5       	brge	.+86     	; 0x39ac <KEYPAD_4x4_adjustKeyNumber+0x86>
    3956:	8b 81       	ldd	r24, Y+3	; 0x03
    3958:	9c 81       	ldd	r25, Y+4	; 0x04
    395a:	84 30       	cpi	r24, 0x04	; 4
    395c:	91 05       	cpc	r25, r1
    395e:	09 f4       	brne	.+2      	; 0x3962 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3960:	5b c0       	rjmp	.+182    	; 0x3a18 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    3962:	2b 81       	ldd	r18, Y+3	; 0x03
    3964:	3c 81       	ldd	r19, Y+4	; 0x04
    3966:	25 30       	cpi	r18, 0x05	; 5
    3968:	31 05       	cpc	r19, r1
    396a:	9c f4       	brge	.+38     	; 0x3992 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	82 30       	cpi	r24, 0x02	; 2
    3972:	91 05       	cpc	r25, r1
    3974:	09 f4       	brne	.+2      	; 0x3978 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3976:	4a c0       	rjmp	.+148    	; 0x3a0c <KEYPAD_4x4_adjustKeyNumber+0xe6>
    3978:	2b 81       	ldd	r18, Y+3	; 0x03
    397a:	3c 81       	ldd	r19, Y+4	; 0x04
    397c:	23 30       	cpi	r18, 0x03	; 3
    397e:	31 05       	cpc	r19, r1
    3980:	0c f0       	brlt	.+2      	; 0x3984 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3982:	47 c0       	rjmp	.+142    	; 0x3a12 <KEYPAD_4x4_adjustKeyNumber+0xec>
    3984:	8b 81       	ldd	r24, Y+3	; 0x03
    3986:	9c 81       	ldd	r25, Y+4	; 0x04
    3988:	81 30       	cpi	r24, 0x01	; 1
    398a:	91 05       	cpc	r25, r1
    398c:	09 f4       	brne	.+2      	; 0x3990 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    398e:	3b c0       	rjmp	.+118    	; 0x3a06 <KEYPAD_4x4_adjustKeyNumber+0xe0>
    3990:	37 c0       	rjmp	.+110    	; 0x3a00 <KEYPAD_4x4_adjustKeyNumber+0xda>
    3992:	2b 81       	ldd	r18, Y+3	; 0x03
    3994:	3c 81       	ldd	r19, Y+4	; 0x04
    3996:	26 30       	cpi	r18, 0x06	; 6
    3998:	31 05       	cpc	r19, r1
    399a:	09 f4       	brne	.+2      	; 0x399e <KEYPAD_4x4_adjustKeyNumber+0x78>
    399c:	43 c0       	rjmp	.+134    	; 0x3a24 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    399e:	8b 81       	ldd	r24, Y+3	; 0x03
    39a0:	9c 81       	ldd	r25, Y+4	; 0x04
    39a2:	87 30       	cpi	r24, 0x07	; 7
    39a4:	91 05       	cpc	r25, r1
    39a6:	0c f0       	brlt	.+2      	; 0x39aa <KEYPAD_4x4_adjustKeyNumber+0x84>
    39a8:	40 c0       	rjmp	.+128    	; 0x3a2a <KEYPAD_4x4_adjustKeyNumber+0x104>
    39aa:	39 c0       	rjmp	.+114    	; 0x3a1e <KEYPAD_4x4_adjustKeyNumber+0xf8>
    39ac:	2b 81       	ldd	r18, Y+3	; 0x03
    39ae:	3c 81       	ldd	r19, Y+4	; 0x04
    39b0:	2c 30       	cpi	r18, 0x0C	; 12
    39b2:	31 05       	cpc	r19, r1
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    39b6:	48 c0       	rjmp	.+144    	; 0x3a48 <KEYPAD_4x4_adjustKeyNumber+0x122>
    39b8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ba:	9c 81       	ldd	r25, Y+4	; 0x04
    39bc:	8d 30       	cpi	r24, 0x0D	; 13
    39be:	91 05       	cpc	r25, r1
    39c0:	5c f4       	brge	.+22     	; 0x39d8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    39c2:	2b 81       	ldd	r18, Y+3	; 0x03
    39c4:	3c 81       	ldd	r19, Y+4	; 0x04
    39c6:	2a 30       	cpi	r18, 0x0A	; 10
    39c8:	31 05       	cpc	r19, r1
    39ca:	c1 f1       	breq	.+112    	; 0x3a3c <KEYPAD_4x4_adjustKeyNumber+0x116>
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	9c 81       	ldd	r25, Y+4	; 0x04
    39d0:	8b 30       	cpi	r24, 0x0B	; 11
    39d2:	91 05       	cpc	r25, r1
    39d4:	b4 f5       	brge	.+108    	; 0x3a42 <KEYPAD_4x4_adjustKeyNumber+0x11c>
    39d6:	2f c0       	rjmp	.+94     	; 0x3a36 <KEYPAD_4x4_adjustKeyNumber+0x110>
    39d8:	2b 81       	ldd	r18, Y+3	; 0x03
    39da:	3c 81       	ldd	r19, Y+4	; 0x04
    39dc:	2e 30       	cpi	r18, 0x0E	; 14
    39de:	31 05       	cpc	r19, r1
    39e0:	c9 f1       	breq	.+114    	; 0x3a54 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    39e2:	8b 81       	ldd	r24, Y+3	; 0x03
    39e4:	9c 81       	ldd	r25, Y+4	; 0x04
    39e6:	8e 30       	cpi	r24, 0x0E	; 14
    39e8:	91 05       	cpc	r25, r1
    39ea:	8c f1       	brlt	.+98     	; 0x3a4e <KEYPAD_4x4_adjustKeyNumber+0x128>
    39ec:	2b 81       	ldd	r18, Y+3	; 0x03
    39ee:	3c 81       	ldd	r19, Y+4	; 0x04
    39f0:	2f 30       	cpi	r18, 0x0F	; 15
    39f2:	31 05       	cpc	r19, r1
    39f4:	89 f1       	breq	.+98     	; 0x3a58 <KEYPAD_4x4_adjustKeyNumber+0x132>
    39f6:	8b 81       	ldd	r24, Y+3	; 0x03
    39f8:	9c 81       	ldd	r25, Y+4	; 0x04
    39fa:	80 31       	cpi	r24, 0x10	; 16
    39fc:	91 05       	cpc	r25, r1
    39fe:	79 f1       	breq	.+94     	; 0x3a5e <KEYPAD_4x4_adjustKeyNumber+0x138>
		{
		default:
			keypad_button = button_num;
    3a00:	8a 81       	ldd	r24, Y+2	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
    3a04:	2e c0       	rjmp	.+92     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 1:
			keypad_button = 7;
    3a06:	87 e0       	ldi	r24, 0x07	; 7
    3a08:	89 83       	std	Y+1, r24	; 0x01
    3a0a:	2b c0       	rjmp	.+86     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 2:
			keypad_button = 8;
    3a0c:	88 e0       	ldi	r24, 0x08	; 8
    3a0e:	89 83       	std	Y+1, r24	; 0x01
    3a10:	28 c0       	rjmp	.+80     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 3:
			keypad_button = 9;
    3a12:	89 e0       	ldi	r24, 0x09	; 9
    3a14:	89 83       	std	Y+1, r24	; 0x01
    3a16:	25 c0       	rjmp	.+74     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 4:
			keypad_button = '/';
    3a18:	8f e2       	ldi	r24, 0x2F	; 47
    3a1a:	89 83       	std	Y+1, r24	; 0x01
    3a1c:	22 c0       	rjmp	.+68     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 5:
			keypad_button = 4;
    3a1e:	84 e0       	ldi	r24, 0x04	; 4
    3a20:	89 83       	std	Y+1, r24	; 0x01
    3a22:	1f c0       	rjmp	.+62     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 6:
			keypad_button = 5;
    3a24:	85 e0       	ldi	r24, 0x05	; 5
    3a26:	89 83       	std	Y+1, r24	; 0x01
    3a28:	1c c0       	rjmp	.+56     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 7:
			keypad_button = 6;
    3a2a:	86 e0       	ldi	r24, 0x06	; 6
    3a2c:	89 83       	std	Y+1, r24	; 0x01
    3a2e:	19 c0       	rjmp	.+50     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 8:
			keypad_button = '*';
    3a30:	8a e2       	ldi	r24, 0x2A	; 42
    3a32:	89 83       	std	Y+1, r24	; 0x01
    3a34:	16 c0       	rjmp	.+44     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 9:
			keypad_button = 1;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	89 83       	std	Y+1, r24	; 0x01
    3a3a:	13 c0       	rjmp	.+38     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 10:
			keypad_button = 2;
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	89 83       	std	Y+1, r24	; 0x01
    3a40:	10 c0       	rjmp	.+32     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 11:
			keypad_button = 3;
    3a42:	83 e0       	ldi	r24, 0x03	; 3
    3a44:	89 83       	std	Y+1, r24	; 0x01
    3a46:	0d c0       	rjmp	.+26     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 12:
			keypad_button = '-';
    3a48:	8d e2       	ldi	r24, 0x2D	; 45
    3a4a:	89 83       	std	Y+1, r24	; 0x01
    3a4c:	0a c0       	rjmp	.+20     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 13:
			keypad_button = ENTER; /* ASCII of Enter */
    3a4e:	8d e0       	ldi	r24, 0x0D	; 13
    3a50:	89 83       	std	Y+1, r24	; 0x01
    3a52:	07 c0       	rjmp	.+14     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 14:
			keypad_button = 0;
    3a54:	19 82       	std	Y+1, r1	; 0x01
    3a56:	05 c0       	rjmp	.+10     	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 15:
			keypad_button = '=';
    3a58:	8d e3       	ldi	r24, 0x3D	; 61
    3a5a:	89 83       	std	Y+1, r24	; 0x01
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 16:
			keypad_button = '+';
    3a5e:	8b e2       	ldi	r24, 0x2B	; 43
    3a60:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		return keypad_button;
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
	}
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	cf 91       	pop	r28
    3a6e:	df 91       	pop	r29
    3a70:	08 95       	ret

00003a72 <main>:
#include "HAL/KEYPAD/keypad.h"
#include <avr/interrupt.h>
#include <util/delay.h>

int main(void)
{
    3a72:	df 93       	push	r29
    3a74:	cf 93       	push	r28
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <main+0x6>
    3a78:	00 d0       	rcall	.+0      	; 0x3a7a <main+0x8>
    3a7a:	00 d0       	rcall	.+0      	; 0x3a7c <main+0xa>
    3a7c:	cd b7       	in	r28, 0x3d	; 61
    3a7e:	de b7       	in	r29, 0x3e	; 62
	 *  [uint8 flag]: variable to observe if the user is used the program for the first time or not.
	 *  [uint8 a_CTROL_option]: this variable stores the selected option selected by the user.
	 *  [uint8 a_num_of_wrong_passwords]: this variable used to observe how many wrong passwords the user has enterred.
	 *  [uint8 a_CTROL_verification_res]: this variable stores the result of the comparsion betweem the two input passwords.
	 ***********************************************************************************************************************/
	uint8 a_num_of_wrong_passwords = 0,flag;
    3a80:	1c 82       	std	Y+4, r1	; 0x04
	uint8 a_HMI_option = 0,a_HMI_optionOrder = 0;
    3a82:	1a 82       	std	Y+2, r1	; 0x02
    3a84:	19 82       	std	Y+1, r1	; 0x01
	 * 1. initiate the timer configuration:timer1,compare-mode,prescaler_1024.
	 * 2. set the callback function = HMI_callBack.
	 * 3. initiate LCD.
	 * 4. set the uart configuration: 9600 baud-rate, one stop bit, 8bits-data,and no parity bit.
	 ********************************************************************************************/
	HMI_init();
    3a86:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <HMI_init>

	/* ********************************************
	 * wait for control ECU to send ready
	 * receive the flag value from control ECU
	 * ********************************************/
	HMI_receiveACK();
    3a8a:	0e 94 26 12 	call	0x244c	; 0x244c <HMI_receiveACK>
	flag = UART_receiveByte();
    3a8e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    3a92:	8b 83       	std	Y+3, r24	; 0x03

	/* Don't enter here if you already set you password */
	if(flag != 1)
    3a94:	8b 81       	ldd	r24, Y+3	; 0x03
    3a96:	81 30       	cpi	r24, 0x01	; 1
    3a98:	11 f0       	breq	.+4      	; 0x3a9e <main+0x2c>
		 * 	8-3. displsy "Try Again" on the next line.
		 * 	8-4. wait for 500 msec.
		 * 	8-5. clear the screen.
		 * 9. loop until the user enter a matched passwords.
		 ******************************************************************************************************/
		HMI_passwordInputOperation();
    3a9a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <HMI_passwordInputOperation>
	}

	/* Enable the global interrupt */
	SREG |= (1<<7);
    3a9e:	af e5       	ldi	r26, 0x5F	; 95
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	ef e5       	ldi	r30, 0x5F	; 95
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	80 81       	ld	r24, Z
    3aa8:	80 68       	ori	r24, 0x80	; 128
    3aaa:	8c 93       	st	X, r24

	while(1)
	{
		/* Get the chosen option from the user */
		a_HMI_option = HMI_getChosenOption();
    3aac:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <HMI_getChosenOption>
    3ab0:	8a 83       	std	Y+2, r24	; 0x02

		switch(a_HMI_option)
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	28 2f       	mov	r18, r24
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	3e 83       	std	Y+6, r19	; 0x06
    3aba:	2d 83       	std	Y+5, r18	; 0x05
    3abc:	8d 81       	ldd	r24, Y+5	; 0x05
    3abe:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac0:	8b 32       	cpi	r24, 0x2B	; 43
    3ac2:	91 05       	cpc	r25, r1
    3ac4:	31 f0       	breq	.+12     	; 0x3ad2 <main+0x60>
    3ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    3aca:	2d 32       	cpi	r18, 0x2D	; 45
    3acc:	31 05       	cpc	r19, r1
    3ace:	09 f1       	breq	.+66     	; 0x3b12 <main+0xa0>
    3ad0:	ed cf       	rjmp	.-38     	; 0x3aac <main+0x3a>
			 * 3. verify the password: get password from user and send it to the control ECU.
			 * 4. send the chosen option to the control ECU.
			 * 5. Wait until the control ECU check the password and ready for communicate.
			 * 6. get option_order from the control ECU.
			 *********************************************************************************/
			a_num_of_wrong_passwords++;
    3ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad4:	8f 5f       	subi	r24, 0xFF	; 255
    3ad6:	8c 83       	std	Y+4, r24	; 0x04
			LCD_clearScreen();
    3ad8:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_clearScreen>
			HMI_sendACK();
    3adc:	0e 94 34 12 	call	0x2468	; 0x2468 <HMI_sendACK>
			UART_sendByte(OPEN_DOOR_OPTION);
    3ae0:	8b e2       	ldi	r24, 0x2B	; 43
    3ae2:	0e 94 b8 06 	call	0xd70	; 0xd70 <UART_sendByte>
			HMI_enterPassword();
    3ae6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <HMI_enterPassword>
			HMI_receiveACK();
    3aea:	0e 94 26 12 	call	0x244c	; 0x244c <HMI_receiveACK>
			a_HMI_optionOrder = UART_receiveByte();
    3aee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <UART_receiveByte>
    3af2:	89 83       	std	Y+1, r24	; 0x01

			if(a_HMI_optionOrder == DOOR_OPEN)
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	88 35       	cpi	r24, 0x58	; 88
    3af8:	21 f4       	brne	.+8      	; 0x3b02 <main+0x90>
				 * 10. wait for 15 seconds.
				 * 11. clear screen.
				 * 12. display "Door close" for 100 msec.
				 * 13. clear the screen.
				 **************************************************/
				HMI_displayDoorAction();
    3afa:	0e 94 38 11 	call	0x2270	; 0x2270 <HMI_displayDoorAction>
				a_num_of_wrong_passwords = 0;
    3afe:	1c 82       	std	Y+4, r1	; 0x04
    3b00:	d5 cf       	rjmp	.-86     	; 0x3aac <main+0x3a>
			}
			else if(a_HMI_optionOrder == MISMATCHED)
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	88 23       	and	r24, r24
    3b06:	91 f6       	brne	.-92     	; 0x3aac <main+0x3a>
				 * 10. if the number of wrong passwords reaches its maximum value (3):
				 * 	10-1. exit from the loop.
				 * 	10-2. reset the number of wrong passwords to 0.
				 * 	10-3. display the alarm message.
				 *************************************************************************************************/
					HMI_openDoorWrongPassword(&a_num_of_wrong_passwords);
    3b08:	ce 01       	movw	r24, r28
    3b0a:	04 96       	adiw	r24, 0x04	; 4
    3b0c:	0e 94 66 12 	call	0x24cc	; 0x24cc <HMI_openDoorWrongPassword>
    3b10:	cd cf       	rjmp	.-102    	; 0x3aac <main+0x3a>
			}
			break;		/* return to the option menu */

		case CHANGE_PASSWORD_OPTION:

			a_num_of_wrong_passwords++;
    3b12:	8c 81       	ldd	r24, Y+4	; 0x04
    3b14:	8f 5f       	subi	r24, 0xFF	; 255
    3b16:	8c 83       	std	Y+4, r24	; 0x04
			 * 	8-11. if the number of wrong passwords == 3:
			 * 		8-11-1. reset the value of number of wrong passwords.
			 * 		8-11-2. display the alarm action.
			 * 9. clear the screen.
			 *********************************************************************************************************************************/
			HMI_changePassword(&a_num_of_wrong_passwords);
    3b18:	ce 01       	movw	r24, r28
    3b1a:	04 96       	adiw	r24, 0x04	; 4
    3b1c:	0e 94 1e 13 	call	0x263c	; 0x263c <HMI_changePassword>
    3b20:	c5 cf       	rjmp	.-118    	; 0x3aac <main+0x3a>

00003b22 <__udivmodsi4>:
    3b22:	a1 e2       	ldi	r26, 0x21	; 33
    3b24:	1a 2e       	mov	r1, r26
    3b26:	aa 1b       	sub	r26, r26
    3b28:	bb 1b       	sub	r27, r27
    3b2a:	fd 01       	movw	r30, r26
    3b2c:	0d c0       	rjmp	.+26     	; 0x3b48 <__udivmodsi4_ep>

00003b2e <__udivmodsi4_loop>:
    3b2e:	aa 1f       	adc	r26, r26
    3b30:	bb 1f       	adc	r27, r27
    3b32:	ee 1f       	adc	r30, r30
    3b34:	ff 1f       	adc	r31, r31
    3b36:	a2 17       	cp	r26, r18
    3b38:	b3 07       	cpc	r27, r19
    3b3a:	e4 07       	cpc	r30, r20
    3b3c:	f5 07       	cpc	r31, r21
    3b3e:	20 f0       	brcs	.+8      	; 0x3b48 <__udivmodsi4_ep>
    3b40:	a2 1b       	sub	r26, r18
    3b42:	b3 0b       	sbc	r27, r19
    3b44:	e4 0b       	sbc	r30, r20
    3b46:	f5 0b       	sbc	r31, r21

00003b48 <__udivmodsi4_ep>:
    3b48:	66 1f       	adc	r22, r22
    3b4a:	77 1f       	adc	r23, r23
    3b4c:	88 1f       	adc	r24, r24
    3b4e:	99 1f       	adc	r25, r25
    3b50:	1a 94       	dec	r1
    3b52:	69 f7       	brne	.-38     	; 0x3b2e <__udivmodsi4_loop>
    3b54:	60 95       	com	r22
    3b56:	70 95       	com	r23
    3b58:	80 95       	com	r24
    3b5a:	90 95       	com	r25
    3b5c:	9b 01       	movw	r18, r22
    3b5e:	ac 01       	movw	r20, r24
    3b60:	bd 01       	movw	r22, r26
    3b62:	cf 01       	movw	r24, r30
    3b64:	08 95       	ret

00003b66 <__prologue_saves__>:
    3b66:	2f 92       	push	r2
    3b68:	3f 92       	push	r3
    3b6a:	4f 92       	push	r4
    3b6c:	5f 92       	push	r5
    3b6e:	6f 92       	push	r6
    3b70:	7f 92       	push	r7
    3b72:	8f 92       	push	r8
    3b74:	9f 92       	push	r9
    3b76:	af 92       	push	r10
    3b78:	bf 92       	push	r11
    3b7a:	cf 92       	push	r12
    3b7c:	df 92       	push	r13
    3b7e:	ef 92       	push	r14
    3b80:	ff 92       	push	r15
    3b82:	0f 93       	push	r16
    3b84:	1f 93       	push	r17
    3b86:	cf 93       	push	r28
    3b88:	df 93       	push	r29
    3b8a:	cd b7       	in	r28, 0x3d	; 61
    3b8c:	de b7       	in	r29, 0x3e	; 62
    3b8e:	ca 1b       	sub	r28, r26
    3b90:	db 0b       	sbc	r29, r27
    3b92:	0f b6       	in	r0, 0x3f	; 63
    3b94:	f8 94       	cli
    3b96:	de bf       	out	0x3e, r29	; 62
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	cd bf       	out	0x3d, r28	; 61
    3b9c:	09 94       	ijmp

00003b9e <__epilogue_restores__>:
    3b9e:	2a 88       	ldd	r2, Y+18	; 0x12
    3ba0:	39 88       	ldd	r3, Y+17	; 0x11
    3ba2:	48 88       	ldd	r4, Y+16	; 0x10
    3ba4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ba6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ba8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3baa:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bac:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bae:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bb0:	b9 84       	ldd	r11, Y+9	; 0x09
    3bb2:	c8 84       	ldd	r12, Y+8	; 0x08
    3bb4:	df 80       	ldd	r13, Y+7	; 0x07
    3bb6:	ee 80       	ldd	r14, Y+6	; 0x06
    3bb8:	fd 80       	ldd	r15, Y+5	; 0x05
    3bba:	0c 81       	ldd	r16, Y+4	; 0x04
    3bbc:	1b 81       	ldd	r17, Y+3	; 0x03
    3bbe:	aa 81       	ldd	r26, Y+2	; 0x02
    3bc0:	b9 81       	ldd	r27, Y+1	; 0x01
    3bc2:	ce 0f       	add	r28, r30
    3bc4:	d1 1d       	adc	r29, r1
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	f8 94       	cli
    3bca:	de bf       	out	0x3e, r29	; 62
    3bcc:	0f be       	out	0x3f, r0	; 63
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	ed 01       	movw	r28, r26
    3bd2:	08 95       	ret

00003bd4 <itoa>:
    3bd4:	fb 01       	movw	r30, r22
    3bd6:	9f 01       	movw	r18, r30
    3bd8:	e8 94       	clt
    3bda:	42 30       	cpi	r20, 0x02	; 2
    3bdc:	c4 f0       	brlt	.+48     	; 0x3c0e <itoa+0x3a>
    3bde:	45 32       	cpi	r20, 0x25	; 37
    3be0:	b4 f4       	brge	.+44     	; 0x3c0e <itoa+0x3a>
    3be2:	4a 30       	cpi	r20, 0x0A	; 10
    3be4:	29 f4       	brne	.+10     	; 0x3bf0 <itoa+0x1c>
    3be6:	97 fb       	bst	r25, 7
    3be8:	1e f4       	brtc	.+6      	; 0x3bf0 <itoa+0x1c>
    3bea:	90 95       	com	r25
    3bec:	81 95       	neg	r24
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	64 2f       	mov	r22, r20
    3bf2:	77 27       	eor	r23, r23
    3bf4:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <__udivmodhi4>
    3bf8:	80 5d       	subi	r24, 0xD0	; 208
    3bfa:	8a 33       	cpi	r24, 0x3A	; 58
    3bfc:	0c f0       	brlt	.+2      	; 0x3c00 <itoa+0x2c>
    3bfe:	89 5d       	subi	r24, 0xD9	; 217
    3c00:	81 93       	st	Z+, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	00 97       	sbiw	r24, 0x00	; 0
    3c06:	a1 f7       	brne	.-24     	; 0x3bf0 <itoa+0x1c>
    3c08:	16 f4       	brtc	.+4      	; 0x3c0e <itoa+0x3a>
    3c0a:	5d e2       	ldi	r21, 0x2D	; 45
    3c0c:	51 93       	st	Z+, r21
    3c0e:	10 82       	st	Z, r1
    3c10:	c9 01       	movw	r24, r18
    3c12:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <strrev>

00003c16 <strrev>:
    3c16:	dc 01       	movw	r26, r24
    3c18:	fc 01       	movw	r30, r24
    3c1a:	67 2f       	mov	r22, r23
    3c1c:	71 91       	ld	r23, Z+
    3c1e:	77 23       	and	r23, r23
    3c20:	e1 f7       	brne	.-8      	; 0x3c1a <strrev+0x4>
    3c22:	32 97       	sbiw	r30, 0x02	; 2
    3c24:	04 c0       	rjmp	.+8      	; 0x3c2e <strrev+0x18>
    3c26:	7c 91       	ld	r23, X
    3c28:	6d 93       	st	X+, r22
    3c2a:	70 83       	st	Z, r23
    3c2c:	62 91       	ld	r22, -Z
    3c2e:	ae 17       	cp	r26, r30
    3c30:	bf 07       	cpc	r27, r31
    3c32:	c8 f3       	brcs	.-14     	; 0x3c26 <strrev+0x10>
    3c34:	08 95       	ret

00003c36 <__udivmodhi4>:
    3c36:	aa 1b       	sub	r26, r26
    3c38:	bb 1b       	sub	r27, r27
    3c3a:	51 e1       	ldi	r21, 0x11	; 17
    3c3c:	07 c0       	rjmp	.+14     	; 0x3c4c <__udivmodhi4_ep>

00003c3e <__udivmodhi4_loop>:
    3c3e:	aa 1f       	adc	r26, r26
    3c40:	bb 1f       	adc	r27, r27
    3c42:	a6 17       	cp	r26, r22
    3c44:	b7 07       	cpc	r27, r23
    3c46:	10 f0       	brcs	.+4      	; 0x3c4c <__udivmodhi4_ep>
    3c48:	a6 1b       	sub	r26, r22
    3c4a:	b7 0b       	sbc	r27, r23

00003c4c <__udivmodhi4_ep>:
    3c4c:	88 1f       	adc	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	5a 95       	dec	r21
    3c52:	a9 f7       	brne	.-22     	; 0x3c3e <__udivmodhi4_loop>
    3c54:	80 95       	com	r24
    3c56:	90 95       	com	r25
    3c58:	bc 01       	movw	r22, r24
    3c5a:	cd 01       	movw	r24, r26
    3c5c:	08 95       	ret

00003c5e <_exit>:
    3c5e:	f8 94       	cli

00003c60 <__stop_program>:
    3c60:	ff cf       	rjmp	.-2      	; 0x3c60 <__stop_program>
